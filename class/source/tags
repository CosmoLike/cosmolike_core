!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A_s	../include/primordial.h	/^  double A_s;  \/**< usual scalar amplitude = curvature power spectrum at pivot scale *\/$/;"	m	struct:primordial
Ai	../include/sparse.h	/^	int *Ai;		\/* Ai[0..(maxnz-1)]. Contains the row indices of the entries. *\/$/;"	m	struct:sparse_matrix
Ap	../include/sparse.h	/^	int *Ap;		\/* Ap[0..ncols]. Ap[k+1]-Ap[k] is the number of entries in the k'th column. *\/$/;"	m	struct:sparse_matrix
Ax	../include/sparse.h	/^	double *Ax;		\/* Ax[0..(maxnz-1)]. Contains the values of the entries. *\/$/;"	m	struct:sparse_matrix
BB	../cpp/Engine.hh	/^  enum cltype {TT=0,EE,TE,BB,PP,TP,EP}; \/\/P stands for phi (lensing potential)$/;"	e	enum:Engine::cltype
Bfact	../include/thermodynamics.h	/^  double Bfact;  \/**< defined as in RECFAST *\/$/;"	m	struct:recombination
CB1	../include/thermodynamics.h	/^  double CB1;    \/**< defined as in RECFAST *\/$/;"	m	struct:recombination
CB1_He1	../include/thermodynamics.h	/^  double CB1_He1; \/**< defined as in RECFAST *\/$/;"	m	struct:recombination
CB1_He2	../include/thermodynamics.h	/^  double CB1_He2; \/**< defined as in RECFAST *\/$/;"	m	struct:recombination
CDB	../include/thermodynamics.h	/^  double CDB; \/**< defined as in RECFAST *\/$/;"	m	struct:recombination
CDB_He	../include/thermodynamics.h	/^  double CDB_He; \/**< defined as in RECFAST *\/$/;"	m	struct:recombination
CF1_from_Gegenbauer	../tools/hyperspherical.c	/^int CF1_from_Gegenbauer(int l,$/;"	f
CFLAGS	../cpp/Makefile	/^CFLAGS = -O2 -fopenmp -I..\/include$/;"	m
CK	../include/thermodynamics.h	/^  double CK;  \/**< defined as in RECFAST *\/$/;"	m	struct:recombination
CK_He	../include/thermodynamics.h	/^  double CK_He;  \/**< defined as in RECFAST *\/$/;"	m	struct:recombination
CL	../include/thermodynamics.h	/^  double CL;  \/**< defined as in RECFAST *\/$/;"	m	struct:recombination
CLASSMODULES	../cpp/Makefile	/^CLASSMODULES = ..\/build\/arrays.o ..\/build\/background.o ..\/build\/common.o \\$/;"	m
CLP	../include/background.h	/^enum equation_of_state {CLP,EDE};$/;"	e	enum:equation_of_state
CL_He	../include/thermodynamics.h	/^  double CL_He;  \/**< defined as in RECFAST *\/$/;"	m	struct:recombination
CR	../include/thermodynamics.h	/^  double CR;  \/**< defined as in RECFAST *\/$/;"	m	struct:recombination
CT	../include/thermodynamics.h	/^  double CT;  \/**< defined as in RECFAST *\/$/;"	m	struct:recombination
CXX	../cpp/Makefile	/^CXX = g++$/;"	m
Ci	../include/evolver_ndf15.h	/^	int *Ci; \/* Stores the row indices of the  spJ+spJ' sparsity pattern. *\/$/;"	m	struct:jacobian
ClassEngine	../cpp/ClassEngine.cc	/^ClassEngine::ClassEngine(const ClassParams& pars, bool verbose): cl(0),dofree(true){$/;"	f	class:ClassEngine
ClassEngine	../cpp/ClassEngine.cc	/^ClassEngine::ClassEngine(const ClassParams& pars,const string & precision_file, bool verbose): cl(0),dofree(true){$/;"	f	class:ClassEngine
ClassEngine	../cpp/ClassEngine.hh	/^class ClassEngine : public Engine$/;"	c
ClassEngine_hh	../cpp/ClassEngine.hh	17;"	d
ClassParams	../cpp/ClassEngine.hh	/^  ClassParams( const ClassParams& o):pars(o.pars){};$/;"	f	class:ClassParams
ClassParams	../cpp/ClassEngine.hh	/^  ClassParams(){};$/;"	f	class:ClassParams
ClassParams	../cpp/ClassEngine.hh	/^class ClassParams{$/;"	c
ClosedModY	../tools/hyperspherical.c	/^int ClosedModY(int l, int beta, double *y, int * phisign, int * dphisign){$/;"	f
Cp	../include/evolver_ndf15.h	/^	int *Cp; \/* Stores the column pointers of the spJ+spJ' sparsity pattern. *\/$/;"	m	struct:jacobian
Difmax	../include/evolver_ndf15.h	/^	double * Difmax;$/;"	m	struct:numjac_workspace
EDE	../include/background.h	/^enum equation_of_state {CLP,EDE};$/;"	e	enum:equation_of_state
EE	../cpp/Engine.hh	/^  enum cltype {TT=0,EE,TE,BB,PP,TP,EP}; \/\/P stands for phi (lensing potential)$/;"	e	enum:Engine::cltype
EP	../cpp/Engine.hh	/^  enum cltype {TT=0,EE,TE,BB,PP,TP,EP}; \/\/P stands for phi (lensing potential)$/;"	e	enum:Engine::cltype
Engine	../cpp/Engine.cc	/^Engine::Engine():_lmax(-1)$/;"	f	class:Engine
Engine	../cpp/Engine.hh	/^class Engine$/;"	c
Engine_hh	../cpp/Engine.hh	17;"	d
ErrorMsg	../include/common.h	/^typedef char ErrorMsg[_ERRORMSGSIZE_]; \/**< Generic error messages (there is such a field in each structure) *\/$/;"	t
FileArg	../include/parser.h	/^typedef char FileArg[_ARGUMENT_LENGTH_MAX_];$/;"	t
FileName	../include/common.h	/^typedef char FileName[_FILENAMESIZE_];$/;"	t
Fscale	../include/evolver_ndf15.h	/^	double * Fscale;$/;"	m	struct:numjac_workspace
Gamma_dcdm	../include/background.h	/^  double Gamma_dcdm; \/**< \\f$ \\Gamma_{dcdm} \\f$: decay constant for decaying cold dark matter *\/$/;"	m	struct:background
Gamma_prime_fld	../include/perturbations.h	/^  double Gamma_prime_fld;      \/**< Gamma_prime in PPF scheme (equivalent to eq. 14 in 0808.3125) *\/$/;"	m	struct:perturb_workspace
H	../include/primordial.h	/^  double H;$/;"	m	struct:primordial_inflation_parameters_and_workspace
H0	../include/background.h	/^  double H0; \/**< \\f$ H_0 \\f$: Hubble parameter (in fact, [\\f$H_0\/c\\f$]) in \\f$ Mpc^{-1} \\f$ *\/$/;"	m	struct:background
H0	../include/primordial.h	/^  double H0;	\/**< one parameter of the function H(phi) *\/$/;"	m	struct:primordial
H0	../include/thermodynamics.h	/^  double H0;  \/**< defined as in RECFAST *\/$/;"	m	struct:recombination
H1	../include/primordial.h	/^  double H1;	\/**< one parameter of the function H(phi) *\/$/;"	m	struct:primordial
H2	../include/primordial.h	/^  double H2;	\/**< one parameter of the function H(phi) *\/$/;"	m	struct:primordial
H3	../include/primordial.h	/^  double H3;	\/**< one parameter of the function H(phi) *\/$/;"	m	struct:primordial
H4	../include/primordial.h	/^  double H4;	\/**< one parameter of the function H(phi) *\/$/;"	m	struct:primordial
HERMITE3	../include/transfer.h	/^enum Hermite_Interpolation_Order {HERMITE3, HERMITE4, HERMITE6};$/;"	e	enum:Hermite_Interpolation_Order
HERMITE4	../include/transfer.h	/^enum Hermite_Interpolation_Order {HERMITE3, HERMITE4, HERMITE6};$/;"	e	enum:Hermite_Interpolation_Order
HERMITE6	../include/transfer.h	/^enum Hermite_Interpolation_Order {HERMITE3, HERMITE4, HERMITE6};$/;"	e	enum:Hermite_Interpolation_Order
HERMITE_DO_D2PHI	../tools/hyperspherical.c	1468;"	d	file:
HERMITE_DO_D2PHI	../tools/hyperspherical.c	1481;"	d	file:
HERMITE_DO_D2PHI	../tools/hyperspherical.c	1494;"	d	file:
HERMITE_DO_D2PHI	../tools/hyperspherical.c	1495;"	d	file:
HERMITE_DO_D2PHI	../tools/hyperspherical.c	1508;"	d	file:
HERMITE_DO_D2PHI	../tools/hyperspherical.c	1523;"	d	file:
HERMITE_DO_D2PHI	../tools/hyperspherical.c	1525;"	d	file:
HERMITE_DO_D2PHI	../tools/hyperspherical.c	1538;"	d	file:
HERMITE_DO_D2PHI	../tools/hyperspherical.c	1540;"	d	file:
HERMITE_DO_D2PHI	../tools/hyperspherical.c	1555;"	d	file:
HERMITE_DO_D2PHI	../tools/hyperspherical.c	1558;"	d	file:
HERMITE_DO_D2PHI	../tools/hyperspherical.c	1570;"	d	file:
HERMITE_DO_D2PHI	../tools/hyperspherical.c	1583;"	d	file:
HERMITE_DO_D2PHI	../tools/hyperspherical.c	1596;"	d	file:
HERMITE_DO_D2PHI	../tools/hyperspherical.c	1597;"	d	file:
HERMITE_DO_D2PHI	../tools/hyperspherical.c	1610;"	d	file:
HERMITE_DO_D2PHI	../tools/hyperspherical.c	1625;"	d	file:
HERMITE_DO_D2PHI	../tools/hyperspherical.c	1627;"	d	file:
HERMITE_DO_D2PHI	../tools/hyperspherical.c	1640;"	d	file:
HERMITE_DO_D2PHI	../tools/hyperspherical.c	1642;"	d	file:
HERMITE_DO_D2PHI	../tools/hyperspherical.c	1657;"	d	file:
HERMITE_DO_D2PHI	../tools/hyperspherical.c	1660;"	d	file:
HERMITE_DO_D2PHI	../tools/hyperspherical.c	1672;"	d	file:
HERMITE_DO_D2PHI	../tools/hyperspherical.c	1685;"	d	file:
HERMITE_DO_D2PHI	../tools/hyperspherical.c	1698;"	d	file:
HERMITE_DO_D2PHI	../tools/hyperspherical.c	1699;"	d	file:
HERMITE_DO_D2PHI	../tools/hyperspherical.c	1712;"	d	file:
HERMITE_DO_D2PHI	../tools/hyperspherical.c	1727;"	d	file:
HERMITE_DO_D2PHI	../tools/hyperspherical.c	1729;"	d	file:
HERMITE_DO_D2PHI	../tools/hyperspherical.c	1742;"	d	file:
HERMITE_DO_D2PHI	../tools/hyperspherical.c	1744;"	d	file:
HERMITE_DO_D2PHI	../tools/hyperspherical.c	1759;"	d	file:
HERMITE_DO_D2PHI	../tools/hyperspherical.c	1762;"	d	file:
HERMITE_DO_DPHI	../tools/hyperspherical.c	1467;"	d	file:
HERMITE_DO_DPHI	../tools/hyperspherical.c	1480;"	d	file:
HERMITE_DO_DPHI	../tools/hyperspherical.c	1482;"	d	file:
HERMITE_DO_DPHI	../tools/hyperspherical.c	1493;"	d	file:
HERMITE_DO_DPHI	../tools/hyperspherical.c	1507;"	d	file:
HERMITE_DO_DPHI	../tools/hyperspherical.c	1510;"	d	file:
HERMITE_DO_DPHI	../tools/hyperspherical.c	1522;"	d	file:
HERMITE_DO_DPHI	../tools/hyperspherical.c	1537;"	d	file:
HERMITE_DO_DPHI	../tools/hyperspherical.c	1539;"	d	file:
HERMITE_DO_DPHI	../tools/hyperspherical.c	1554;"	d	file:
HERMITE_DO_DPHI	../tools/hyperspherical.c	1557;"	d	file:
HERMITE_DO_DPHI	../tools/hyperspherical.c	1569;"	d	file:
HERMITE_DO_DPHI	../tools/hyperspherical.c	1582;"	d	file:
HERMITE_DO_DPHI	../tools/hyperspherical.c	1584;"	d	file:
HERMITE_DO_DPHI	../tools/hyperspherical.c	1595;"	d	file:
HERMITE_DO_DPHI	../tools/hyperspherical.c	1609;"	d	file:
HERMITE_DO_DPHI	../tools/hyperspherical.c	1612;"	d	file:
HERMITE_DO_DPHI	../tools/hyperspherical.c	1624;"	d	file:
HERMITE_DO_DPHI	../tools/hyperspherical.c	1639;"	d	file:
HERMITE_DO_DPHI	../tools/hyperspherical.c	1641;"	d	file:
HERMITE_DO_DPHI	../tools/hyperspherical.c	1656;"	d	file:
HERMITE_DO_DPHI	../tools/hyperspherical.c	1659;"	d	file:
HERMITE_DO_DPHI	../tools/hyperspherical.c	1671;"	d	file:
HERMITE_DO_DPHI	../tools/hyperspherical.c	1684;"	d	file:
HERMITE_DO_DPHI	../tools/hyperspherical.c	1686;"	d	file:
HERMITE_DO_DPHI	../tools/hyperspherical.c	1697;"	d	file:
HERMITE_DO_DPHI	../tools/hyperspherical.c	1711;"	d	file:
HERMITE_DO_DPHI	../tools/hyperspherical.c	1714;"	d	file:
HERMITE_DO_DPHI	../tools/hyperspherical.c	1726;"	d	file:
HERMITE_DO_DPHI	../tools/hyperspherical.c	1741;"	d	file:
HERMITE_DO_DPHI	../tools/hyperspherical.c	1743;"	d	file:
HERMITE_DO_DPHI	../tools/hyperspherical.c	1758;"	d	file:
HERMITE_DO_DPHI	../tools/hyperspherical.c	1761;"	d	file:
HERMITE_DO_PHI	../tools/hyperspherical.c	1466;"	d	file:
HERMITE_DO_PHI	../tools/hyperspherical.c	1469;"	d	file:
HERMITE_DO_PHI	../tools/hyperspherical.c	1479;"	d	file:
HERMITE_DO_PHI	../tools/hyperspherical.c	1492;"	d	file:
HERMITE_DO_PHI	../tools/hyperspherical.c	1506;"	d	file:
HERMITE_DO_PHI	../tools/hyperspherical.c	1509;"	d	file:
HERMITE_DO_PHI	../tools/hyperspherical.c	1521;"	d	file:
HERMITE_DO_PHI	../tools/hyperspherical.c	1524;"	d	file:
HERMITE_DO_PHI	../tools/hyperspherical.c	1536;"	d	file:
HERMITE_DO_PHI	../tools/hyperspherical.c	1553;"	d	file:
HERMITE_DO_PHI	../tools/hyperspherical.c	1556;"	d	file:
HERMITE_DO_PHI	../tools/hyperspherical.c	1568;"	d	file:
HERMITE_DO_PHI	../tools/hyperspherical.c	1571;"	d	file:
HERMITE_DO_PHI	../tools/hyperspherical.c	1581;"	d	file:
HERMITE_DO_PHI	../tools/hyperspherical.c	1594;"	d	file:
HERMITE_DO_PHI	../tools/hyperspherical.c	1608;"	d	file:
HERMITE_DO_PHI	../tools/hyperspherical.c	1611;"	d	file:
HERMITE_DO_PHI	../tools/hyperspherical.c	1623;"	d	file:
HERMITE_DO_PHI	../tools/hyperspherical.c	1626;"	d	file:
HERMITE_DO_PHI	../tools/hyperspherical.c	1638;"	d	file:
HERMITE_DO_PHI	../tools/hyperspherical.c	1655;"	d	file:
HERMITE_DO_PHI	../tools/hyperspherical.c	1658;"	d	file:
HERMITE_DO_PHI	../tools/hyperspherical.c	1670;"	d	file:
HERMITE_DO_PHI	../tools/hyperspherical.c	1673;"	d	file:
HERMITE_DO_PHI	../tools/hyperspherical.c	1683;"	d	file:
HERMITE_DO_PHI	../tools/hyperspherical.c	1696;"	d	file:
HERMITE_DO_PHI	../tools/hyperspherical.c	1710;"	d	file:
HERMITE_DO_PHI	../tools/hyperspherical.c	1713;"	d	file:
HERMITE_DO_PHI	../tools/hyperspherical.c	1725;"	d	file:
HERMITE_DO_PHI	../tools/hyperspherical.c	1728;"	d	file:
HERMITE_DO_PHI	../tools/hyperspherical.c	1740;"	d	file:
HERMITE_DO_PHI	../tools/hyperspherical.c	1757;"	d	file:
HERMITE_DO_PHI	../tools/hyperspherical.c	1760;"	d	file:
HIS	../include/transfer.h	/^  HyperInterpStruct HIS; \/**< structure containing all hyperspherical bessel functions (flat case) or all hyperspherical bessel functions for a given value of beta=q\/sqrt(|K|) (non-flat case). HIS = Hyperspherical Interpolation Structure. *\/$/;"	m	struct:transfer_workspace
HIS_allocated	../include/transfer.h	/^  int HIS_allocated; \/**< flag specifying whether the previous structure has been allocated *\/$/;"	m	struct:transfer_workspace
H_eq	../include/background.h	/^  double H_eq;      \/**< Hubble rate at radiation\/matter equality [Mpc^-1] *\/$/;"	m	struct:background
H_frac	../include/thermodynamics.h	/^  double H_frac; \/**< defined as in RECFAST *\/$/;"	m	struct:recombination
Hermite_Interpolation_Order	../include/transfer.h	/^enum Hermite_Interpolation_Order {HERMITE3, HERMITE4, HERMITE6};$/;"	g
HyperInterpStruct	../include/hyperspherical.h	/^} HyperInterpStruct;$/;"	t	typeref:struct:HypersphericalInterpolationStructure
HypersphericalExplicit	../tools/hyperspherical.c	/^int HypersphericalExplicit(int K,int l, double beta,double x, double *Phi){$/;"	f
HypersphericalInterpolationStructure	../include/hyperspherical.h	/^typedef struct HypersphericalInterpolationStructure{$/;"	s
I	../include/quadrature.h	/^  double I;		\/* Estimate of integral *\/$/;"	m	struct:adaptive_integration_tree_node
K	../include/background.h	/^  double K; \/**< \\f$ K \\f$: Curvature parameter \\f$ K=-\\Omega0_k*a_{today}^2*H_0^2\\f$; *\/$/;"	m	struct:background
K	../include/hermite3_interpolation_csource.h	/^int K = pHIS->K;$/;"	v
K	../include/hermite4_interpolation_csource.h	/^int K = pHIS->K;$/;"	v
K	../include/hermite6_interpolation_csource.h	/^int K, l, j, nx, current_border_idx=0;$/;"	v
K	../include/hyperspherical.h	/^   int K;$/;"	m	struct:WKB_parameters
K	../include/hyperspherical.h	/^  int K;                 \/\/Sign of the curvature, (0,-1,1)$/;"	m	struct:HypersphericalInterpolationStructure
K	../include/transfer.h	/^  double K; \/**< curvature parameter (see background module for details) *\/$/;"	m	struct:transfer_workspace
K	../tools/hermite3_interpolation_csource.h	/^int K = pHIS->K;$/;"	v
K	../tools/hermite4_interpolation_csource.h	/^int K = pHIS->K;$/;"	v
K	../tools/hermite6_interpolation_csource.h	/^int K, l, j, nx, current_border_idx=0;$/;"	v
L	../include/sparse.h	/^	sp_mat *L;		\/*L and U is the factors of the decomposed matrix.*\/$/;"	m	struct:sparse_numerical
LU	../include/evolver_ndf15.h	/^	double **LU;$/;"	m	struct:jacobian
LUw	../include/evolver_ndf15.h	/^	double *LUw;$/;"	m	struct:jacobian
MAX	../include/common.h	72;"	d
MIN	../include/common.h	71;"	d
M_ncdm	../include/background.h	/^  double * M_ncdm;                       \/**< vector of masses of non-cold relic:$/;"	m	struct:background
N	../include/primordial.h	/^  double N;$/;"	m	struct:primordial_inflation_parameters_and_workspace
NC_RSD	../include/transfer.h	/^              NC_RSD} radial_function_type;$/;"	e	enum:__anon2
NRSIGN	../include/common.h	74;"	d
N_ncdm	../include/background.h	/^  int N_ncdm;                            \/**< Number of distinguishable ncdm species *\/$/;"	m	struct:background
N_ncdm	../include/perturbations.h	/^  int N_ncdm;		\/**< number of distinct non-cold-dark-matter (ncdm) species *\/$/;"	m	struct:perturb_vector
N_star	../include/primordial.h	/^  N_star,$/;"	e	enum:phi_pivot_methods
Neff	../include/background.h	/^  double Neff; \/**< so-called "effective neutrino number", computed at earliest time in interpolation table *\/$/;"	m	struct:background
Nnow	../include/thermodynamics.h	/^  double Nnow;   \/**< defined as in RECFAST *\/$/;"	m	struct:recombination
Numerical	../include/evolver_ndf15.h	/^	sp_num *Numerical; \/*Stores the LU decomposition.*\/$/;"	m	struct:jacobian
Omega0_b	../include/background.h	/^  double Omega0_b; \/**< \\f$ \\Omega_{0 b} \\f$: baryons *\/$/;"	m	struct:background
Omega0_cdm	../include/background.h	/^  double Omega0_cdm; \/**< \\f$ \\Omega_{0 cdm} \\f$: cold dark matter *\/$/;"	m	struct:background
Omega0_dcdm	../include/background.h	/^  double Omega0_dcdm; \/**< \\f$ \\Omega_{0 dcdm} \\f$: decaying cold dark matter *\/$/;"	m	struct:background
Omega0_dcdmdr	../include/background.h	/^  double Omega0_dcdmdr; \/**< \\f$ \\Omega_{0 dcdm}+\\Omega_{0 dr} \\f$: decaying cold dark matter (dcdm) decaying to dark radiation (dr) *\/$/;"	m	struct:background
Omega0_de	../include/background.h	/^  double Omega0_de; \/**< total dark energy density today, currently defined as 1 - Omega0_m - Omega0_r - Omega0_k *\/$/;"	m	struct:background
Omega0_dr	../include/background.h	/^  double Omega0_dr; \/**< \\f$ \\Omega_{0 dr} \\f$: decay radiation *\/$/;"	m	struct:background
Omega0_fld	../include/background.h	/^  double Omega0_fld; \/**< \\f$ \\Omega_{0 de} \\f$: fluid *\/$/;"	m	struct:background
Omega0_g	../include/background.h	/^  double Omega0_g; \/**< \\f$ \\Omega_{0 \\gamma} \\f$: photons *\/$/;"	m	struct:background
Omega0_idm_dr	../include/background.h	/^  double Omega0_idm_dr; \/**< \\f$ \\Omega_{0 idm_dr} \\f$: dark matter interacting with dark radiation *\/$/;"	m	struct:background
Omega0_idr	../include/background.h	/^  double Omega0_idr; \/**< \\f$ \\Omega_{0 idr} \\f$: interacting dark radiation *\/$/;"	m	struct:background
Omega0_k	../include/background.h	/^  double Omega0_k; \/**< \\f$ \\Omega_{0_k} \\f$: curvature contribution *\/$/;"	m	struct:background
Omega0_lambda	../include/background.h	/^  double Omega0_lambda; \/**< \\f$ \\Omega_{0_\\Lambda} \\f$: cosmological constant *\/$/;"	m	struct:background
Omega0_m	../include/background.h	/^  double Omega0_m;  \/**< total non-relativistic matter today *\/$/;"	m	struct:background
Omega0_ncdm	../include/background.h	/^  double * Omega0_ncdm, Omega0_ncdm_tot; \/**< Omega0_ncdm for each species and for the total Omega0_ncdm *\/$/;"	m	struct:background
Omega0_ncdm_tot	../include/background.h	/^  double * Omega0_ncdm, Omega0_ncdm_tot; \/**< Omega0_ncdm for each species and for the total Omega0_ncdm *\/$/;"	m	struct:background
Omega0_r	../include/background.h	/^  double Omega0_r;  \/**< total ultra-relativistic radiation today *\/$/;"	m	struct:background
Omega0_scf	../include/background.h	/^  double Omega0_scf;        \/**< \\f$ \\Omega_{0 scf} \\f$: scalar field *\/$/;"	m	struct:background
Omega0_ur	../include/background.h	/^  double Omega0_ur; \/**< \\f$ \\Omega_{0 \\nu r} \\f$: ultra-relativistic neutrinos *\/$/;"	m	struct:background
Omega_EDE	../include/background.h	/^  double Omega_EDE; \/**< \\f$ wa_{DE} \\f$: Early Dark Energy density parameter *\/$/;"	m	struct:background
Omega_dcdmdr	../include/input.h	/^enum target_names {theta_s, Omega_dcdmdr, omega_dcdmdr, Omega_scf, Omega_ini_dcdm, omega_ini_dcdm, sigma8};$/;"	e	enum:target_names
Omega_ini_dcdm	../include/background.h	/^  double Omega_ini_dcdm;    \/**< \\f$ \\Omega_{ini,dcdm} \\f$: rescaled initial value for dcdm density (see 1407.2418 for definitions) *\/$/;"	m	struct:background
Omega_ini_dcdm	../include/input.h	/^enum target_names {theta_s, Omega_dcdmdr, omega_dcdmdr, Omega_scf, Omega_ini_dcdm, omega_ini_dcdm, sigma8};$/;"	e	enum:target_names
Omega_scf	../include/input.h	/^enum target_names {theta_s, Omega_dcdmdr, omega_dcdmdr, Omega_scf, Omega_ini_dcdm, omega_ini_dcdm, sigma8};$/;"	e	enum:target_names
PP	../cpp/Engine.hh	/^  enum cltype {TT=0,EE,TE,BB,PP,TP,EP}; \/\/P stands for phi (lensing potential)$/;"	e	enum:Engine::cltype
PhiWKB_minus_phiminabs	../tools/hyperspherical.c	/^double PhiWKB_minus_phiminabs(double x, void *param){$/;"	f
Phi_l	../include/hermite3_interpolation_csource.h	/^double *Phi_l, *dPhi_l;$/;"	v
Phi_l	../include/hermite4_interpolation_csource.h	/^double *Phi_l, *dPhi_l;$/;"	v
Phi_l	../include/hermite6_interpolation_csource.h	/^double *Phi_l, *dPhi_l;$/;"	v
Phi_l	../tools/hermite3_interpolation_csource.h	/^double *Phi_l, *dPhi_l;$/;"	v
Phi_l	../tools/hermite4_interpolation_csource.h	/^double *Phi_l, *dPhi_l;$/;"	v
Phi_l	../tools/hermite6_interpolation_csource.h	/^double *Phi_l, *dPhi_l;$/;"	v
Rowmax	../include/evolver_ndf15.h	/^	int * Rowmax;$/;"	m	struct:numjac_workspace
SCALAR_POLARISATION_E	../include/transfer.h	/^              SCALAR_POLARISATION_E,$/;"	e	enum:__anon2
SCALAR_TEMPERATURE_0	../include/transfer.h	/^typedef enum {SCALAR_TEMPERATURE_0,$/;"	e	enum:__anon2
SCALAR_TEMPERATURE_1	../include/transfer.h	/^              SCALAR_TEMPERATURE_1,$/;"	e	enum:__anon2
SCALAR_TEMPERATURE_2	../include/transfer.h	/^              SCALAR_TEMPERATURE_2,$/;"	e	enum:__anon2
SIGN	../include/common.h	73;"	d
SPFLIP	../include/sparse.h	59;"	d
SPMARK	../include/sparse.h	62;"	d
SPMARKED	../include/sparse.h	61;"	d
SPUNFLIP	../include/sparse.h	60;"	d
S_fld	../include/perturbations.h	/^  double S_fld;                \/**< S quantity sourcing Gamma_prime evolution in PPF scheme (equivalent to eq. 15 in 0808.3125) *\/$/;"	m	struct:perturb_workspace
TE	../cpp/Engine.hh	/^  enum cltype {TT=0,EE,TE,BB,PP,TP,EP}; \/\/P stands for phi (lensing potential)$/;"	e	enum:Engine::cltype
TENSOR_POLARISATION_B	../include/transfer.h	/^              TENSOR_POLARISATION_B,$/;"	e	enum:__anon2
TENSOR_POLARISATION_E	../include/transfer.h	/^              TENSOR_POLARISATION_E,$/;"	e	enum:__anon2
TENSOR_TEMPERATURE_2	../include/transfer.h	/^              TENSOR_TEMPERATURE_2,$/;"	e	enum:__anon2
TINY	../include/evolver_ndf15.h	6;"	d
TP	../cpp/Engine.hh	/^  enum cltype {TT=0,EE,TE,BB,PP,TP,EP}; \/\/P stands for phi (lensing potential)$/;"	e	enum:Engine::cltype
TT	../cpp/Engine.hh	/^  enum cltype {TT=0,EE,TE,BB,PP,TP,EP}; \/\/P stands for phi (lensing potential)$/;"	e	enum:Engine::cltype
T_cmb	../include/background.h	/^  double T_cmb; \/**< \\f$ T_{cmb} \\f$: current CMB temperature in Kelvins *\/$/;"	m	struct:background
T_idr	../include/background.h	/^  double T_idr;      \/**< \\f$ T_{idr} \\f$: current temperature of interacting dark radiation in Kelvins *\/$/;"	m	struct:background
T_ncdm	../include/background.h	/^  double * T_ncdm,T_ncdm_default;       \/**< list of 1st parameters in$/;"	m	struct:background
T_ncdm_default	../include/background.h	/^  double * T_ncdm,T_ncdm_default;       \/**< list of 1st parameters in$/;"	m	struct:background
Tcmb	../cpp/ClassEngine.hh	/^  inline double Tcmb() const {return ba.T_cmb;}$/;"	f	class:ClassEngine
Tnow	../include/thermodynamics.h	/^  double Tnow;   \/**< defined as in RECFAST *\/$/;"	m	struct:recombination
U	../include/sparse.h	/^	sp_mat *U;$/;"	m	struct:sparse_numerical
V	../include/primordial.h	/^  double V;$/;"	m	struct:primordial_inflation_parameters_and_workspace
V0	../include/primordial.h	/^  double V0;	\/**< one parameter of the function V(phi) *\/$/;"	m	struct:primordial
V1	../include/primordial.h	/^  double V1;	\/**< one parameter of the function V(phi) *\/$/;"	m	struct:primordial
V2	../include/primordial.h	/^  double V2;	\/**< one parameter of the function V(phi) *\/$/;"	m	struct:primordial
V3	../include/primordial.h	/^  double V3;	\/**< one parameter of the function V(phi) *\/$/;"	m	struct:primordial
V4	../include/primordial.h	/^  double V4;	\/**< one parameter of the function V(phi) *\/$/;"	m	struct:primordial
VECTOR_POLARISATION_B	../include/transfer.h	/^              VECTOR_POLARISATION_B,$/;"	e	enum:__anon2
VECTOR_POLARISATION_E	../include/transfer.h	/^              VECTOR_POLARISATION_E,$/;"	e	enum:__anon2
VECTOR_TEMPERATURE_1	../include/transfer.h	/^              VECTOR_TEMPERATURE_1,$/;"	e	enum:__anon2
VECTOR_TEMPERATURE_2	../include/transfer.h	/^              VECTOR_TEMPERATURE_2,$/;"	e	enum:__anon2
V_e_scf	background.c	/^double V_e_scf(struct background *pba,$/;"	f
V_p_scf	background.c	/^double V_p_scf($/;"	f
V_scf	background.c	/^double V_scf($/;"	f
WKB_parameters	../include/hyperspherical.h	/^struct WKB_parameters{$/;"	s
YHe	../include/thermodynamics.h	/^  double YHe;  \/**< \\f$ Y_{He} \\f$: primordial helium fraction *\/$/;"	m	struct:thermo
YHe	../include/thermodynamics.h	/^  double YHe; \/**< defined as in RECFAST *\/$/;"	m	struct:recombination
_A2P_s_	../include/thermodynamics.h	678;"	d
_A2P_t_	../include/thermodynamics.h	679;"	d
_ARGUMENT_LENGTH_MAX_	../include/parser.h	7;"	d
_BBN_	../include/thermodynamics.h	644;"	d
_COLUMNWIDTH_	../include/common.h	61;"	d
_DELIMITER_	../include/common.h	65;"	d
_EPSILON_	../include/common.h	57;"	d
_ERRCON_	../include/dei_rkck.h	91;"	d
_ERRORMSGSIZE_	../include/common.h	27;"	d
_E_	../include/common.h	45;"	d
_FAILURE_	../include/common.h	25;"	d
_FALSE_	../include/common.h	22;"	d
_FILENAMESIZE_	../include/common.h	30;"	d
_GT_END_	../include/growTable.h	12;"	d
_GT_FACTOR_	../include/growTable.h	11;"	d
_GT_INITSIZE_	../include/growTable.h	10;"	d
_G_	../include/background.h	575;"	d
_Gyr_over_Mpc_	../include/background.h	572;"	d
_HIS_BYTE_ALIGNMENT_	../include/hyperspherical.h	16;"	d
_HUGE_	../include/common.h	55;"	d
_HYPER_BLOCK_	../include/hyperspherical.h	13;"	d
_HYPER_CHUNK_	../include/hyperspherical.h	14;"	d
_HYPER_OVERFLOW_	../include/hyperspherical.h	9;"	d
_HYPER_SAFETY_	../include/hyperspherical.h	11;"	d
_K_PER_DECADE_PRIMORDIAL_MIN_	../include/primordial.h	528;"	d
_LINE_LENGTH_MAX_	../include/parser.h	6;"	d
_L_H_alpha_	../include/thermodynamics.h	673;"	d
_L_H_ion_	../include/thermodynamics.h	672;"	d
_L_He1_ion_	../include/thermodynamics.h	674;"	d
_L_He2St_ion_	../include/thermodynamics.h	682;"	d
_L_He2_ion_	../include/thermodynamics.h	675;"	d
_L_He_2Pt_	../include/thermodynamics.h	680;"	d
_L_He_2St_	../include/thermodynamics.h	681;"	d
_L_He_2p_	../include/thermodynamics.h	677;"	d
_L_He_2s_	../include/thermodynamics.h	676;"	d
_Lambda_	../include/thermodynamics.h	670;"	d
_Lambda_He_	../include/thermodynamics.h	671;"	d
_MAXSTP_	../include/dei_rkck.h	86;"	d
_MAXTITLESTRINGLENGTH_	../include/common.h	63;"	d
_MAX_IT_	../include/common.h	47;"	d
_MAX_NUMBER_OF_K_FILES_	../include/perturbations.h	83;"	d
_MAX_NUM_EXTRAPOLATION_	../include/nonlinear.h	13;"	d
_MIN_NUMBER_OF_LAGUERRE_POINTS_	../include/quadrature.h	4;"	d
_M_EV_TOO_BIG_FOR_HALOFIT_	../include/nonlinear.h	9;"	d
_M_SUN_	../include/nonlinear.h	11;"	d
_Mpc_over_m_	../include/background.h	569;"	d
_NUM_TARGETS_	../include/input.h	140;"	d
_ONE_OVER_HYPER_OVERFLOW_	../include/hyperspherical.h	10;"	d
_OUTPUTPRECISION_	../include/common.h	59;"	d
_PGROW_	../include/dei_rkck.h	89;"	d
_PIHALF_	../include/common.h	35;"	d
_PI_	../include/common.h	33;"	d
_PSD_DERIVATIVE_EXP_MAX_	../include/background.h	610;"	d
_PSD_DERIVATIVE_EXP_MIN_	../include/background.h	609;"	d
_PSHRNK_	../include/dei_rkck.h	90;"	d
_QUADRATURE_MAX_	../include/common.h	49;"	d
_QUADRATURE_MAX_BG_	../include/common.h	51;"	d
_RECFAST_INTEG_SIZE_	../include/thermodynamics.h	668;"	d
_RKCK_a2_	../include/dei_rkck.h	93;"	d
_RKCK_a3_	../include/dei_rkck.h	94;"	d
_RKCK_a4_	../include/dei_rkck.h	95;"	d
_RKCK_a5_	../include/dei_rkck.h	96;"	d
_RKCK_a6_	../include/dei_rkck.h	97;"	d
_RKCK_b21_	../include/dei_rkck.h	98;"	d
_RKCK_b31_	../include/dei_rkck.h	99;"	d
_RKCK_b32_	../include/dei_rkck.h	100;"	d
_RKCK_b41_	../include/dei_rkck.h	101;"	d
_RKCK_b42_	../include/dei_rkck.h	102;"	d
_RKCK_b43_	../include/dei_rkck.h	103;"	d
_RKCK_b51_	../include/dei_rkck.h	104;"	d
_RKCK_b52_	../include/dei_rkck.h	105;"	d
_RKCK_b53_	../include/dei_rkck.h	106;"	d
_RKCK_b54_	../include/dei_rkck.h	107;"	d
_RKCK_b61_	../include/dei_rkck.h	108;"	d
_RKCK_b62_	../include/dei_rkck.h	109;"	d
_RKCK_b63_	../include/dei_rkck.h	110;"	d
_RKCK_b64_	../include/dei_rkck.h	111;"	d
_RKCK_b65_	../include/dei_rkck.h	112;"	d
_RKCK_c1_	../include/dei_rkck.h	113;"	d
_RKCK_c3_	../include/dei_rkck.h	114;"	d
_RKCK_c4_	../include/dei_rkck.h	115;"	d
_RKCK_c6_	../include/dei_rkck.h	116;"	d
_RKCK_dc1_	../include/dei_rkck.h	118;"	d
_RKCK_dc3_	../include/dei_rkck.h	119;"	d
_RKCK_dc4_	../include/dei_rkck.h	120;"	d
_RKCK_dc5_	../include/dei_rkck.h	117;"	d
_RKCK_dc6_	../include/dei_rkck.h	121;"	d
_SAFETY_	../include/dei_rkck.h	88;"	d
_SCALE_BACK_	../include/background.h	605;"	d
_SELECTION_NUM_MAX_	../include/perturbations.h	72;"	d
_SPLINE_EST_DERIV_	../include/arrays.h	11;"	d
_SPLINE_NATURAL_	../include/arrays.h	10;"	d
_SQRT2_	../include/common.h	39;"	d
_SQRT6_	../include/common.h	41;"	d
_SQRT_PI_	../include/common.h	43;"	d
_SUCCESS_	../include/common.h	24;"	d
_SVN_VERSION_	../include/svnversion.h	1;"	d
_TINY_	../include/dei_rkck.h	87;"	d
_TOLVAR_	../include/common.h	53;"	d
_TRIG_PRECISSION_	../include/hyperspherical.h	12;"	d
_TRUE_	../include/common.h	21;"	d
_TWOPI_	../include/common.h	37;"	d
_TWO_OVER_THREE_	../include/hyperspherical.h	15;"	d
_T_0_	../include/thermodynamics.h	698;"	d
_T_1_	../include/thermodynamics.h	701;"	d
_VERSION_	../include/common.h	18;"	d
_YHE_BIG_	../include/thermodynamics.h	713;"	d
_YHE_SMALL_	../include/thermodynamics.h	714;"	d
_Z_PK_NUM_MAX_	../include/output.h	14;"	d
_Z_REC_MAX_	../include/thermodynamics.h	715;"	d
_Z_REC_MIN_	../include/thermodynamics.h	716;"	d
__ALLOCATE_PRECISION_PARAMETER__	../include/common.h	354;"	d
__ALLOCATE_PRECISION_PARAMETER__	../include/common.h	356;"	d
__ARRAYS__	../include/arrays.h	6;"	d
__ASSIGN_DEFAULT_PRECISION__	input.c	3490;"	d	file:
__ASSIGN_DEFAULT_PRECISION__	input.c	3492;"	d	file:
__BACKGROUND__	../include/background.h	4;"	d
__CLASSDIR__	../include/common.h	68;"	d
__CLASS__	../include/class.h	2;"	d
__COMMON__	../include/common.h	16;"	d
__DEI__	../include/dei_rkck.h	2;"	d
__EVO__	../include/evolver_ndf15.h	2;"	d
__EVO__	../include/evolver_rkck.h	2;"	d
__GROWTABLE__	../include/growTable.h	6;"	d
__HYPERSPHERICAL__	../include/hyperspherical.h	6;"	d
__INPUT__	../include/input.h	4;"	d
__LENSING__	../include/lensing.h	4;"	d
__NONLINEAR__	../include/nonlinear.h	7;"	d
__OUTPUT__	../include/output.h	4;"	d
__PARSER__	../include/parser.h	2;"	d
__PARSE_PRECISION_PARAMETER__	input.c	593;"	d	file:
__PARSE_PRECISION_PARAMETER__	input.c	595;"	d	file:
__PERTURBATIONS__	../include/perturbations.h	4;"	d
__PRIMORDIAL__	../include/primordial.h	4;"	d
__QSS__	../include/quadrature.h	2;"	d
__SPA__	../include/sparse.h	2;"	d
__SPECTRA__	../include/spectra.h	4;"	d
__THERMODYNAMICS__	../include/thermodynamics.h	4;"	d
__TRANSFER__	../include/transfer.h	4;"	d
__TRIGONOMETRIC_INTEGRALS__	../include/trigonometric_integrals.h	6;"	d
_aH_	../include/primordial.h	/^  _aH_,$/;"	e	enum:target_quantity
_a_	../include/primordial.h	/^  _a_$/;"	e	enum:target_quantity
_a_PPB_	../include/thermodynamics.h	694;"	d
_a_VF_	../include/thermodynamics.h	699;"	d
_a_trip_	../include/thermodynamics.h	702;"	d
_b_PPB_	../include/thermodynamics.h	695;"	d
_b_VF_	../include/thermodynamics.h	700;"	d
_b_trip_	../include/thermodynamics.h	703;"	d
_c_	../include/background.h	574;"	d
_c_PPB_	../include/thermodynamics.h	696;"	d
_class_print_species_	../include/background.h	14;"	d
_d_PPB_	../include/thermodynamics.h	697;"	d
_eV_	../include/background.h	576;"	d
_end_inflation_	../include/primordial.h	/^  _end_inflation_,$/;"	e	enum:target_quantity
_errmsg	../cpp/ClassEngine.hh	/^  ErrorMsg _errmsg;            \/* for error messages *\/$/;"	m	class:ClassEngine
_f_Mead	nonlinear_hmcode.c	/^double _f_Mead(double x, double y, double p10, double p11, double p12, double p13) {$/;"	f
_get_bin_integrated_ncl_	../include/transfer.h	44;"	d
_get_bin_nonintegrated_ncl_	../include/transfer.h	28;"	d
_h_BIG_	../include/background.h	592;"	d
_h_P_	../include/background.h	580;"	d
_h_SMALL_	../include/background.h	593;"	d
_index_tt_in_range_	../include/transfer.h	13;"	d
_integrated_ncl_	../include/transfer.h	15;"	d
_k_B_	../include/background.h	579;"	d
_lmax	../cpp/Engine.hh	/^  int _lmax;$/;"	m	class:Engine
_m_H_	../include/thermodynamics.h	656;"	d
_m_e_	../include/thermodynamics.h	654;"	d
_m_p_	../include/thermodynamics.h	655;"	d
_nonintegrated_ncl_	../include/transfer.h	20;"	d
_not4_	../include/thermodynamics.h	657;"	d
_omegab_BIG_	../include/background.h	594;"	d
_omegab_SMALL_	../include/background.h	595;"	d
_phi_	../include/primordial.h	/^  _phi_,$/;"	e	enum:target_quantity
_scalars_	../include/perturbations.h	10;"	d
_set_source_	../include/perturbations.h	14;"	d
_sigma_	../include/thermodynamics.h	658;"	d
_sigma_He_2Ps_	../include/thermodynamics.h	683;"	d
_sigma_He_2Pt_	../include/thermodynamics.h	684;"	d
_tensors_	../include/perturbations.h	12;"	d
_vectors_	../include/perturbations.h	11;"	d
_zeta3_	../include/background.h	612;"	d
_zeta5_	../include/background.h	613;"	d
a	../include/hermite3_interpolation_csource.h	/^double a[3]={0.,0.};$/;"	v
a	../include/hermite4_interpolation_csource.h	/^double a[3]={0.,0.,0.};$/;"	v
a	../tools/hermite3_interpolation_csource.h	/^double a[3]={0.,0.};$/;"	v
a	../tools/hermite4_interpolation_csource.h	/^double a[3]={0.,0.,0.};$/;"	v
a1	../include/hermite6_interpolation_csource.h	/^double a1=0, a2=0, a3=0, a4=0, a5=0;$/;"	v
a1	../tools/hermite6_interpolation_csource.h	/^double a1=0, a2=0, a3=0, a4=0, a5=0;$/;"	v
a2	../include/hermite6_interpolation_csource.h	/^double a1=0, a2=0, a3=0, a4=0, a5=0;$/;"	v
a2	../include/primordial.h	/^  double a2;$/;"	m	struct:primordial_inflation_parameters_and_workspace
a2	../tools/hermite6_interpolation_csource.h	/^double a1=0, a2=0, a3=0, a4=0, a5=0;$/;"	v
a3	../include/hermite6_interpolation_csource.h	/^double a1=0, a2=0, a3=0, a4=0, a5=0;$/;"	v
a3	../tools/hermite6_interpolation_csource.h	/^double a1=0, a2=0, a3=0, a4=0, a5=0;$/;"	v
a4	../include/hermite6_interpolation_csource.h	/^double a1=0, a2=0, a3=0, a4=0, a5=0;$/;"	v
a4	../tools/hermite6_interpolation_csource.h	/^double a1=0, a2=0, a3=0, a4=0, a5=0;$/;"	v
a5	../include/hermite6_interpolation_csource.h	/^double a1=0, a2=0, a3=0, a4=0, a5=0;$/;"	v
a5	../tools/hermite6_interpolation_csource.h	/^double a1=0, a2=0, a3=0, a4=0, a5=0;$/;"	v
aH	../include/primordial.h	/^  double aH;$/;"	m	struct:primordial_inflation_parameters_and_workspace
a_eq	../include/background.h	/^  double a_eq;      \/**< scale factor at radiation\/matter equality *\/$/;"	m	struct:background
a_idm_dr	../include/thermodynamics.h	/^  double a_idm_dr;      \/**< strength of the coupling between interacting dark matter and interacting dark radiation (idm-idr) *\/$/;"	m	struct:thermo
a_today	../include/background.h	/^  double a_today; \/**< scale factor today (arbitrary and irrelevant for most purposes) *\/$/;"	m	struct:background
absFdelRm	../include/evolver_ndf15.h	/^	double * absFdelRm;$/;"	m	struct:numjac_workspace
absFvalue	../include/evolver_ndf15.h	/^	double * absFvalue;$/;"	m	struct:numjac_workspace
absFvalueRm	../include/evolver_ndf15.h	/^	double * absFvalueRm;$/;"	m	struct:numjac_workspace
adaptive_integration_tree_node	../include/quadrature.h	/^typedef struct adaptive_integration_tree_node{$/;"	s
add	../cpp/ClassEngine.hh	/^  template<typename T> unsigned add(const string& key,const T& val){$/;"	f	class:ClassParams
adjust_stepsize	../tools/evolver_ndf15.c	/^int adjust_stepsize(double **dif, double abshdivabshlast, int neq,int k){$/;"	f
age	../include/background.h	/^  double age; \/**< age in Gyears *\/$/;"	m	struct:background
airy_cheb_approx	../tools/hyperspherical.c	/^double airy_cheb_approx(double z){$/;"	f
ak2	../include/dei_rkck.h	/^  double * ak2;$/;"	m	struct:generic_integrator_workspace
ak3	../include/dei_rkck.h	/^  double * ak3;$/;"	m	struct:generic_integrator_workspace
ak4	../include/dei_rkck.h	/^  double * ak4;$/;"	m	struct:generic_integrator_workspace
ak5	../include/dei_rkck.h	/^  double * ak5;$/;"	m	struct:generic_integrator_workspace
ak6	../include/dei_rkck.h	/^  double * ak6;$/;"	m	struct:generic_integrator_workspace
alpha_ad_bi	../include/primordial.h	/^  double alpha_ad_bi; \/**< ADxBI cross-correlation running *\/$/;"	m	struct:primordial
alpha_ad_cdi	../include/primordial.h	/^  double alpha_ad_cdi; \/**< ADxCDI cross-correlation running *\/$/;"	m	struct:primordial
alpha_ad_nid	../include/primordial.h	/^  double alpha_ad_nid; \/**< ADxNID cross-correlation running *\/$/;"	m	struct:primordial
alpha_ad_niv	../include/primordial.h	/^  double alpha_ad_niv; \/**< ADxNIV cross-correlation running *\/$/;"	m	struct:primordial
alpha_bi	../include/primordial.h	/^  double alpha_bi; \/**< BI running *\/$/;"	m	struct:primordial
alpha_bi_cdi	../include/primordial.h	/^  double alpha_bi_cdi; \/**< BIxCDI cross-correlation running *\/$/;"	m	struct:primordial
alpha_bi_nid	../include/primordial.h	/^  double alpha_bi_nid; \/**< BIxNIV cross-correlation running *\/$/;"	m	struct:primordial
alpha_bi_niv	../include/primordial.h	/^  double alpha_bi_niv; \/**< BIxNIV cross-correlation running *\/$/;"	m	struct:primordial
alpha_cdi	../include/primordial.h	/^  double alpha_cdi; \/**< CDI running *\/$/;"	m	struct:primordial
alpha_cdi_nid	../include/primordial.h	/^  double alpha_cdi_nid; \/**< CDIxNID cross-correlation running *\/$/;"	m	struct:primordial
alpha_cdi_niv	../include/primordial.h	/^  double alpha_cdi_niv; \/**< CDIxNIV cross-correlation running *\/$/;"	m	struct:primordial
alpha_idm_dr	../include/perturbations.h	/^  double * alpha_idm_dr; \/**< Angular contribution to collisional term at l>=2 for idm_fr-idr *\/$/;"	m	struct:perturbs
alpha_nid	../include/primordial.h	/^  double alpha_nid; \/**< NID running *\/$/;"	m	struct:primordial
alpha_nid_niv	../include/primordial.h	/^  double alpha_nid_niv; \/**< NIDxNIV cross-correlation running *\/$/;"	m	struct:primordial
alpha_niv	../include/primordial.h	/^  double alpha_niv; \/**< NIV running *\/$/;"	m	struct:primordial
alpha_s	../include/primordial.h	/^  double alpha_s; \/**< usual scalar running *\/$/;"	m	struct:primordial
alpha_t	../include/primordial.h	/^  double alpha_t; \/**< usual tensor running *\/$/;"	m	struct:primordial
amplitude	../include/primordial.h	/^  double ** amplitude; \/**< all amplitudes in matrix form: amplitude[index_md][index_ic1_ic2] *\/$/;"	m	struct:primordial
analytic_Pk	../include/primordial.h	/^  analytic_Pk,$/;"	e	enum:primordial_spectrum_type
analytical	../include/primordial.h	/^  analytical$/;"	e	enum:inflation_module_behavior
angular_rescaling	../include/thermodynamics.h	/^  double angular_rescaling; \/**< [ratio ra_rec \/ (tau0-tau_rec)]: gives CMB rescaling in angular space relative to flat model (=1 for curvature K=0) *\/$/;"	m	struct:thermo
angular_rescaling	../include/transfer.h	/^  double angular_rescaling; \/**< correction between l and k space due to curvature (= comoving angular diameter distance to recombination \/ comoving radius to recombination) *\/$/;"	m	struct:transfers
annihilation	../include/thermodynamics.h	/^  double annihilation; \/**< parameter describing CDM annihilation (f <sigma*v> \/ m_cdm, see e.g. 0905.0003) *\/$/;"	m	struct:recombination
annihilation	../include/thermodynamics.h	/^  double annihilation; \/**< parameter describing CDM annihilation (f <sigma*v> \/ m_cdm, see e.g. 0905.0003) *\/$/;"	m	struct:thermo
annihilation_f_halo	../include/thermodynamics.h	/^  double annihilation_f_halo; \/**< takes the contribution of DM annihilation in halos into account*\/$/;"	m	struct:recombination
annihilation_f_halo	../include/thermodynamics.h	/^  double annihilation_f_halo; \/**< takes the contribution of DM annihilation in halos into account*\/$/;"	m	struct:thermo
annihilation_variation	../include/thermodynamics.h	/^  double annihilation_variation; \/**< if this parameter is non-zero,$/;"	m	struct:recombination
annihilation_variation	../include/thermodynamics.h	/^  double annihilation_variation; \/**< if this parameter is non-zero,$/;"	m	struct:thermo
annihilation_z	../include/thermodynamics.h	/^  double annihilation_z; \/**< if annihilation_variation is non-zero,$/;"	m	struct:recombination
annihilation_z	../include/thermodynamics.h	/^  double annihilation_z; \/**< if annihilation_variation is non-zero,$/;"	m	struct:thermo
annihilation_z_halo	../include/thermodynamics.h	/^  double annihilation_z_halo; \/**< characteristic redshift for DM annihilation in halos*\/$/;"	m	struct:recombination
annihilation_z_halo	../include/thermodynamics.h	/^  double annihilation_z_halo; \/**< characteristic redshift for DM annihilation in halos*\/$/;"	m	struct:thermo
annihilation_zmax	../include/thermodynamics.h	/^  double annihilation_zmax; \/**< if annihilation_variation is non-zero,$/;"	m	struct:recombination
annihilation_zmax	../include/thermodynamics.h	/^  double annihilation_zmax; \/**< if annihilation_variation is non-zero,$/;"	m	struct:thermo
annihilation_zmin	../include/thermodynamics.h	/^  double annihilation_zmin; \/**< if annihilation_variation is non-zero,$/;"	m	struct:recombination
annihilation_zmin	../include/thermodynamics.h	/^  double annihilation_zmin; \/**< if annihilation_variation is non-zero,$/;"	m	struct:thermo
ap_size	../include/perturbations.h	/^  int ap_size;      \/**< number of relevant approximations for a given mode *\/$/;"	m	struct:perturb_workspace
app_over_a	../include/primordial.h	/^  double app_over_a;$/;"	m	struct:primordial_inflation_parameters_and_workspace
approx	../include/perturbations.h	/^  int * approx;     \/**< array of approximation flags holding at a given time: approx[index_ap] *\/$/;"	m	struct:perturb_workspace
array_derive	../tools/arrays.c	/^int array_derive($/;"	f
array_derive1_order2_table_line_to_line	../tools/arrays.c	/^int array_derive1_order2_table_line_to_line($/;"	f
array_derive2_order2_table_line_to_line	../tools/arrays.c	/^int array_derive2_order2_table_line_to_line($/;"	f
array_derive_spline	../tools/arrays.c	/^int array_derive_spline($/;"	f
array_derive_spline_table_line_to_line	../tools/arrays.c	/^int array_derive_spline_table_line_to_line($/;"	f
array_derive_two	../tools/arrays.c	/^int array_derive_two($/;"	f
array_integrate	../tools/arrays.c	/^int array_integrate($/;"	f
array_integrate_all	../tools/arrays.c	/^int array_integrate_all($/;"	f
array_integrate_all_spline	../tools/arrays.c	/^int array_integrate_all_spline($/;"	f
array_integrate_all_trapzd_or_spline	../tools/arrays.c	/^int array_integrate_all_trapzd_or_spline($/;"	f
array_integrate_ratio	../tools/arrays.c	/^int array_integrate_ratio($/;"	f
array_integrate_spline_table_line_to_line	../tools/arrays.c	/^int array_integrate_spline_table_line_to_line($/;"	f
array_interpolate	../tools/arrays.c	/^int array_interpolate($/;"	f
array_interpolate_cubic_equal	../tools/arrays.c	/^int array_interpolate_cubic_equal($/;"	f
array_interpolate_equal	../tools/arrays.c	/^int array_interpolate_equal($/;"	f
array_interpolate_extrapolate_logspline_loglinear_one_column	../tools/arrays.c	/^int array_interpolate_extrapolate_logspline_loglinear_one_column($/;"	f
array_interpolate_extrapolate_spline_one_column	../tools/arrays.c	/^int array_interpolate_extrapolate_spline_one_column($/;"	f
array_interpolate_growing_closeby	../tools/arrays.c	/^int array_interpolate_growing_closeby($/;"	f
array_interpolate_linear	../tools/arrays.c	/^int array_interpolate_linear($/;"	f
array_interpolate_logspline	../tools/arrays.c	/^int array_interpolate_logspline($/;"	f
array_interpolate_one_growing_closeby	../tools/arrays.c	/^int array_interpolate_one_growing_closeby($/;"	f
array_interpolate_parabola	../tools/arrays.c	/^int array_interpolate_parabola(double x1,$/;"	f
array_interpolate_spline	../tools/arrays.c	/^int array_interpolate_spline($/;"	f
array_interpolate_spline_growing_closeby	../tools/arrays.c	/^int array_interpolate_spline_growing_closeby($/;"	f
array_interpolate_spline_growing_hunt	../tools/arrays.c	/^int array_interpolate_spline_growing_hunt($/;"	f
array_interpolate_spline_one_column	../tools/arrays.c	/^int array_interpolate_spline_one_column($/;"	f
array_interpolate_two	../tools/arrays.c	/^int array_interpolate_two($/;"	f
array_interpolate_two_arrays_one_column	../tools/arrays.c	/^int array_interpolate_two_arrays_one_column($/;"	f
array_interpolate_two_bis	../tools/arrays.c	/^int array_interpolate_two_bis($/;"	f
array_logspline_table_lines	../tools/arrays.c	/^int array_logspline_table_lines($/;"	f
array_logspline_table_one_column	../tools/arrays.c	/^int array_logspline_table_one_column($/;"	f
array_search_bisect	../tools/arrays.c	/^int array_search_bisect($/;"	f
array_smooth	../tools/arrays.c	/^int array_smooth(double * array,$/;"	f
array_smooth_trg	../tools/arrays.c	/^int array_smooth_trg(double * array,$/;"	f
array_spline	../tools/arrays.c	/^int array_spline($/;"	f
array_spline_table_columns	../tools/arrays.c	/^int array_spline_table_columns($/;"	f
array_spline_table_columns2	../tools/arrays.c	/^int array_spline_table_columns2($/;"	f
array_spline_table_line_to_line	../tools/arrays.c	/^int array_spline_table_line_to_line($/;"	f
array_spline_table_lines	../tools/arrays.c	/^int array_spline_table_lines($/;"	f
array_spline_table_one_column	../tools/arrays.c	/^int array_spline_table_one_column($/;"	f
array_trapezoidal_convolution	../tools/arrays.c	/^int array_trapezoidal_convolution($/;"	f
array_trapezoidal_integral	../tools/arrays.c	/^int array_trapezoidal_integral($/;"	f
array_trapezoidal_mweights	../tools/arrays.c	/^int array_trapezoidal_mweights($/;"	f
array_trapezoidal_weights	../tools/arrays.c	/^int array_trapezoidal_weights($/;"	f
attractor_ic_scf	../include/background.h	/^  short attractor_ic_scf;   \/**< whether the scalar field has attractor initial conditions *\/$/;"	m	struct:background
b	../include/hermite3_interpolation_csource.h	/^double b[3]={0.,0.};$/;"	v
b	../include/hermite4_interpolation_csource.h	/^double b[3]={0.,0.,0.};$/;"	v
b	../tools/hermite3_interpolation_csource.h	/^double b[3]={0.,0.};$/;"	v
b	../tools/hermite4_interpolation_csource.h	/^double b[3]={0.,0.,0.};$/;"	v
b1	../include/hermite6_interpolation_csource.h	/^double b1=0, b2=0, b3=0, b4=0, b5=0;$/;"	v
b1	../tools/hermite6_interpolation_csource.h	/^double b1=0, b2=0, b3=0, b4=0, b5=0;$/;"	v
b2	../include/hermite6_interpolation_csource.h	/^double b1=0, b2=0, b3=0, b4=0, b5=0;$/;"	v
b2	../tools/hermite6_interpolation_csource.h	/^double b1=0, b2=0, b3=0, b4=0, b5=0;$/;"	v
b3	../include/hermite6_interpolation_csource.h	/^double b1=0, b2=0, b3=0, b4=0, b5=0;$/;"	v
b3	../tools/hermite6_interpolation_csource.h	/^double b1=0, b2=0, b3=0, b4=0, b5=0;$/;"	v
b4	../include/hermite6_interpolation_csource.h	/^double b1=0, b2=0, b3=0, b4=0, b5=0;$/;"	v
b4	../tools/hermite6_interpolation_csource.h	/^double b1=0, b2=0, b3=0, b4=0, b5=0;$/;"	v
b5	../include/hermite6_interpolation_csource.h	/^double b1=0, b2=0, b3=0, b4=0, b5=0;$/;"	v
b5	../tools/hermite6_interpolation_csource.h	/^double b1=0, b2=0, b3=0, b4=0, b5=0;$/;"	v
b_idr	../include/thermodynamics.h	/^  double b_idr;         \/**< strength of the self coupling for interacting dark radiation (idr-idr) *\/$/;"	m	struct:thermo
ba	../cpp/ClassEngine.hh	/^  struct background ba;       \/* for cosmological background *\/$/;"	m	class:ClassEngine	typeref:struct:ClassEngine::background
background	../include/background.h	/^struct background$/;"	s
background_at_tau	background.c	/^int background_at_tau($/;"	f
background_derivs	background.c	/^int background_derivs($/;"	f
background_find_equality	background.c	/^int background_find_equality($/;"	f
background_free	background.c	/^int background_free($/;"	f
background_free_input	background.c	/^int background_free_input($/;"	f
background_free_noinput	background.c	/^int background_free_noinput($/;"	f
background_functions	background.c	/^int background_functions($/;"	f
background_indices	background.c	/^int background_indices($/;"	f
background_init	background.c	/^int background_init($/;"	f
background_initial_conditions	background.c	/^int background_initial_conditions($/;"	f
background_ncdm_M_from_Omega	background.c	/^int background_ncdm_M_from_Omega($/;"	f
background_ncdm_distribution	background.c	/^int background_ncdm_distribution($/;"	f
background_ncdm_init	background.c	/^int background_ncdm_init($/;"	f
background_ncdm_momenta	background.c	/^int background_ncdm_momenta($/;"	f
background_ncdm_test_function	background.c	/^int background_ncdm_test_function($/;"	f
background_output_budget	background.c	/^int background_output_budget($/;"	f
background_output_data	background.c	/^int background_output_data($/;"	f
background_output_titles	background.c	/^int background_output_titles(struct background * pba,$/;"	f
background_parameters_and_workspace	../include/background.h	/^struct background_parameters_and_workspace {$/;"	s
background_parameters_for_distributions	../include/background.h	/^struct background_parameters_for_distributions {$/;"	s
background_solve	background.c	/^int background_solve($/;"	f
background_table	../include/background.h	/^  double * background_table; \/**< table background_table[index_tau*pba->bg_size+pba->index_bg] with all other quantities (array of size bg_size*bt_size) **\/$/;"	m	struct:background
background_tau_of_z	background.c	/^int background_tau_of_z($/;"	f
background_verbose	../include/background.h	/^  short background_verbose; \/**< flag regulating the amount of information sent to standard output (none if set to zero) *\/$/;"	m	struct:background
background_w_fld	background.c	/^int background_w_fld($/;"	f
backward	../include/primordial.h	/^  backward,$/;"	e	enum:integration_direction
behavior	../include/primordial.h	/^  enum inflation_module_behavior behavior; \/**< Specifies if the inflation module computes the primordial spectrum numerically (default) or analytically*\/$/;"	m	struct:primordial	typeref:enum:primordial::inflation_module_behavior
beta	../include/hermite3_interpolation_csource.h	/^double beta = pHIS->beta;$/;"	v
beta	../include/hermite4_interpolation_csource.h	/^double beta = pHIS->beta;$/;"	v
beta	../include/hermite6_interpolation_csource.h	/^double beta, beta2, *xvec, *sinK, *cotK;$/;"	v
beta	../include/hyperspherical.h	/^   double beta;$/;"	m	struct:WKB_parameters
beta	../include/hyperspherical.h	/^  double beta;$/;"	m	struct:HypersphericalInterpolationStructure
beta	../tools/hermite3_interpolation_csource.h	/^double beta = pHIS->beta;$/;"	v
beta	../tools/hermite4_interpolation_csource.h	/^double beta = pHIS->beta;$/;"	v
beta	../tools/hermite6_interpolation_csource.h	/^double beta, beta2, *xvec, *sinK, *cotK;$/;"	v
beta2	../include/hermite3_interpolation_csource.h	/^double beta2 = beta*beta;$/;"	v
beta2	../include/hermite4_interpolation_csource.h	/^double beta2 = beta*beta;$/;"	v
beta2	../include/hermite6_interpolation_csource.h	/^double beta, beta2, *xvec, *sinK, *cotK;$/;"	v
beta2	../tools/hermite3_interpolation_csource.h	/^double beta2 = beta*beta;$/;"	v
beta2	../tools/hermite4_interpolation_csource.h	/^double beta2 = beta*beta;$/;"	v
beta2	../tools/hermite6_interpolation_csource.h	/^double beta, beta2, *xvec, *sinK, *cotK;$/;"	v
beta_idr	../include/perturbations.h	/^  double * beta_idr;  \/**< Angular contribution to collisional term at l>=2 for idr-idr *\/$/;"	m	struct:perturbs
beta_s	../include/primordial.h	/^  double beta_s;  \/**< running of running *\/$/;"	m	struct:primordial
bg_size	../include/background.h	/^  int bg_size;        \/**< size of background vector in the "long format" *\/$/;"	m	struct:background
bg_size_normal	../include/background.h	/^  int bg_size_normal; \/**< size of background vector in the "normal format" *\/$/;"	m	struct:background
bg_size_short	../include/background.h	/^  int bg_size_short;  \/**< size of background vector in the "short format" *\/$/;"	m	struct:background
bi_B_size	../include/background.h	/^  int bi_B_size;        \/**< Number of {B} parameters *\/$/;"	m	struct:background
bi_size	../include/background.h	/^  int bi_size;          \/**< Number of {B}+{C} parameters *\/$/;"	m	struct:background
binned_reio_num	../include/thermodynamics.h	/^  int binned_reio_num; \/**< with how many bins do we want to describe reionization? *\/$/;"	m	struct:thermo
binned_reio_step_sharpness	../include/thermodynamics.h	/^  double binned_reio_step_sharpness; \/**< sharpness of tanh() step interpolating between binned values *\/$/;"	m	struct:thermo
binned_reio_xe	../include/thermodynamics.h	/^  double * binned_reio_xe; \/**< imposed \\f$ X_e(z)\\f$ value at center of each bin *\/$/;"	m	struct:thermo
binned_reio_z	../include/thermodynamics.h	/^  double * binned_reio_z; \/**< central z value for each bin *\/$/;"	m	struct:thermo
bt_size	../include/background.h	/^  int bt_size;               \/**< number of lines (i.e. time-steps) in the array *\/$/;"	m	struct:background
buffer	../include/growTable.h	/^  void* buffer; \/**< stack of data *\/$/;"	m	struct:__anon1
burn_tree	../tools/quadrature.c	/^int burn_tree(qss_node *node){$/;"	f
c	../include/hermite3_interpolation_csource.h	/^double c[3]={0.,0.};$/;"	v
c	../include/hermite4_interpolation_csource.h	/^double c[3]={0.,0.,0.};$/;"	v
c	../tools/hermite3_interpolation_csource.h	/^double c[3]={0.,0.};$/;"	v
c	../tools/hermite4_interpolation_csource.h	/^double c[3]={0.,0.,0.};$/;"	v
c1	../include/hermite6_interpolation_csource.h	/^double c1=0, c2=0, c3=0, c4=0, c5=0;$/;"	v
c1	../tools/hermite6_interpolation_csource.h	/^double c1=0, c2=0, c3=0, c4=0, c5=0;$/;"	v
c2	../include/hermite6_interpolation_csource.h	/^double c1=0, c2=0, c3=0, c4=0, c5=0;$/;"	v
c2	../tools/hermite6_interpolation_csource.h	/^double c1=0, c2=0, c3=0, c4=0, c5=0;$/;"	v
c3	../include/hermite6_interpolation_csource.h	/^double c1=0, c2=0, c3=0, c4=0, c5=0;$/;"	v
c3	../tools/hermite6_interpolation_csource.h	/^double c1=0, c2=0, c3=0, c4=0, c5=0;$/;"	v
c4	../include/hermite6_interpolation_csource.h	/^double c1=0, c2=0, c3=0, c4=0, c5=0;$/;"	v
c4	../tools/hermite6_interpolation_csource.h	/^double c1=0, c2=0, c3=0, c4=0, c5=0;$/;"	v
c5	../include/hermite6_interpolation_csource.h	/^double c1=0, c2=0, c3=0, c4=0, c5=0;$/;"	v
c5	../tools/hermite6_interpolation_csource.h	/^double c1=0, c2=0, c3=0, c4=0, c5=0;$/;"	v
c_ad_bi	../include/primordial.h	/^  double c_ad_bi; \/**< ADxBI cross-correlation at pivot scale, from -1 to 1 *\/$/;"	m	struct:primordial
c_ad_cdi	../include/primordial.h	/^  double c_ad_cdi; \/**< ADxCDI cross-correlation at pivot scale, from -1 to 1 *\/$/;"	m	struct:primordial
c_ad_nid	../include/primordial.h	/^  double c_ad_nid; \/**< ADxNID cross-correlation at pivot scale, from -1 to 1 *\/$/;"	m	struct:primordial
c_ad_niv	../include/primordial.h	/^  double c_ad_niv; \/**< ADxNIV cross-correlation at pivot scale, from -1 to 1 *\/$/;"	m	struct:primordial
c_bi_cdi	../include/primordial.h	/^  double c_bi_cdi; \/**< BIxCDI cross-correlation at pivot scale, from -1 to 1 *\/$/;"	m	struct:primordial
c_bi_nid	../include/primordial.h	/^  double c_bi_nid; \/**< BIxNIV cross-correlation at pivot scale, from -1 to 1 *\/$/;"	m	struct:primordial
c_bi_niv	../include/primordial.h	/^  double c_bi_niv; \/**< BIxNIV cross-correlation at pivot scale, from -1 to 1 *\/$/;"	m	struct:primordial
c_cdi_nid	../include/primordial.h	/^  double c_cdi_nid; \/**< CDIxNID cross-correlation at pivot scale, from -1 to 1 *\/$/;"	m	struct:primordial
c_cdi_niv	../include/primordial.h	/^  double c_cdi_niv; \/**< CDIxNIV cross-correlation at pivot scale, from -1 to 1 *\/$/;"	m	struct:primordial
c_gamma_over_c_fld	../include/background.h	/^  double c_gamma_over_c_fld; \/**< ppf parameter defined in eq. (16) of 0808.3125 [astro-ph] *\/$/;"	m	struct:background
c_min	../include/nonlinear.h	/^  double c_min;      \/** for HMcode: minimum concentration in Bullock 2001 mass-concentration relation *\/$/;"	m	struct:nonlinear
c_nid_niv	../include/primordial.h	/^  double c_nid_niv; \/**< NIDxNIV cross-correlation at pivot scale, from -1 to 1 *\/$/;"	m	struct:primordial
calc_C	../tools/evolver_ndf15.c	/^int calc_C(struct jacobian *jac){$/;"	f
call_perturb_sources_at_tau	../cpp/ClassEngine.cc	/^void ClassEngine::call_perturb_sources_at_tau($/;"	f	class:ClassEngine
camb_format	../include/common.h	/^enum file_format {class_format,camb_format};$/;"	e	enum:file_format
cheb	../tools/hyperspherical.c	/^double cheb(double x, int n, const double A[]){$/;"	f
chi	../include/transfer.h	/^  double * chi;                  \/**< chi[index_tau]: value of argument of bessel$/;"	m	struct:transfer_workspace
chi_at_phimin	../include/hyperspherical.h	/^  double * chi_at_phimin;     \/\/ vector x_min[index-l] below which neglect Bessels$/;"	m	struct:HypersphericalInterpolationStructure
cl	../cpp/ClassEngine.hh	/^  double * cl;$/;"	m	class:ClassEngine
cl	../include/spectra.h	/^  double ** cl;   \/**< table of anisotropy spectra for each mode, multipole, pair of initial conditions and types, cl[index_md][(index_l * psp->ic_ic_size[index_md] + index_ic1_ic2) * psp->ct_size + index_ct] *\/$/;"	m	struct:spectra
cl_lens	../include/lensing.h	/^  double * cl_lens; \/**< table of anisotropy spectra for each$/;"	m	struct:lensing
class_alloc	../include/common.h	135;"	d
class_alloc_message	../include/common.h	131;"	d
class_alloc_parallel	../include/common.h	146;"	d
class_at_least_two_of_three	../include/input.h	66;"	d
class_build_error_string	../include/common.h	84;"	d
class_call	../include/common.h	114;"	d
class_call_except	../include/common.h	97;"	d
class_call_message	../include/common.h	93;"	d
class_call_parallel	../include/common.h	118;"	d
class_call_try	../include/common.h	106;"	d
class_calloc	../include/common.h	160;"	d
class_define_index	../include/common.h	237;"	d
class_format	../include/common.h	/^enum file_format {class_format,camb_format};$/;"	e	enum:file_format
class_fprintf_columntitle	../include/common.h	274;"	d
class_fprintf_double	../include/common.h	248;"	d
class_fprintf_double_or_default	../include/common.h	255;"	d
class_fprintf_int	../include/common.h	265;"	d
class_fzero_ridder	input.c	/^int class_fzero_ridder(int (*func)(double x, void *param, double *y, ErrorMsg error_message),$/;"	f
class_main	../cpp/ClassEngine.cc	/^int ClassEngine::class_main($/;"	f	class:ClassEngine
class_none_of_three	../include/input.h	71;"	d
class_open	../include/common.h	228;"	d
class_precision_parameter	../include/precision_macros.h	10;"	d
class_precision_parameter	../include/precision_macros.h	14;"	d
class_precision_parameter	../include/precision_macros.h	6;"	d
class_precision_parameter	../include/precisions.h	496;"	d
class_protect_fprintf	../tools/common.c	/^void class_protect_fprintf(FILE* stream, char* tpl,...) {$/;"	f
class_protect_memcpy	../tools/common.c	/^void* class_protect_memcpy(void* dest, void* from, size_t sz) {$/;"	f
class_protect_sprintf	../tools/common.c	/^void class_protect_sprintf(char* dest, char* tpl,...) {$/;"	f
class_read_double	../include/input.h	20;"	d
class_read_double_one_of_two	../include/input.h	48;"	d
class_read_int	../include/input.h	30;"	d
class_read_list_of_doubles	../include/input.h	107;"	d
class_read_list_of_doubles_or_default	../include/input.h	75;"	d
class_read_list_of_integers	../include/input.h	120;"	d
class_read_list_of_integers_or_default	../include/input.h	91;"	d
class_read_string	../include/input.h	39;"	d
class_realloc	../include/common.h	171;"	d
class_stop	../include/common.h	219;"	d
class_store_columntitle	../include/common.h	284;"	d
class_store_double	../include/common.h	294;"	d
class_store_double_or_default	../include/common.h	302;"	d
class_string_parameter	../include/precision_macros.h	20;"	d
class_string_parameter	../include/precision_macros.h	25;"	d
class_string_parameter	../include/precision_macros.h	29;"	d
class_string_parameter	../include/precisions.h	497;"	d
class_test	../include/common.h	200;"	d
class_test_except	../include/common.h	192;"	d
class_test_message	../include/common.h	183;"	d
class_test_parallel	../include/common.h	207;"	d
class_type_parameter	../include/precision_macros.h	35;"	d
class_type_parameter	../include/precision_macros.h	39;"	d
class_type_parameter	../include/precision_macros.h	43;"	d
class_type_parameter	../include/precisions.h	498;"	d
class_version	input.c	/^int class_version($/;"	f
cleanup_generic_integrator	../tools/dei_rkck.c	/^int cleanup_generic_integrator(struct generic_integrator_workspace * pgi){$/;"	f
closed	../include/background.h	/^enum spatial_curvature {flat,open,closed};$/;"	e	enum:spatial_curvature
cltype	../cpp/Engine.hh	/^  enum cltype {TT=0,EE,TE,BB,PP,TP,EP}; \/\/P stands for phi (lensing potential)$/;"	g	class:Engine
cnzmax	../include/evolver_ndf15.h	/^	int cnzmax;$/;"	m	struct:jacobian
coef1	../tools/hyperspherical.c	/^double coef1(double z){$/;"	f
coef2	../tools/hyperspherical.c	/^double coef2(double z){$/;"	f
coef3	../tools/hyperspherical.c	/^double coef3(double z){$/;"	f
coef4	../tools/hyperspherical.c	/^double coef4(double z){$/;"	f
col_group	../include/evolver_ndf15.h	/^	int *col_group; \/* Column grouping. Groups go from 0 to max_group*\/$/;"	m	struct:jacobian
col_wi	../include/evolver_ndf15.h	/^	int *col_wi; \/* Workarray for column grouping*\/$/;"	m	struct:jacobian
column_grouping	../tools/sparse.c	/^int column_grouping(sp_mat *G, int *col_g, int *filled){$/;"	f
command	../include/primordial.h	/^  char*  command;  \/**< string with the command for calling 'external_Pk' *\/$/;"	m	struct:primordial
compare_doubles	input.c	/^int compare_doubles(const void *a,const void *b) {$/;"	f
compare_integers	input.c	/^int compare_integers (const void * elem1, const void * elem2) {$/;"	f
compromise_CLASS	../include/perturbations.h	/^enum tca_method {first_order_MB,first_order_CAMB,first_order_CLASS,second_order_CRS,second_order_CLASS,compromise_CLASS};$/;"	e	enum:tca_method
computation_stage	../include/input.h	/^enum computation_stage {cs_background, cs_thermodynamics, cs_perturbations,$/;"	g
computeCls	../cpp/ClassEngine.cc	/^int ClassEngine::computeCls(){$/;"	f	class:ClassEngine
compute_Hermite	../tools/quadrature.c	/^int compute_Hermite(double *x, double *w, int N, int alpha, double *b, double *c){$/;"	f
compute_Laguerre	../tools/quadrature.c	/^int compute_Laguerre(double *x, double *w, int N, double alpha, double *b, double *c,int totalweight){$/;"	f
compute_cb2_derivatives	../include/thermodynamics.h	/^  short compute_cb2_derivatives; \/**< do we want to include in computation derivatives of baryon sound speed? *\/$/;"	m	struct:thermo
compute_damping_scale	../include/thermodynamics.h	/^  short compute_damping_scale; \/**< do we want to compute the simplest analytic approximation to the photon damping (or diffusion) scale? *\/$/;"	m	struct:thermo
conformal	../include/primordial.h	/^  conformal,$/;"	e	enum:time_definition
conformal_age	../include/background.h	/^  double conformal_age; \/**< conformal age in Mpc *\/$/;"	m	struct:background
cosine_integral	../tools/trigonometric_integrals.c	/^int cosine_integral($/;"	f
cotK	../include/hermite3_interpolation_csource.h	/^double *cotK = pHIS->cotK;$/;"	v
cotK	../include/hermite4_interpolation_csource.h	/^double *cotK = pHIS->cotK;$/;"	v
cotK	../include/hermite6_interpolation_csource.h	/^double beta, beta2, *xvec, *sinK, *cotK;$/;"	v
cotK	../include/hyperspherical.h	/^  double *cotK;          \/\/Vector of cot_K(xvec)$/;"	m	struct:HypersphericalInterpolationStructure
cotK	../tools/hermite3_interpolation_csource.h	/^double *cotK = pHIS->cotK;$/;"	v
cotK	../tools/hermite4_interpolation_csource.h	/^double *cotK = pHIS->cotK;$/;"	v
cotK	../tools/hermite6_interpolation_csource.h	/^double beta, beta2, *xvec, *sinK, *cotK;$/;"	v
cotKgen	../include/transfer.h	/^  double * cotKgen;              \/**< cotKgen[index_tau]: useful trigonometric function *\/$/;"	m	struct:transfer_workspace
cotKm	../include/hermite3_interpolation_csource.h	/^double cotKm=0,sinKm=0;$/;"	v
cotKm	../include/hermite4_interpolation_csource.h	/^double cotKm=0,cotKp=0,sinKm=0,sinKp=0;$/;"	v
cotKm	../include/hermite6_interpolation_csource.h	/^double cotKm=0,cotKp=0,sinKm=0,sinKp=0, sinKm2, sinKp2;$/;"	v
cotKm	../tools/hermite3_interpolation_csource.h	/^double cotKm=0,sinKm=0;$/;"	v
cotKm	../tools/hermite4_interpolation_csource.h	/^double cotKm=0,cotKp=0,sinKm=0,sinKp=0;$/;"	v
cotKm	../tools/hermite6_interpolation_csource.h	/^double cotKm=0,cotKp=0,sinKm=0,sinKp=0, sinKm2, sinKp2;$/;"	v
cotKp	../include/hermite3_interpolation_csource.h	/^double cotKp=0,sinKp=0;$/;"	v
cotKp	../include/hermite4_interpolation_csource.h	/^double cotKm=0,cotKp=0,sinKm=0,sinKp=0;$/;"	v
cotKp	../include/hermite6_interpolation_csource.h	/^double cotKm=0,cotKp=0,sinKm=0,sinKp=0, sinKm2, sinKp2;$/;"	v
cotKp	../tools/hermite3_interpolation_csource.h	/^double cotKp=0,sinKp=0;$/;"	v
cotKp	../tools/hermite4_interpolation_csource.h	/^double cotKm=0,cotKp=0,sinKm=0,sinKp=0;$/;"	v
cotKp	../tools/hermite6_interpolation_csource.h	/^double cotKm=0,cotKp=0,sinKm=0,sinKp=0, sinKm2, sinKp2;$/;"	v
cs2_fld	../include/background.h	/^  double cs2_fld; \/**< \\f$ c^2_{s~DE} \\f$: sound speed of the fluid$/;"	m	struct:background
cs_background	../include/input.h	/^enum computation_stage {cs_background, cs_thermodynamics, cs_perturbations,$/;"	e	enum:computation_stage
cs_nonlinear	../include/input.h	/^                        cs_primordial, cs_nonlinear, cs_transfer, cs_spectra};$/;"	e	enum:computation_stage
cs_perturbations	../include/input.h	/^enum computation_stage {cs_background, cs_thermodynamics, cs_perturbations,$/;"	e	enum:computation_stage
cs_primordial	../include/input.h	/^                        cs_primordial, cs_nonlinear, cs_transfer, cs_spectra};$/;"	e	enum:computation_stage
cs_spectra	../include/input.h	/^                        cs_primordial, cs_nonlinear, cs_transfer, cs_spectra};$/;"	e	enum:computation_stage
cs_thermodynamics	../include/input.h	/^enum computation_stage {cs_background, cs_thermodynamics, cs_perturbations,$/;"	e	enum:computation_stage
cs_transfer	../include/input.h	/^                        cs_primordial, cs_nonlinear, cs_transfer, cs_spectra};$/;"	e	enum:computation_stage
cscKgen	../include/transfer.h	/^  double * cscKgen;              \/**< cscKgen[index_tau]: useful trigonometric function *\/$/;"	m	struct:transfer_workspace
csz	../include/growTable.h	/^  long csz;     \/**< real size *\/$/;"	m	struct:__anon1
ct_size	../include/spectra.h	/^  int ct_size; \/**< number of \\f$ C_l \\f$ types requested *\/$/;"	m	struct:spectra
cubature_order_eleven	../tools/quadrature.c	/^int cubature_order_eleven($/;"	f
current_border_idx	../include/hermite3_interpolation_csource.h	/^int j, nx, current_border_idx=0;$/;"	v
current_border_idx	../include/hermite4_interpolation_csource.h	/^int j, nx, current_border_idx=0;$/;"	v
current_border_idx	../include/hermite6_interpolation_csource.h	/^int K, l, j, nx, current_border_idx=0;$/;"	v
current_border_idx	../tools/hermite3_interpolation_csource.h	/^int j, nx, current_border_idx=0;$/;"	v
current_border_idx	../tools/hermite4_interpolation_csource.h	/^int j, nx, current_border_idx=0;$/;"	v
current_border_idx	../tools/hermite6_interpolation_csource.h	/^int K, l, j, nx, current_border_idx=0;$/;"	v
custom1	../include/primordial.h	/^  double custom1;  \/**< one parameter of the primordial computed in 'external_Pk' *\/$/;"	m	struct:primordial
custom10	../include/primordial.h	/^  double custom10; \/**< one parameter of the primordial computed in 'external_Pk' *\/$/;"	m	struct:primordial
custom2	../include/primordial.h	/^  double custom2;  \/**< one parameter of the primordial computed in 'external_Pk' *\/$/;"	m	struct:primordial
custom3	../include/primordial.h	/^  double custom3;  \/**< one parameter of the primordial computed in 'external_Pk' *\/$/;"	m	struct:primordial
custom4	../include/primordial.h	/^  double custom4;  \/**< one parameter of the primordial computed in 'external_Pk' *\/$/;"	m	struct:primordial
custom5	../include/primordial.h	/^  double custom5;  \/**< one parameter of the primordial computed in 'external_Pk' *\/$/;"	m	struct:primordial
custom6	../include/primordial.h	/^  double custom6;  \/**< one parameter of the primordial computed in 'external_Pk' *\/$/;"	m	struct:primordial
custom7	../include/primordial.h	/^  double custom7;  \/**< one parameter of the primordial computed in 'external_Pk' *\/$/;"	m	struct:primordial
custom8	../include/primordial.h	/^  double custom8;  \/**< one parameter of the primordial computed in 'external_Pk' *\/$/;"	m	struct:primordial
custom9	../include/primordial.h	/^  double custom9;  \/**< one parameter of the primordial computed in 'external_Pk' *\/$/;"	m	struct:primordial
d2background_dtau2_table	../include/background.h	/^  double * d2background_dtau2_table; \/**< table d2background_dtau2_table[index_tau*pba->bg_size+pba->index_bg] with values of \\f$ d^2 b_i \/ d\\tau^2 \\f$ (conformal time) *\/$/;"	m	struct:background
d2f0	../include/background.h	/^  double *d2f0;$/;"	m	struct:background_parameters_for_distributions
d2tau_dz2_table	../include/background.h	/^  double * d2tau_dz2_table; \/**< vector d2tau_dz2_table[index_tau] with values of \\f$ d^2 \\tau \/ dz^2 \\f$ (conformal time) *\/$/;"	m	struct:background
d2thermodynamics_dz2_table	../include/thermodynamics.h	/^  double * d2thermodynamics_dz2_table; \/**< table d2thermodynamics_dz2_table[index_z*pth->tt_size+pba->index_th] with values of \\f$ d^2 t_i \/ dz^2 \\f$ (array of size th_size*tt_size) *\/$/;"	m	struct:thermo
d2ym	../include/hermite3_interpolation_csource.h	/^double d2ym = 0, d3yp=0;$/;"	v
d2ym	../include/hermite4_interpolation_csource.h	/^double d2ym = 0, d2yp=0;$/;"	v
d2ym	../include/hermite6_interpolation_csource.h	/^double ym=0, yp=0, dym=0, dyp=0, d2ym=0, d2yp=0, x, z, z2, z3, z4, z5;$/;"	v
d2ym	../tools/hermite3_interpolation_csource.h	/^double d2ym = 0, d3yp=0;$/;"	v
d2ym	../tools/hermite4_interpolation_csource.h	/^double d2ym = 0, d2yp=0;$/;"	v
d2ym	../tools/hermite6_interpolation_csource.h	/^double ym=0, yp=0, dym=0, dyp=0, d2ym=0, d2yp=0, x, z, z2, z3, z4, z5;$/;"	v
d2yp	../include/hermite3_interpolation_csource.h	/^double d2yp=0;$/;"	v
d2yp	../include/hermite4_interpolation_csource.h	/^double d2ym = 0, d2yp=0;$/;"	v
d2yp	../include/hermite6_interpolation_csource.h	/^double ym=0, yp=0, dym=0, dyp=0, d2ym=0, d2yp=0, x, z, z2, z3, z4, z5;$/;"	v
d2yp	../tools/hermite3_interpolation_csource.h	/^double d2yp=0;$/;"	v
d2yp	../tools/hermite4_interpolation_csource.h	/^double d2ym = 0, d2yp=0;$/;"	v
d2yp	../tools/hermite6_interpolation_csource.h	/^double ym=0, yp=0, dym=0, dyp=0, d2ym=0, d2yp=0, x, z, z2, z3, z4, z5;$/;"	v
d3ym	../include/hermite4_interpolation_csource.h	/^double d3ym=0, d3yp=0;$/;"	v
d3ym	../include/hermite6_interpolation_csource.h	/^double d3ym = 0, d3yp=0;$/;"	v
d3ym	../tools/hermite4_interpolation_csource.h	/^double d3ym=0, d3yp=0;$/;"	v
d3ym	../tools/hermite6_interpolation_csource.h	/^double d3ym = 0, d3yp=0;$/;"	v
d3yp	../include/hermite3_interpolation_csource.h	/^double d2ym = 0, d3yp=0;$/;"	v
d3yp	../include/hermite4_interpolation_csource.h	/^double d3ym=0, d3yp=0;$/;"	v
d3yp	../include/hermite6_interpolation_csource.h	/^double d3ym = 0, d3yp=0;$/;"	v
d3yp	../tools/hermite3_interpolation_csource.h	/^double d2ym = 0, d3yp=0;$/;"	v
d3yp	../tools/hermite4_interpolation_csource.h	/^double d3ym=0, d3yp=0;$/;"	v
d3yp	../tools/hermite6_interpolation_csource.h	/^double d3ym = 0, d3yp=0;$/;"	v
d4ym	../include/hermite6_interpolation_csource.h	/^double d4ym=0, d4yp=0;$/;"	v
d4ym	../tools/hermite6_interpolation_csource.h	/^double d4ym=0, d4yp=0;$/;"	v
d4yp	../include/hermite6_interpolation_csource.h	/^double d4ym=0, d4yp=0;$/;"	v
d4yp	../tools/hermite6_interpolation_csource.h	/^double d4ym=0, d4yp=0;$/;"	v
dH	../include/primordial.h	/^  double dH;$/;"	m	struct:primordial_inflation_parameters_and_workspace
dPhi_l	../include/hermite3_interpolation_csource.h	/^double *Phi_l, *dPhi_l;$/;"	v
dPhi_l	../include/hermite4_interpolation_csource.h	/^double *Phi_l, *dPhi_l;$/;"	v
dPhi_l	../include/hermite6_interpolation_csource.h	/^double *Phi_l, *dPhi_l;$/;"	v
dPhi_l	../tools/hermite3_interpolation_csource.h	/^double *Phi_l, *dPhi_l;$/;"	v
dPhi_l	../tools/hermite4_interpolation_csource.h	/^double *Phi_l, *dPhi_l;$/;"	v
dPhi_l	../tools/hermite6_interpolation_csource.h	/^double *Phi_l, *dPhi_l;$/;"	v
dV	../include/primordial.h	/^  double dV;$/;"	m	struct:primordial_inflation_parameters_and_workspace
dV_e_scf	background.c	/^double dV_e_scf(struct background *pba,$/;"	f
dV_p_scf	background.c	/^double dV_p_scf($/;"	f
dV_scf	background.c	/^double dV_scf($/;"	f
d_size	../include/spectra.h	/^  int d_size;      \/**< number of bins for which density Cl's are computed *\/$/;"	m	struct:spectra
da_rec	../include/thermodynamics.h	/^  double da_rec;  \/**< physical angular diameter distance to recombination *\/$/;"	m	struct:thermo
da_star	../include/thermodynamics.h	/^  double da_star;  \/**< physical angular diameter distance to z_star *\/$/;"	m	struct:thermo
dark_energy_correction	../include/nonlinear.h	/^  double dark_energy_correction; \/** this is the ratio [g_wcdm(z_infinity)\/g_lcdm(z_infinity)]^1.5$/;"	m	struct:nonlinear_workspace
dc_Mead	nonlinear_hmcode.c	/^double dc_Mead(double a, double Om_m, double f_nu, double g, double G) {$/;"	f
ddH	../include/primordial.h	/^  double ddH;$/;"	m	struct:primordial_inflation_parameters_and_workspace
ddV	../include/primordial.h	/^  double ddV;$/;"	m	struct:primordial_inflation_parameters_and_workspace
ddV_e_scf	background.c	/^double ddV_e_scf(struct background *pba,$/;"	f
ddV_p_scf	background.c	/^double ddV_p_scf($/;"	f
ddV_scf	background.c	/^double ddV_scf($/;"	f
ddcl	../include/spectra.h	/^  double ** ddcl; \/**< second derivatives of previous table with respect to l, in view of spline interpolation *\/$/;"	m	struct:spectra
ddcl_lens	../include/lensing.h	/^  double * ddcl_lens; \/**< second derivatives for interpolation *\/$/;"	m	struct:lensing
dddH	../include/primordial.h	/^  double dddH;$/;"	m	struct:primordial_inflation_parameters_and_workspace
ddlate_sources	../include/perturbations.h	/^  double *** ddlate_sources; \/**< Pointer towards the splined source interpolation table with second derivatives with respect to time$/;"	m	struct:perturbs
ddln_pk_ic_l	../include/nonlinear.h	/^  double ** ddln_pk_ic_l; \/**< second derivative of above array with respect to log(tau), for spline interpolation. So:$/;"	m	struct:nonlinear
ddln_pk_l	../include/nonlinear.h	/^  double ** ddln_pk_l; \/**< second derivative of above array with respect to log(tau), for spline interpolation. *\/$/;"	m	struct:nonlinear
ddln_pk_nl	../include/nonlinear.h	/^  double ** ddln_pk_nl; \/**< second derivative of above array with respect to log(tau), for spline interpolation. *\/$/;"	m	struct:nonlinear
ddlnpk	../include/primordial.h	/^  double ** ddlnpk; \/**< second derivative of above array, for spline interpolation. So:$/;"	m	struct:primordial
ddstab	../include/nonlinear.h	/^  double * ddstab; \/** Splined sigma *\/$/;"	m	struct:nonlinear_workspace
decay	../include/thermodynamics.h	/^  double decay; \/**< parameter describing CDM decay (f\/tau, see e.g. 1109.6322)*\/$/;"	m	struct:recombination
decay	../include/thermodynamics.h	/^  double decay; \/**< parameter describing CDM decay (f\/tau, see e.g. 1109.6322)*\/$/;"	m	struct:thermo
deg_ncdm	../include/background.h	/^  double * deg_ncdm, deg_ncdm_default;   \/**< vector of degeneracy parameters in factor$/;"	m	struct:background
deg_ncdm_default	../include/background.h	/^  double * deg_ncdm, deg_ncdm_default;   \/**< vector of degeneracy parameters in factor$/;"	m	struct:background
del	../include/evolver_ndf15.h	/^	double *del;$/;"	m	struct:numjac_workspace
delta_bc_squared	../include/common.h	/^  delta_bc_squared, \/**< delta_bc includes contribution of baryons and cdm only to (delta rho) and to rho *\/$/;"	e	enum:pk_def
delta_cb	../include/perturbations.h	/^  double delta_cb;       \/**< relative density perturbation of only cdm and baryon *\/$/;"	m	struct:perturb_workspace
delta_m	../include/perturbations.h	/^  double delta_m;	\/**< relative density perturbation of all non-relativistic species *\/$/;"	m	struct:perturb_workspace
delta_m_squared	../include/common.h	/^  delta_m_squared, \/**< normal definition (delta_m includes all non-relativistic species at late times) *\/$/;"	e	enum:pk_def
delta_ncdm	../include/perturbations.h	/^  double * delta_ncdm;	\/**< relative density perturbation of each ncdm species *\/$/;"	m	struct:perturb_workspace
delta_p	../include/perturbations.h	/^  double delta_p;		    \/**< total pressure perturbation (gives Tii) *\/$/;"	m	struct:perturb_workspace
delta_p_fld	../include/perturbations.h	/^  double delta_p_fld;          \/**< pressure perturbation of fluid, very non-trivial in PPF scheme *\/$/;"	m	struct:perturb_workspace
delta_rho	../include/perturbations.h	/^  double delta_rho;		    \/**< total density perturbation (gives delta Too) *\/$/;"	m	struct:perturb_workspace
delta_rho_fld	../include/perturbations.h	/^  double delta_rho_fld;        \/**< density perturbation of fluid, not so trivial in PPF scheme *\/$/;"	m	struct:perturb_workspace
delta_tot_from_poisson_squared	../include/common.h	/^  delta_tot_from_poisson_squared \/**< use delta_tot inferred from gravitational potential through Poisson equation *\/$/;"	e	enum:pk_def
delta_tot_squared	../include/common.h	/^  delta_tot_squared, \/**< delta_tot includes all species contributions to (delta rho), and only non-relativistic contributions to rho *\/$/;"	e	enum:pk_def
delta_x	../include/hyperspherical.h	/^  double delta_x;         \/\/x-spacing. (xvec is uniformly spaced)$/;"	m	struct:HypersphericalInterpolationStructure
deltax	../include/hermite3_interpolation_csource.h	/^double xmin, xmax, deltax;$/;"	v
deltax	../include/hermite4_interpolation_csource.h	/^double xmin, xmax, deltax;$/;"	v
deltax	../include/hermite6_interpolation_csource.h	/^double xmin, xmax, deltax, deltax2, lxlp1;$/;"	v
deltax	../tools/hermite3_interpolation_csource.h	/^double xmin, xmax, deltax;$/;"	v
deltax	../tools/hermite4_interpolation_csource.h	/^double xmin, xmax, deltax;$/;"	v
deltax	../tools/hermite6_interpolation_csource.h	/^double xmin, xmax, deltax, deltax2, lxlp1;$/;"	v
deltax2	../include/hermite6_interpolation_csource.h	/^double xmin, xmax, deltax, deltax2, lxlp1;$/;"	v
deltax2	../tools/hermite6_interpolation_csource.h	/^double xmin, xmax, deltax, deltax2, lxlp1;$/;"	v
dfdy	../include/evolver_ndf15.h	/^	double **dfdy;$/;"	m	struct:jacobian
dfsr	../tools/sparse.c	/^void dfsr(int j, sp_mat *G, int *top, int *xik, int *pinv){$/;"	f
dirac	../include/perturbations.h	/^enum selection_type {gaussian,tophat,dirac};$/;"	e	enum:selection_type
dlnf0_dlnq_ncdm	../include/background.h	/^  double ** dlnf0_dlnq_ncdm; \/**< Pointers to vectors of logarithmic derivatives of p-s-d *\/$/;"	m	struct:background
dofree	../cpp/ClassEngine.hh	/^  bool dofree;$/;"	m	class:ClassEngine
dphi	../include/hyperspherical.h	/^  double *dphi;       \/\/Same as phivec, but containing derivatives.$/;"	m	struct:HypersphericalInterpolationStructure
dphisign	../include/hermite3_interpolation_csource.h	/^int phisign = 1, dphisign = 1;$/;"	v
dphisign	../include/hermite4_interpolation_csource.h	/^int phisign = 1, dphisign = 1;$/;"	v
dphisign	../include/hermite6_interpolation_csource.h	/^int phisign = 1, dphisign = 1;$/;"	v
dphisign	../tools/hermite3_interpolation_csource.h	/^int phisign = 1, dphisign = 1;$/;"	v
dphisign	../tools/hermite4_interpolation_csource.h	/^int phisign = 1, dphisign = 1;$/;"	v
dphisign	../tools/hermite6_interpolation_csource.h	/^int phisign = 1, dphisign = 1;$/;"	v
ds_d	../include/thermodynamics.h	/^  double ds_d;    \/**< physical sound horizon at baryon drag *\/$/;"	m	struct:thermo
ds_rec	../include/thermodynamics.h	/^  double ds_rec;  \/**< physical sound horizon at recombination *\/$/;"	m	struct:thermo
ds_star	../include/thermodynamics.h	/^  double ds_star; \/**< physical sound horizon at z_star *\/$/;"	m	struct:thermo
dsign	../include/dei_rkck.h	84;"	d
dy	../include/perturbations.h	/^  double * dy;            \/**< time-derivative of the same vector *\/$/;"	m	struct:perturb_vector
dydx	../include/dei_rkck.h	/^  double * dydx;$/;"	m	struct:generic_integrator_workspace
dym	../include/hermite3_interpolation_csource.h	/^double dym=0;$/;"	v
dym	../include/hermite4_interpolation_csource.h	/^double ym=0, yp=0, dym=0, dyp=0, x;$/;"	v
dym	../include/hermite6_interpolation_csource.h	/^double ym=0, yp=0, dym=0, dyp=0, d2ym=0, d2yp=0, x, z, z2, z3, z4, z5;$/;"	v
dym	../tools/hermite3_interpolation_csource.h	/^double dym=0;$/;"	v
dym	../tools/hermite4_interpolation_csource.h	/^double ym=0, yp=0, dym=0, dyp=0, x;$/;"	v
dym	../tools/hermite6_interpolation_csource.h	/^double ym=0, yp=0, dym=0, dyp=0, d2ym=0, d2yp=0, x, z, z2, z3, z4, z5;$/;"	v
dyp	../include/hermite3_interpolation_csource.h	/^double yp=0, dyp=0, x;$/;"	v
dyp	../include/hermite4_interpolation_csource.h	/^double ym=0, yp=0, dym=0, dyp=0, x;$/;"	v
dyp	../include/hermite6_interpolation_csource.h	/^double ym=0, yp=0, dym=0, dyp=0, d2ym=0, d2yp=0, x, z, z2, z3, z4, z5;$/;"	v
dyp	../tools/hermite3_interpolation_csource.h	/^double yp=0, dyp=0, x;$/;"	v
dyp	../tools/hermite4_interpolation_csource.h	/^double ym=0, yp=0, dym=0, dyp=0, x;$/;"	v
dyp	../tools/hermite6_interpolation_csource.h	/^double ym=0, yp=0, dym=0, dyp=0, d2ym=0, d2yp=0, x, z, z2, z3, z4, z5;$/;"	v
eisw_lisw_split_z	../include/perturbations.h	/^  double eisw_lisw_split_z; \/**< at which redshift do we define the cut between eisw and lisw ?*\/$/;"	m	struct:perturbs
equation_of_state	../include/background.h	/^enum equation_of_state {CLP,EDE};$/;"	g
eqvec	../tools/evolver_ndf15.c	/^void eqvec(double *datavec,double *emptyvec, int n){$/;"	f
err	../include/quadrature.h	/^  double err;		\/* Estimated error *\/$/;"	m	struct:adaptive_integration_tree_node
error_message	../include/background.h	/^  ErrorMsg error_message; \/**< zone for writing error messages *\/$/;"	m	struct:background
error_message	../include/common.h	/^  ErrorMsg error_message;  \/**< zone for writing error messages *\/$/;"	m	struct:precision
error_message	../include/dei_rkck.h	/^  ErrorMsg error_message;$/;"	m	struct:generic_integrator_workspace
error_message	../include/growTable.h	/^  ErrorMsg error_message; \/**< error message slot *\/$/;"	m	struct:__anon1
error_message	../include/lensing.h	/^  ErrorMsg error_message; \/**< zone for writing error messages *\/$/;"	m	struct:lensing
error_message	../include/nonlinear.h	/^  ErrorMsg error_message; 	\/**< zone for writing error messages *\/$/;"	m	struct:nonlinear
error_message	../include/output.h	/^  ErrorMsg error_message; \/**< zone for writing error messages *\/$/;"	m	struct:output
error_message	../include/perturbations.h	/^  ErrorMsg error_message; \/**< zone for writing error messages *\/$/;"	m	struct:perturbs
error_message	../include/primordial.h	/^  ErrorMsg error_message; \/**< zone for writing error messages *\/$/;"	m	struct:primordial
error_message	../include/spectra.h	/^  ErrorMsg error_message; \/**< zone for writing error messages *\/$/;"	m	struct:spectra
error_message	../include/thermodynamics.h	/^  ErrorMsg error_message; \/**< zone for writing error messages *\/$/;"	m	struct:thermo
error_message	../include/transfer.h	/^  ErrorMsg error_message; \/**< zone for writing error messages *\/$/;"	m	struct:transfers
eta_0	../include/nonlinear.h	/^  double eta_0;      \/** for HMcode: halo bloating parameter *\/$/;"	m	struct:nonlinear
evolve_tensor_ncdm	../include/perturbations.h	/^  short evolve_tensor_ncdm;             \/**< will we evolve ncdm tensor perturbations (if we have ncdm species and we use the exact method) ? *\/$/;"	m	struct:perturbs
evolve_tensor_ur	../include/perturbations.h	/^  short evolve_tensor_ur;             \/**< will we evolve ur tensor perturbations (either because we have ur species, or we have ncdm species with massless approximation) ? *\/$/;"	m	struct:perturbs
evolver_ndf15	../tools/evolver_ndf15.c	/^int evolver_ndf15($/;"	f
evolver_rk	../tools/evolver_rkck.c	/^int evolver_rk(int (*derivs)(double x,$/;"	f
evolver_type	../include/common.h	/^enum evolver_type {$/;"	g
external_Pk	../include/primordial.h	/^  external_Pk$/;"	e	enum:primordial_spectrum_type
extrap_hmcode	../include/nonlinear.h	/^enum source_extrapolation {extrap_zero,extrap_only_max,extrap_only_max_units,extrap_max_scaled,extrap_hmcode,extrap_user_defined};$/;"	e	enum:source_extrapolation
extrap_max_scaled	../include/nonlinear.h	/^enum source_extrapolation {extrap_zero,extrap_only_max,extrap_only_max_units,extrap_max_scaled,extrap_hmcode,extrap_user_defined};$/;"	e	enum:source_extrapolation
extrap_only_max	../include/nonlinear.h	/^enum source_extrapolation {extrap_zero,extrap_only_max,extrap_only_max_units,extrap_max_scaled,extrap_hmcode,extrap_user_defined};$/;"	e	enum:source_extrapolation
extrap_only_max_units	../include/nonlinear.h	/^enum source_extrapolation {extrap_zero,extrap_only_max,extrap_only_max_units,extrap_max_scaled,extrap_hmcode,extrap_user_defined};$/;"	e	enum:source_extrapolation
extrap_user_defined	../include/nonlinear.h	/^enum source_extrapolation {extrap_zero,extrap_only_max,extrap_only_max_units,extrap_max_scaled,extrap_hmcode,extrap_user_defined};$/;"	e	enum:source_extrapolation
extrap_zero	../include/nonlinear.h	/^enum source_extrapolation {extrap_zero,extrap_only_max,extrap_only_max_units,extrap_max_scaled,extrap_hmcode,extrap_user_defined};$/;"	e	enum:source_extrapolation
extrapolation_method	../include/nonlinear.h	/^  enum source_extrapolation extrapolation_method; \/**< method for analytical extrapolation of sources beyond pre-computed range *\/$/;"	m	struct:nonlinear	typeref:enum:nonlinear::source_extrapolation
f0	../include/background.h	/^  double *f0;$/;"	m	struct:background_parameters_for_distributions
f1	../include/thermodynamics.h	46;"	d
f2	../include/thermodynamics.h	47;"	d
fHe	../include/thermodynamics.h	/^  double fHe; \/**< defined as in RECFAST *\/$/;"	m	struct:recombination
f_bi	../include/primordial.h	/^  double f_bi;  \/**< baryon isocurvature (BI) entropy-to-curvature ratio \\f$ S_{bi}\/R \\f$*\/$/;"	m	struct:primordial
f_cdi	../include/primordial.h	/^  double f_cdi;  \/**< CDM isocurvature (CDI) entropy-to-curvature ratio \\f$ S_{cdi}\/R \\f$*\/$/;"	m	struct:primordial
f_nid	../include/primordial.h	/^  double f_nid;  \/**< neutrino density isocurvature (NID) entropy-to-curvature ratio \\f$ S_{nid}\/R \\f$*\/$/;"	m	struct:primordial
f_niv	../include/primordial.h	/^  double f_niv;  \/**< neutrino velocity isocurvature (NIV) entropy-to-curvature ratio \\f$ S_{niv}\/R \\f$*\/$/;"	m	struct:primordial
factor_ncdm	../include/background.h	/^  double * factor_ncdm; \/**< List of normalization factors for calculating energy density etc.*\/$/;"	m	struct:background
fc	../cpp/ClassEngine.hh	/^  struct file_content fc;$/;"	m	class:ClassEngine	typeref:struct:ClassEngine::file_content
fc	../include/input.h	/^  struct file_content fc;$/;"	m	struct:fzerofun_workspace	typeref:struct:fzerofun_workspace::file_content
feedback	../include/nonlinear.h	/^  enum hmcode_baryonic_feedback_model feedback; \/** to choose between different baryonic feedback models$/;"	m	struct:nonlinear	typeref:enum:nonlinear::hmcode_baryonic_feedback_model
ffdel	../include/evolver_ndf15.h	/^	double * ffdel;$/;"	m	struct:numjac_workspace
file_content	../include/parser.h	/^struct file_content {$/;"	s
file_exists	input.c	/^int file_exists(const char *fname){$/;"	f
file_format	../include/common.h	/^enum file_format {class_format,camb_format};$/;"	g
filename	../include/parser.h	/^  char * filename;$/;"	m	struct:file_content
first_order_CAMB	../include/perturbations.h	/^enum tca_method {first_order_MB,first_order_CAMB,first_order_CLASS,second_order_CRS,second_order_CLASS,compromise_CLASS};$/;"	e	enum:tca_method
first_order_CLASS	../include/perturbations.h	/^enum tca_method {first_order_MB,first_order_CAMB,first_order_CLASS,second_order_CRS,second_order_CLASS,compromise_CLASS};$/;"	e	enum:tca_method
first_order_MB	../include/perturbations.h	/^enum tca_method {first_order_MB,first_order_CAMB,first_order_CLASS,second_order_CRS,second_order_CLASS,compromise_CLASS};$/;"	e	enum:tca_method
flat	../include/background.h	/^enum spatial_curvature {flat,open,closed};$/;"	e	enum:spatial_curvature
fluid_equation_of_state	../include/background.h	/^  enum equation_of_state fluid_equation_of_state; \/**< parametrisation scheme for fluid equation of state *\/$/;"	m	struct:background	typeref:enum:background::equation_of_state
forward	../include/primordial.h	/^  forward$/;"	e	enum:integration_direction
freeStructs	../cpp/ClassEngine.cc	/^ClassEngine::freeStructs(){$/;"	f	class:ClassEngine
freeze	../include/growTable.h	/^  int freeze;   \/**< if set to _TRUE_ no data can be added *\/$/;"	m	struct:__anon1
fu	../include/thermodynamics.h	/^  double fu; \/**< defined as in RECFAST *\/$/;"	m	struct:recombination
fzero_Newton	../tools/evolver_ndf15.c	/^int fzero_Newton(int (*func)(double *x,$/;"	f
fzero_ridder	../tools/hyperspherical.c	/^int fzero_ridder(double (*func)(double, void *),$/;"	f
fzerofun_workspace	../include/input.h	/^struct fzerofun_workspace {$/;"	s
gauge	../include/perturbations.h	/^  enum possible_gauges gauge; \/**< gauge in which to perform this calculation *\/$/;"	m	struct:perturbs	typeref:enum:perturbs::possible_gauges
gaussian	../include/perturbations.h	/^enum selection_type {gaussian,tophat,dirac};$/;"	e	enum:selection_type
generic_integrator	../tools/dei_rkck.c	/^int generic_integrator(int (*derivs)(double x, double y[], double yprime[], void * parameters_and_workspace, ErrorMsg error_message),$/;"	f
generic_integrator_workspace	../include/dei_rkck.h	/^struct generic_integrator_workspace$/;"	s
getCl	../cpp/ClassEngine.cc	/^ClassEngine::getCl(Engine::cltype t,const long &l){$/;"	f	class:ClassEngine
getCls	../cpp/ClassEngine.cc	/^ClassEngine::getCls(const std::vector<unsigned>& lvec, \/\/input $/;"	f	class:ClassEngine
getLensing	../cpp/ClassEngine.cc	/^ClassEngine::getLensing(const std::vector<unsigned>& lvec, \/\/input $/;"	f	class:ClassEngine
getTauReio	../cpp/ClassEngine.hh	/^  double getTauReio() const {return th.tau_reio;}$/;"	f	class:ClassEngine
getTk	../cpp/ClassEngine.cc	/^ClassEngine::getTk( double z, $/;"	f	class:ClassEngine
get_Az	../cpp/ClassEngine.cc	/^double ClassEngine::get_Az(double z)$/;"	f	class:ClassEngine
get_CF1	../tools/hyperspherical.c	/^int get_CF1(int K,int l,double beta, double cotK, double *CF, int *isign){$/;"	f
get_Da	../cpp/ClassEngine.cc	/^double ClassEngine::get_Da(double z)$/;"	f	class:ClassEngine
get_Dv	../cpp/ClassEngine.cc	/^double ClassEngine::get_Dv(double z)$/;"	f	class:ClassEngine
get_Fz	../cpp/ClassEngine.cc	/^double ClassEngine::get_Fz(double z)$/;"	f	class:ClassEngine
get_Hz	../cpp/ClassEngine.cc	/^double ClassEngine::get_Hz(double z)$/;"	f	class:ClassEngine
get_f	../cpp/ClassEngine.cc	/^double ClassEngine::get_f(double z)$/;"	f	class:ClassEngine
get_integral	../tools/quadrature.c	/^double get_integral(qss_node *node, int level){$/;"	f
get_leaf_x_and_w	../tools/quadrature.c	/^int get_leaf_x_and_w(qss_node *node, int *ind, double *x, double *w,int isindefinite){$/;"	f
get_machine_precision	input.c	/^int get_machine_precision(double * smallest_allowed_variation) {$/;"	f
get_number_of_titles	../tools/common.c	/^int get_number_of_titles(char * titlestring){$/;"	f
get_qsampling	../tools/quadrature.c	/^int get_qsampling(double *x,$/;"	f
get_qsampling_manual	../tools/quadrature.c	/^int get_qsampling_manual(double *x,$/;"	f
get_sigma8	../cpp/ClassEngine.cc	/^double ClassEngine::get_sigma8(double z)$/;"	f	class:ClassEngine
get_value_at_small_phi	../tools/hyperspherical.c	/^double get_value_at_small_phi(int K,int l,double beta,double Phi){$/;"	f
gk_adapt	../tools/quadrature.c	/^int gk_adapt($/;"	f
gk_quad	../tools/quadrature.c	/^int gk_quad(int (*test)(void * params_for_function, double q, double *psi),$/;"	f
got_files	../include/background.h	/^  int * got_files;                      \/**< list of flags for each species, set to true if$/;"	m	struct:background
growTable	../include/growTable.h	/^} growTable;$/;"	t	typeref:struct:__anon1
growtable	../include/nonlinear.h	/^  double * growtable;$/;"	m	struct:nonlinear_workspace
gt_add	../tools/growTable.c	/^int gt_add($/;"	f
gt_free	../tools/growTable.c	/^int gt_free(growTable* self) {$/;"	f
gt_getPtr	../tools/growTable.c	/^int gt_getPtr($/;"	f
gt_getSize	../tools/growTable.c	/^int gt_getSize($/;"	f
gt_init	../tools/growTable.c	/^int gt_init($/;"	f
gt_retrieve	../tools/growTable.c	/^int gt_retrieve($/;"	f
gt_retrieveAll	../tools/growTable.c	/^int gt_retrieveAll($/;"	f
gw_source	../include/perturbations.h	/^  double gw_source;		    \/**< stress-energy source term in Einstein's tensor equations (gives Tij[tensor]) *\/$/;"	m	struct:perturb_workspace
h	../include/background.h	/^  double h; \/**< reduced Hubble parameter *\/$/;"	m	struct:background
halofit_integral_one	../include/nonlinear.h	/^enum halofit_integral_type {halofit_integral_one, halofit_integral_two, halofit_integral_three};$/;"	e	enum:halofit_integral_type
halofit_integral_three	../include/nonlinear.h	/^enum halofit_integral_type {halofit_integral_one, halofit_integral_two, halofit_integral_three};$/;"	e	enum:halofit_integral_type
halofit_integral_two	../include/nonlinear.h	/^enum halofit_integral_type {halofit_integral_one, halofit_integral_two, halofit_integral_three};$/;"	e	enum:halofit_integral_type
halofit_integral_type	../include/nonlinear.h	/^enum halofit_integral_type {halofit_integral_one, halofit_integral_two, halofit_integral_three};$/;"	g
has_Nbody_gauge_transfers	../include/perturbations.h	/^  short has_Nbody_gauge_transfers;    \/**< should we convert density and velocity transfer functions to Nbody gauge? *\/$/;"	m	struct:perturbs
has_ad	../include/perturbations.h	/^  short has_ad;      \/**< do we need adiabatic mode? *\/$/;"	m	struct:perturbs
has_bb	../include/lensing.h	/^  int has_bb; \/**< do we want \\f$ C_l^{BB}\\f$? (B = B-polarization) *\/$/;"	m	struct:lensing
has_bb	../include/spectra.h	/^  int has_bb; \/**< do we want \\f$ C_l^{BB}\\f$? (B = B-polarization) *\/$/;"	m	struct:spectra
has_bi	../include/perturbations.h	/^  short has_bi;      \/**< do we need isocurvature bi mode? *\/$/;"	m	struct:perturbs
has_cdi	../include/perturbations.h	/^  short has_cdi;     \/**< do we need isocurvature cdi mode? *\/$/;"	m	struct:perturbs
has_cdm	../include/background.h	/^  short has_cdm;       \/**< presence of cold dark matter? *\/$/;"	m	struct:background
has_cl_cmb_lensing_potential	../include/perturbations.h	/^  short has_cl_cmb_lensing_potential; \/**< do we need \\f$ C_l \\f$'s for CMB lensing potential? *\/$/;"	m	struct:perturbs
has_cl_cmb_polarization	../include/perturbations.h	/^  short has_cl_cmb_polarization;      \/**< do we need \\f$ C_l \\f$'s for CMB polarization? *\/$/;"	m	struct:perturbs
has_cl_cmb_temperature	../include/perturbations.h	/^  short has_cl_cmb_temperature;       \/**< do we need \\f$ C_l \\f$'s for CMB temperature? *\/$/;"	m	struct:perturbs
has_cl_lensing_potential	../include/perturbations.h	/^  short has_cl_lensing_potential;     \/**< do we need \\f$ C_l \\f$'s for galaxy lensing potential? *\/$/;"	m	struct:perturbs
has_cl_number_count	../include/perturbations.h	/^  short has_cl_number_count;          \/**< do we need \\f$ C_l \\f$'s for density number count? *\/$/;"	m	struct:perturbs
has_cls	../include/perturbations.h	/^  short has_cls; \/**< do we need any harmonic space spectrum \\f$ C_l \\f$ (and hence Bessel functions, transfer functions, ...)? *\/$/;"	m	struct:perturbs
has_cls	../include/transfer.h	/^  short has_cls; \/**< copy of same flag in perturbation structure *\/$/;"	m	struct:transfers
has_cmb	../include/perturbations.h	/^  short has_cmb; \/**< do we need CMB-related sources (temperature, polarization) ? *\/$/;"	m	struct:perturbs
has_curvature	../include/background.h	/^  short has_curvature; \/**< presence of global spatial curvature? *\/$/;"	m	struct:background
has_dcdm	../include/background.h	/^  short has_dcdm;      \/**< presence of decaying cold dark matter? *\/$/;"	m	struct:background
has_dd	../include/lensing.h	/^  int has_dd; \/**< do we want \\f$ C_l^{dd}\\f$? (d = matter density) *\/$/;"	m	struct:lensing
has_dd	../include/spectra.h	/^  int has_dd; \/**< do we want \\f$ C_l^{dd}\\f$? (d = density) *\/$/;"	m	struct:spectra
has_density_transfers	../include/perturbations.h	/^  short has_density_transfers;        \/**< do we need to output individual matter density transfer functions? *\/$/;"	m	struct:perturbs
has_dl	../include/spectra.h	/^  int has_dl; \/**< do we want \\f$ C_l^{dl}\\f$? *\/$/;"	m	struct:spectra
has_dr	../include/background.h	/^  short has_dr;        \/**< presence of relativistic decay radiation? *\/$/;"	m	struct:background
has_ee	../include/lensing.h	/^  int has_ee; \/**< do we want lensed \\f$ C_l^{EE}\\f$? (E = E-polarization) *\/$/;"	m	struct:lensing
has_ee	../include/spectra.h	/^  int has_ee; \/**< do we want \\f$ C_l^{EE}\\f$? (E = E-polarization) *\/$/;"	m	struct:spectra
has_ep	../include/spectra.h	/^  int has_ep; \/**< do we want \\f$ C_l^{E\\phi}\\f$? *\/$/;"	m	struct:spectra
has_fld	../include/background.h	/^  short has_fld;       \/**< presence of fluid with constant w and cs2? *\/$/;"	m	struct:background
has_grouping	../include/evolver_ndf15.h	/^	int has_grouping;$/;"	m	struct:jacobian
has_idm_dr	../include/background.h	/^  short has_idm_dr;    \/**< presence of dark matter interacting with dark radiation? *\/$/;"	m	struct:background
has_idr	../include/background.h	/^  short has_idr;       \/**< presence of interacting dark radiation? *\/$/;"	m	struct:background
has_lambda	../include/background.h	/^  short has_lambda;    \/**< presence of cosmological constant? *\/$/;"	m	struct:background
has_lensed_cls	../include/lensing.h	/^  short has_lensed_cls; \/**< do we need to compute lensed \\f$ C_l\\f$'s at all ? *\/$/;"	m	struct:lensing
has_ll	../include/lensing.h	/^  int has_ll; \/**< do we want \\f$ C_l^{ll}\\f$? (l = lensing potential) *\/$/;"	m	struct:lensing
has_ll	../include/spectra.h	/^  int has_ll; \/**< do we want \\f$ C_l^{ll}\\f$? (l = galaxy lensing potential) *\/$/;"	m	struct:spectra
has_lss	../include/perturbations.h	/^  short has_lss; \/**< do we need LSS-related sources (lensing potential, ...) ? *\/$/;"	m	struct:perturbs
has_metricpotential_transfers	../include/perturbations.h	/^  short has_metricpotential_transfers;\/**< do we need to output individual transfer functions for scalar metric perturbations? *\/$/;"	m	struct:perturbs
has_nc_density	../include/perturbations.h	/^  short has_nc_density;  \/**< in dCl, do we want density terms ? *\/$/;"	m	struct:perturbs
has_nc_gr	../include/perturbations.h	/^  short has_nc_gr;       \/**< in dCl, do we want gravity terms ? *\/$/;"	m	struct:perturbs
has_nc_lens	../include/perturbations.h	/^  short has_nc_lens;     \/**< in dCl, do we want lensing terms ? *\/$/;"	m	struct:perturbs
has_nc_rsd	../include/perturbations.h	/^  short has_nc_rsd;      \/**< in dCl, do we want redshift space distortion terms ? *\/$/;"	m	struct:perturbs
has_ncdm	../include/background.h	/^  short has_ncdm;      \/**< presence of non-cold dark matter? *\/$/;"	m	struct:background
has_nid	../include/perturbations.h	/^  short has_nid;     \/**< do we need isocurvature nid mode? *\/$/;"	m	struct:perturbs
has_niv	../include/perturbations.h	/^  short has_niv;     \/**< do we need isocurvature niv mode? *\/$/;"	m	struct:perturbs
has_nl_corrections_based_on_delta_m	../include/perturbations.h	/^  short has_nl_corrections_based_on_delta_m;  \/**< do we want to compute non-linear corrections with an algorithm relying on delta_m (like halofit)? *\/$/;"	m	struct:perturbs
has_nz_analytic	../include/transfer.h	/^  short has_nz_analytic; \/**< Use analytic form for dN\/dz (selection function) distribution? *\/$/;"	m	struct:transfers
has_nz_evo_analytic	../include/transfer.h	/^  short has_nz_evo_analytic;  \/**< Use analytic form for dN\/dz (evolution function) distribution? *\/$/;"	m	struct:transfers
has_nz_evo_file	../include/transfer.h	/^  short has_nz_evo_file;      \/**< Has dN\/dz (evolution function) input file? *\/$/;"	m	struct:transfers
has_nz_file	../include/transfer.h	/^  short has_nz_file;     \/**< Has dN\/dz (selection function) input file? *\/$/;"	m	struct:transfers
has_on_the_spot	../include/thermodynamics.h	/^  short has_on_the_spot; \/**< flag to specify if we want to use the on-the-spot approximation **\/$/;"	m	struct:recombination
has_on_the_spot	../include/thermodynamics.h	/^  short has_on_the_spot; \/**< flag to specify if we want to use the on-the-spot approximation **\/$/;"	m	struct:thermo
has_pattern	../include/evolver_ndf15.h	/^	int has_pattern;$/;"	m	struct:jacobian
has_pd	../include/spectra.h	/^  int has_pd; \/**< do we want \\f$ C_l^{\\phi d}\\f$? *\/$/;"	m	struct:spectra
has_perturbations	../include/perturbations.h	/^  short has_perturbations; \/**< do we need to compute perturbations at all ? *\/$/;"	m	struct:perturbs
has_perturbed_recombination	../include/perturbations.h	/^  short has_perturbed_recombination;$/;"	m	struct:perturbs
has_pk_cb	../include/nonlinear.h	/^  short has_pk_cb; \/**< do we want spectra for cdm+baryons? *\/$/;"	m	struct:nonlinear
has_pk_eq	../include/nonlinear.h	/^  short has_pk_eq;               \/**< flag: will we use the pk_eq method? *\/$/;"	m	struct:nonlinear
has_pk_m	../include/nonlinear.h	/^  short has_pk_m;  \/**< do we want spectra for total matter? *\/$/;"	m	struct:nonlinear
has_pk_matter	../include/nonlinear.h	/^  short has_pk_matter; \/**< do we need matter Fourier spectrum? *\/$/;"	m	struct:nonlinear
has_pk_matter	../include/perturbations.h	/^  short has_pk_matter;                \/**< do we need matter Fourier spectrum? *\/$/;"	m	struct:perturbs
has_pp	../include/lensing.h	/^  int has_pp; \/**< do we want \\f$ C_l^{\\phi\\phi}\\f$? (\\f$ \\phi \\f$ = CMB lensing potential) *\/$/;"	m	struct:lensing
has_pp	../include/spectra.h	/^  int has_pp; \/**< do we want \\f$ C_l^{\\phi\\phi}\\f$? (\\f$ \\phi \\f$ = CMB lensing potential) *\/$/;"	m	struct:spectra
has_scalars	../include/perturbations.h	/^  short has_scalars; \/**< do we need scalars? *\/$/;"	m	struct:perturbs
has_scf	../include/background.h	/^  short has_scf;       \/**< presence of a scalar field? *\/$/;"	m	struct:background
has_source_H_T_Nb_prime	../include/perturbations.h	/^  short has_source_H_T_Nb_prime;\/**< do we need source for metric fluctuation H_T_Nb'? *\/$/;"	m	struct:perturbs
has_source_delta_b	../include/perturbations.h	/^  short has_source_delta_b;     \/**< do we need source for delta of baryons? *\/$/;"	m	struct:perturbs
has_source_delta_cb	../include/perturbations.h	/^  short has_source_delta_cb;    \/**< do we ALSO need source for delta of ONLY cdm and baryon? *\/$/;"	m	struct:perturbs
has_source_delta_cdm	../include/perturbations.h	/^  short has_source_delta_cdm;   \/**< do we need source for delta of cold dark matter? *\/$/;"	m	struct:perturbs
has_source_delta_dcdm	../include/perturbations.h	/^  short has_source_delta_dcdm;  \/**< do we need source for delta of DCDM? *\/$/;"	m	struct:perturbs
has_source_delta_dr	../include/perturbations.h	/^  short has_source_delta_dr;    \/**< do we need source for delta of decay radiation? *\/$/;"	m	struct:perturbs
has_source_delta_fld	../include/perturbations.h	/^  short has_source_delta_fld;   \/**< do we need source for delta of dark energy? *\/$/;"	m	struct:perturbs
has_source_delta_g	../include/perturbations.h	/^  short has_source_delta_g;     \/**< do we need source for delta of gammas? *\/$/;"	m	struct:perturbs
has_source_delta_idm_dr	../include/perturbations.h	/^  short has_source_delta_idm_dr;\/**< do we need source for delta of interacting dark matter (with dr)? *\/$/;"	m	struct:perturbs
has_source_delta_idr	../include/perturbations.h	/^  short has_source_delta_idr;   \/**< do we need source for delta of interacting dark radiation? *\/$/;"	m	struct:perturbs
has_source_delta_m	../include/perturbations.h	/^  short has_source_delta_m;     \/**< do we need source for delta of total matter? *\/$/;"	m	struct:perturbs
has_source_delta_ncdm	../include/perturbations.h	/^  short has_source_delta_ncdm;  \/**< do we need source for delta of all non-cold dark matter species (e.g. massive neutrinos)? *\/$/;"	m	struct:perturbs
has_source_delta_scf	../include/perturbations.h	/^  short has_source_delta_scf;   \/**< do we need source for delta from scalar field? *\/$/;"	m	struct:perturbs
has_source_delta_tot	../include/perturbations.h	/^  short has_source_delta_tot;   \/**< do we need source for delta total? *\/$/;"	m	struct:perturbs
has_source_delta_ur	../include/perturbations.h	/^  short has_source_delta_ur;    \/**< do we need source for delta of ultra-relativistic neutrinos\/relics? *\/$/;"	m	struct:perturbs
has_source_eta	../include/perturbations.h	/^  short has_source_eta;         \/**< do we need source for metric fluctuation eta? *\/$/;"	m	struct:perturbs
has_source_eta_prime	../include/perturbations.h	/^  short has_source_eta_prime;   \/**< do we need source for metric fluctuation eta'? *\/$/;"	m	struct:perturbs
has_source_h	../include/perturbations.h	/^  short has_source_h;           \/**< do we need source for metric fluctuation h? *\/$/;"	m	struct:perturbs
has_source_h_prime	../include/perturbations.h	/^  short has_source_h_prime;     \/**< do we need source for metric fluctuation h'? *\/$/;"	m	struct:perturbs
has_source_k2gamma_Nb	../include/perturbations.h	/^  short has_source_k2gamma_Nb;  \/**< do we need source for metric fluctuation gamma in Nbody gauge? *\/$/;"	m	struct:perturbs
has_source_p	../include/perturbations.h	/^  short has_source_p;           \/**< do we need source for CMB polarization? *\/$/;"	m	struct:perturbs
has_source_phi	../include/perturbations.h	/^  short has_source_phi;         \/**< do we need source for metric fluctuation phi? *\/$/;"	m	struct:perturbs
has_source_phi_plus_psi	../include/perturbations.h	/^  short has_source_phi_plus_psi;\/**< do we need source for metric fluctuation (phi+psi)? *\/$/;"	m	struct:perturbs
has_source_phi_prime	../include/perturbations.h	/^  short has_source_phi_prime;   \/**< do we need source for metric fluctuation phi'? *\/$/;"	m	struct:perturbs
has_source_psi	../include/perturbations.h	/^  short has_source_psi;         \/**< do we need source for metric fluctuation psi? *\/$/;"	m	struct:perturbs
has_source_t	../include/perturbations.h	/^  short has_source_t;           \/**< do we need source for CMB temperature? *\/$/;"	m	struct:perturbs
has_source_theta_b	../include/perturbations.h	/^  short has_source_theta_b;     \/**< do we need source for theta of baryons? *\/$/;"	m	struct:perturbs
has_source_theta_cb	../include/perturbations.h	/^  short has_source_theta_cb;    \/**< do we ALSO need source for theta of ONLY cdm and baryon? *\/$/;"	m	struct:perturbs
has_source_theta_cdm	../include/perturbations.h	/^  short has_source_theta_cdm;   \/**< do we need source for theta of cold dark matter? *\/$/;"	m	struct:perturbs
has_source_theta_dcdm	../include/perturbations.h	/^  short has_source_theta_dcdm;  \/**< do we need source for theta of DCDM? *\/$/;"	m	struct:perturbs
has_source_theta_dr	../include/perturbations.h	/^  short has_source_theta_dr;    \/**< do we need source for theta of ultra-relativistic neutrinos\/relics? *\/$/;"	m	struct:perturbs
has_source_theta_fld	../include/perturbations.h	/^  short has_source_theta_fld;   \/**< do we need source for theta of dark energy? *\/$/;"	m	struct:perturbs
has_source_theta_g	../include/perturbations.h	/^  short has_source_theta_g;     \/**< do we need source for theta of gammas? *\/$/;"	m	struct:perturbs
has_source_theta_idm_dr	../include/perturbations.h	/^  short has_source_theta_idm_dr;\/**< do we need source for theta of interacting dark matter (with dr)? *\/$/;"	m	struct:perturbs
has_source_theta_idr	../include/perturbations.h	/^  short has_source_theta_idr;   \/**< do we need source for theta of interacting dark radiation? *\/$/;"	m	struct:perturbs
has_source_theta_m	../include/perturbations.h	/^  short has_source_theta_m;     \/**< do we need source for theta of total matter? *\/$/;"	m	struct:perturbs
has_source_theta_ncdm	../include/perturbations.h	/^  short has_source_theta_ncdm;  \/**< do we need source for theta of all non-cold dark matter species (e.g. massive neutrinos)? *\/$/;"	m	struct:perturbs
has_source_theta_scf	../include/perturbations.h	/^  short has_source_theta_scf;   \/**< do we need source for theta of scalar field? *\/$/;"	m	struct:perturbs
has_source_theta_tot	../include/perturbations.h	/^  short has_source_theta_tot;   \/**< do we need source for theta total? *\/$/;"	m	struct:perturbs
has_source_theta_ur	../include/perturbations.h	/^  short has_source_theta_ur;    \/**< do we need source for theta of ultra-relativistic neutrinos\/relics? *\/$/;"	m	struct:perturbs
has_td	../include/lensing.h	/^  int has_td; \/**< do we want \\f$ C_l^{Td}\\f$? *\/$/;"	m	struct:lensing
has_td	../include/spectra.h	/^  int has_td; \/**< do we want \\f$ C_l^{Td}\\f$? *\/$/;"	m	struct:spectra
has_te	../include/lensing.h	/^  int has_te; \/**< do we want lensed \\f$ C_l^{TE}\\f$? *\/$/;"	m	struct:lensing
has_te	../include/spectra.h	/^  int has_te; \/**< do we want \\f$ C_l^{TE}\\f$? *\/$/;"	m	struct:spectra
has_tensors	../include/perturbations.h	/^  short has_tensors; \/**< do we need tensors? *\/$/;"	m	struct:perturbs
has_tl	../include/lensing.h	/^  int has_tl; \/**< do we want \\f$ C_l^{Tl}\\f$? *\/$/;"	m	struct:lensing
has_tl	../include/spectra.h	/^  int has_tl; \/**< do we want \\f$ C_l^{Tl}\\f$? *\/$/;"	m	struct:spectra
has_tp	../include/lensing.h	/^  int has_tp; \/**< do we want \\f$ C_l^{T\\phi}\\f$? *\/$/;"	m	struct:lensing
has_tp	../include/spectra.h	/^  int has_tp; \/**< do we want \\f$ C_l^{T\\phi}\\f$? *\/$/;"	m	struct:spectra
has_tt	../include/lensing.h	/^  int has_tt; \/**< do we want lensed \\f$ C_l^{TT}\\f$? (T = temperature) *\/$/;"	m	struct:lensing
has_tt	../include/spectra.h	/^  int has_tt; \/**< do we want \\f$ C_l^{TT}\\f$? (T = temperature) *\/$/;"	m	struct:spectra
has_ur	../include/background.h	/^  short has_ur;        \/**< presence of ultra-relativistic neutrinos\/relics? *\/$/;"	m	struct:background
has_vectors	../include/perturbations.h	/^  short has_vectors; \/**< do we need vectors? *\/$/;"	m	struct:perturbs
has_velocity_transfers	../include/perturbations.h	/^  short has_velocity_transfers;       \/**< do we need to output individual matter velocity transfer functions? *\/$/;"	m	struct:perturbs
helium_fullreio_redshift	../include/thermodynamics.h	/^  double helium_fullreio_redshift; \/**< redshift for of helium reionization *\/$/;"	m	struct:thermo
helium_fullreio_width	../include/thermodynamics.h	/^  double helium_fullreio_width; \/**< width of helium reionization *\/$/;"	m	struct:thermo
higgs_inflation	../include/primordial.h	/^  higgs_inflation$/;"	e	enum:potential_shape
hmcode_baryonic_feedback_model	../include/nonlinear.h	/^enum hmcode_baryonic_feedback_model {nl_emu_dmonly, nl_owls_dmonly, nl_owls_ref, nl_owls_agn, nl_owls_dblim, nl_user_defined};$/;"	g
hyperspherical_HIS_create	../tools/hyperspherical.c	/^int hyperspherical_HIS_create(int K,$/;"	f
hyperspherical_HIS_free	../tools/hyperspherical.c	/^int hyperspherical_HIS_free(HyperInterpStruct *pHIS,$/;"	f
hyperspherical_HIS_size	../tools/hyperspherical.c	/^size_t hyperspherical_HIS_size(int nl, int nx){$/;"	f
hyperspherical_Hermite3_interpolation_vector_Phi	../tools/hyperspherical.c	/^int hyperspherical_Hermite3_interpolation_vector_Phi(HyperInterpStruct *pHIS,$/;"	f
hyperspherical_Hermite3_interpolation_vector_Phid2Phi	../tools/hyperspherical.c	/^int hyperspherical_Hermite3_interpolation_vector_Phid2Phi(HyperInterpStruct *pHIS,$/;"	f
hyperspherical_Hermite3_interpolation_vector_PhidPhi	../tools/hyperspherical.c	/^int hyperspherical_Hermite3_interpolation_vector_PhidPhi(HyperInterpStruct *pHIS,$/;"	f
hyperspherical_Hermite3_interpolation_vector_PhidPhid2Phi	../tools/hyperspherical.c	/^int hyperspherical_Hermite3_interpolation_vector_PhidPhid2Phi(HyperInterpStruct *pHIS,$/;"	f
hyperspherical_Hermite3_interpolation_vector_d2Phi	../tools/hyperspherical.c	/^int hyperspherical_Hermite3_interpolation_vector_d2Phi(HyperInterpStruct *pHIS,$/;"	f
hyperspherical_Hermite3_interpolation_vector_dPhi	../tools/hyperspherical.c	/^int hyperspherical_Hermite3_interpolation_vector_dPhi(HyperInterpStruct *pHIS,$/;"	f
hyperspherical_Hermite3_interpolation_vector_dPhid2Phi	../tools/hyperspherical.c	/^int hyperspherical_Hermite3_interpolation_vector_dPhid2Phi(HyperInterpStruct *pHIS,$/;"	f
hyperspherical_Hermite4_interpolation_vector_Phi	../tools/hyperspherical.c	/^int hyperspherical_Hermite4_interpolation_vector_Phi(HyperInterpStruct *pHIS,$/;"	f
hyperspherical_Hermite4_interpolation_vector_Phid2Phi	../tools/hyperspherical.c	/^int hyperspherical_Hermite4_interpolation_vector_Phid2Phi(HyperInterpStruct *pHIS,$/;"	f
hyperspherical_Hermite4_interpolation_vector_PhidPhi	../tools/hyperspherical.c	/^int hyperspherical_Hermite4_interpolation_vector_PhidPhi(HyperInterpStruct *pHIS,$/;"	f
hyperspherical_Hermite4_interpolation_vector_PhidPhid2Phi	../tools/hyperspherical.c	/^int hyperspherical_Hermite4_interpolation_vector_PhidPhid2Phi(HyperInterpStruct *pHIS,$/;"	f
hyperspherical_Hermite4_interpolation_vector_d2Phi	../tools/hyperspherical.c	/^int hyperspherical_Hermite4_interpolation_vector_d2Phi(HyperInterpStruct *pHIS,$/;"	f
hyperspherical_Hermite4_interpolation_vector_dPhi	../tools/hyperspherical.c	/^int hyperspherical_Hermite4_interpolation_vector_dPhi(HyperInterpStruct *pHIS,$/;"	f
hyperspherical_Hermite4_interpolation_vector_dPhid2Phi	../tools/hyperspherical.c	/^int hyperspherical_Hermite4_interpolation_vector_dPhid2Phi(HyperInterpStruct *pHIS,$/;"	f
hyperspherical_Hermite6_interpolation_vector_Phi	../tools/hyperspherical.c	/^int hyperspherical_Hermite6_interpolation_vector_Phi(HyperInterpStruct *pHIS,$/;"	f
hyperspherical_Hermite6_interpolation_vector_Phid2Phi	../tools/hyperspherical.c	/^int hyperspherical_Hermite6_interpolation_vector_Phid2Phi(HyperInterpStruct *pHIS,$/;"	f
hyperspherical_Hermite6_interpolation_vector_PhidPhi	../tools/hyperspherical.c	/^int hyperspherical_Hermite6_interpolation_vector_PhidPhi(HyperInterpStruct *pHIS,$/;"	f
hyperspherical_Hermite6_interpolation_vector_PhidPhid2Phi	../tools/hyperspherical.c	/^int hyperspherical_Hermite6_interpolation_vector_PhidPhid2Phi(HyperInterpStruct *pHIS,$/;"	f
hyperspherical_Hermite6_interpolation_vector_d2Phi	../tools/hyperspherical.c	/^int hyperspherical_Hermite6_interpolation_vector_d2Phi(HyperInterpStruct *pHIS,$/;"	f
hyperspherical_Hermite6_interpolation_vector_dPhi	../tools/hyperspherical.c	/^int hyperspherical_Hermite6_interpolation_vector_dPhi(HyperInterpStruct *pHIS,$/;"	f
hyperspherical_Hermite6_interpolation_vector_dPhid2Phi	../tools/hyperspherical.c	/^int hyperspherical_Hermite6_interpolation_vector_dPhid2Phi(HyperInterpStruct *pHIS,$/;"	f
hyperspherical_Hermite_interpolation_vector	../tools/hyperspherical.c	/^int hyperspherical_Hermite_interpolation_vector(HyperInterpStruct *pHIS,$/;"	f
hyperspherical_WKB	../tools/hyperspherical.c	/^int hyperspherical_WKB(int K,int l,double beta,double y, double *Phi){$/;"	f
hyperspherical_WKB_vec	../tools/hyperspherical.c	/^ int hyperspherical_WKB_vec(int l,$/;"	f
hyperspherical_backwards_recurrence	../tools/hyperspherical.c	/^int hyperspherical_backwards_recurrence(int K,$/;"	f
hyperspherical_backwards_recurrence_chunk	../tools/hyperspherical.c	/^int hyperspherical_backwards_recurrence_chunk(int K,$/;"	f
hyperspherical_forwards_recurrence	../tools/hyperspherical.c	/^int hyperspherical_forwards_recurrence(int K,$/;"	f
hyperspherical_forwards_recurrence_chunk	../tools/hyperspherical.c	/^int hyperspherical_forwards_recurrence_chunk(int K,$/;"	f
hyperspherical_get_xmin	../tools/hyperspherical.c	/^int hyperspherical_get_xmin(HyperInterpStruct *pHIS,$/;"	f
hyperspherical_get_xmin_from_Airy	../tools/hyperspherical.c	/^int hyperspherical_get_xmin_from_Airy(int K,$/;"	f
hyperspherical_get_xmin_from_approx	../tools/hyperspherical.c	/^int hyperspherical_get_xmin_from_approx(int K,$/;"	f
hyperspherical_update_pointers	../tools/hyperspherical.c	/^int hyperspherical_update_pointers(HyperInterpStruct *pHIS_local,$/;"	f
hyrec	../include/thermodynamics.h	/^  hyrec$/;"	e	enum:recombination_algorithm
ic_ic_size	../include/nonlinear.h	/^  int ic_ic_size;      \/**< for a given mode, ic_ic_size[index_md] = number of pairs of (index_ic1, index_ic2) with index_ic2 >= index_ic1; this number is just N(N+1)\/2  where N = ic_size[index_md] *\/$/;"	m	struct:nonlinear
ic_ic_size	../include/primordial.h	/^  int * ic_ic_size; \/**< number of ordered pairs of (index_ic1, index_ic2); this number is just N(N+1)\/2  where N = ic_size[index_md] *\/$/;"	m	struct:primordial
ic_ic_size	../include/spectra.h	/^  int * ic_ic_size;      \/**< for a given mode, ic_ic_size[index_md] = number of pairs of (index_ic1, index_ic2) with index_ic2 >= index_ic1; this number is just N(N+1)\/2  where N = ic_size[index_md] *\/$/;"	m	struct:spectra
ic_size	../include/nonlinear.h	/^  int ic_size;         \/**< for a given mode, ic_size[index_md] = number of initial conditions included in computation *\/$/;"	m	struct:nonlinear
ic_size	../include/perturbations.h	/^  int * ic_size;       \/**< for a given mode, ic_size[index_md] = number of initial conditions included in computation *\/$/;"	m	struct:perturbs
ic_size	../include/primordial.h	/^  int * ic_size;    \/**< for a given mode, ic_size[index_md] = number of initial conditions included in computation *\/$/;"	m	struct:primordial
ic_size	../include/spectra.h	/^  int * ic_size;         \/**< for a given mode, ic_size[index_md] = number of initial conditions included in computation *\/$/;"	m	struct:spectra
idr_fluid	../include/perturbations.h	/^enum idr_method {idr_free_streaming,idr_fluid}; \/* for the idm-idr case *\/$/;"	e	enum:idr_method
idr_free_streaming	../include/perturbations.h	/^enum idr_method {idr_free_streaming,idr_fluid}; \/* for the idm-idr case *\/$/;"	e	enum:idr_method
idr_method	../include/perturbations.h	/^enum idr_method {idr_free_streaming,idr_fluid}; \/* for the idm-idr case *\/$/;"	g
idr_nature	../include/perturbations.h	/^  int idr_nature; \/**< Nature of the interacting dark radiation (free streaming or fluid) *\/$/;"	m	struct:perturbs
in_bg_size	../include/primordial.h	/^  int in_bg_size;       \/**< size of vector of background quantities only *\/$/;"	m	struct:primordial
in_size	../include/primordial.h	/^  int in_size;          \/**< full size of vector *\/$/;"	m	struct:primordial
index_ap_ncdmfa	../include/perturbations.h	/^  int index_ap_ncdmfa; \/**< index for ncdm fluid approximation *\/$/;"	m	struct:perturb_workspace
index_ap_rsa	../include/perturbations.h	/^  int index_ap_rsa; \/**< index for radiation streaming approximation *\/$/;"	m	struct:perturb_workspace
index_ap_rsa_idr	../include/perturbations.h	/^  int index_ap_rsa_idr; \/**< index for dark radiation streaming approximation *\/$/;"	m	struct:perturb_workspace
index_ap_tca	../include/perturbations.h	/^  int index_ap_tca; \/**< index for tight-coupling approximation *\/$/;"	m	struct:perturb_workspace
index_ap_tca_idm_dr	../include/perturbations.h	/^  int index_ap_tca_idm_dr; \/**< index for dark tight-coupling approximation (idm-idr) *\/$/;"	m	struct:perturb_workspace
index_ap_ufa	../include/perturbations.h	/^  int index_ap_ufa; \/**< index for ur fluid approximation *\/$/;"	m	struct:perturb_workspace
index_bg_D	../include/background.h	/^  int index_bg_D;             \/**< scale independent growth factor D(a) for CDM perturbations *\/$/;"	m	struct:background
index_bg_H	../include/background.h	/^  int index_bg_H;             \/**< Hubble parameter in \\f$Mpc^{-1}\\f$ *\/$/;"	m	struct:background
index_bg_H_prime	../include/background.h	/^  int index_bg_H_prime;       \/**< its derivative w.r.t. conformal time *\/$/;"	m	struct:background
index_bg_Omega_m	../include/background.h	/^  int index_bg_Omega_m;       \/**< non-relativistic density fraction (\\f$ \\Omega_b + \\Omega_cdm + \\Omega_{\\nu nr} \\f$) *\/$/;"	m	struct:background
index_bg_Omega_r	../include/background.h	/^  int index_bg_Omega_r;       \/**< relativistic density fraction (\\f$ \\Omega_{\\gamma} + \\Omega_{\\nu r} \\f$) *\/$/;"	m	struct:background
index_bg_V_scf	../include/background.h	/^  int index_bg_V_scf;         \/**< scalar field potential V *\/$/;"	m	struct:background
index_bg_a	../include/background.h	/^  int index_bg_a;             \/**< scale factor *\/$/;"	m	struct:background
index_bg_ang_distance	../include/background.h	/^  int index_bg_ang_distance;  \/**< angular diameter distance in Mpc *\/$/;"	m	struct:background
index_bg_conf_distance	../include/background.h	/^  int index_bg_conf_distance; \/**< conformal distance (from us) in Mpc *\/$/;"	m	struct:background
index_bg_dV_scf	../include/background.h	/^  int index_bg_dV_scf;        \/**< scalar field potential derivative V' *\/$/;"	m	struct:background
index_bg_ddV_scf	../include/background.h	/^  int index_bg_ddV_scf;       \/**< scalar field potential second derivative V'' *\/$/;"	m	struct:background
index_bg_f	../include/background.h	/^  int index_bg_f;             \/**< corresponding velocity growth factor [dlnD]\/[dln a] *\/$/;"	m	struct:background
index_bg_lum_distance	../include/background.h	/^  int index_bg_lum_distance;  \/**< luminosity distance in Mpc *\/$/;"	m	struct:background
index_bg_p_ncdm1	../include/background.h	/^  int index_bg_p_ncdm1;       \/**< pressure of first ncdm species (others contiguous) *\/$/;"	m	struct:background
index_bg_p_prime_scf	../include/background.h	/^  int index_bg_p_prime_scf;         \/**< scalar field pressure *\/$/;"	m	struct:background
index_bg_p_scf	../include/background.h	/^  int index_bg_p_scf;         \/**< scalar field pressure *\/$/;"	m	struct:background
index_bg_p_tot	../include/background.h	/^  int index_bg_p_tot;         \/**< Total pressure *\/$/;"	m	struct:background
index_bg_p_tot_prime	../include/background.h	/^  int index_bg_p_tot_prime;   \/**< Conf. time derivative of total pressure *\/$/;"	m	struct:background
index_bg_phi_prime_scf	../include/background.h	/^  int index_bg_phi_prime_scf; \/**< scalar field derivative wrt conformal time *\/$/;"	m	struct:background
index_bg_phi_scf	../include/background.h	/^  int index_bg_phi_scf;       \/**< scalar field value *\/$/;"	m	struct:background
index_bg_pseudo_p_ncdm1	../include/background.h	/^  int index_bg_pseudo_p_ncdm1;\/**< another statistical momentum useful in ncdma approximation *\/$/;"	m	struct:background
index_bg_rho_b	../include/background.h	/^  int index_bg_rho_b;         \/**< baryon density *\/$/;"	m	struct:background
index_bg_rho_cdm	../include/background.h	/^  int index_bg_rho_cdm;       \/**< cdm density *\/$/;"	m	struct:background
index_bg_rho_crit	../include/background.h	/^  int index_bg_rho_crit;      \/**< critical density *\/$/;"	m	struct:background
index_bg_rho_dcdm	../include/background.h	/^  int index_bg_rho_dcdm;      \/**< dcdm density *\/$/;"	m	struct:background
index_bg_rho_dr	../include/background.h	/^  int index_bg_rho_dr;        \/**< dr density *\/$/;"	m	struct:background
index_bg_rho_fld	../include/background.h	/^  int index_bg_rho_fld;       \/**< fluid density *\/$/;"	m	struct:background
index_bg_rho_g	../include/background.h	/^  int index_bg_rho_g;         \/**< photon density *\/$/;"	m	struct:background
index_bg_rho_idm_dr	../include/background.h	/^  int index_bg_rho_idm_dr;    \/**< density of dark matter interacting with dark radiation *\/$/;"	m	struct:background
index_bg_rho_idr	../include/background.h	/^  int index_bg_rho_idr;       \/**< density of interacting dark radiation *\/$/;"	m	struct:background
index_bg_rho_lambda	../include/background.h	/^  int index_bg_rho_lambda;    \/**< cosmological constant density *\/$/;"	m	struct:background
index_bg_rho_ncdm1	../include/background.h	/^  int index_bg_rho_ncdm1;     \/**< density of first ncdm species (others contiguous) *\/$/;"	m	struct:background
index_bg_rho_scf	../include/background.h	/^  int index_bg_rho_scf;       \/**< scalar field energy density *\/$/;"	m	struct:background
index_bg_rho_tot	../include/background.h	/^  int index_bg_rho_tot;       \/**< Total density *\/$/;"	m	struct:background
index_bg_rho_ur	../include/background.h	/^  int index_bg_rho_ur;        \/**< relativistic neutrinos\/relics density *\/$/;"	m	struct:background
index_bg_rs	../include/background.h	/^  int index_bg_rs;            \/**< comoving sound horizon in Mpc *\/$/;"	m	struct:background
index_bg_time	../include/background.h	/^  int index_bg_time;          \/**< proper (cosmological) time in Mpc *\/$/;"	m	struct:background
index_bg_w_fld	../include/background.h	/^  int index_bg_w_fld;         \/**< fluid equation of state *\/$/;"	m	struct:background
index_bi_D	../include/background.h	/^  int index_bi_D;       \/**< {C} scale independent growth factor D(a) for CDM perturbations. *\/$/;"	m	struct:background
index_bi_D_prime	../include/background.h	/^  int index_bi_D_prime; \/**< {C} D satisfies \\f$ [D''(\\tau)=-aHD'(\\tau)+3\/2 a^2 \\rho_M D(\\tau) \\f$ *\/$/;"	m	struct:background
index_bi_a	../include/background.h	/^  int index_bi_a;       \/**< {B} scale factor *\/$/;"	m	struct:background
index_bi_phi_prime_scf	../include/background.h	/^  int index_bi_phi_prime_scf; \/**< {B} scalar field derivative wrt conformal time *\/$/;"	m	struct:background
index_bi_phi_scf	../include/background.h	/^  int index_bi_phi_scf;       \/**< {B} scalar field value *\/$/;"	m	struct:background
index_bi_rho_dcdm	../include/background.h	/^  int index_bi_rho_dcdm;\/**< {B} dcdm density *\/$/;"	m	struct:background
index_bi_rho_dr	../include/background.h	/^  int index_bi_rho_dr;  \/**< {B} dr density *\/$/;"	m	struct:background
index_bi_rho_fld	../include/background.h	/^  int index_bi_rho_fld; \/**< {B} fluid density *\/$/;"	m	struct:background
index_bi_rs	../include/background.h	/^  int index_bi_rs;      \/**< {C} sound horizon *\/$/;"	m	struct:background
index_bi_tau	../include/background.h	/^  int index_bi_tau;     \/**< {C} conformal time in Mpc *\/$/;"	m	struct:background
index_bi_time	../include/background.h	/^  int index_bi_time;    \/**< {C} proper (cosmological) time in Mpc *\/$/;"	m	struct:background
index_ct_bb	../include/spectra.h	/^  int index_ct_bb; \/**< index for type \\f$ C_l^{BB} \\f$*\/$/;"	m	struct:spectra
index_ct_dd	../include/spectra.h	/^  int index_ct_dd; \/**< first index for type \\f$ C_l^{dd} \\f$((d_size*d_size-(d_size-non_diag)*(d_size-non_diag-1)\/2) values) *\/$/;"	m	struct:spectra
index_ct_dl	../include/spectra.h	/^  int index_ct_dl; \/**< first index for type \\f$ C_l^{dl} \\f$(d_size values) *\/$/;"	m	struct:spectra
index_ct_ee	../include/spectra.h	/^  int index_ct_ee; \/**< index for type \\f$ C_l^{EE} \\f$*\/$/;"	m	struct:spectra
index_ct_ep	../include/spectra.h	/^  int index_ct_ep; \/**< index for type \\f$ C_l^{E\\phi} \\f$*\/$/;"	m	struct:spectra
index_ct_ll	../include/spectra.h	/^  int index_ct_ll; \/**< first index for type \\f$ C_l^{ll} \\f$((d_size*d_size-(d_size-non_diag)*(d_size-non_diag-1)\/2) values) *\/$/;"	m	struct:spectra
index_ct_pd	../include/spectra.h	/^  int index_ct_pd; \/**< first index for type \\f$ C_l^{pd} \\f$(d_size values) *\/$/;"	m	struct:spectra
index_ct_pp	../include/spectra.h	/^  int index_ct_pp; \/**< index for type \\f$ C_l^{\\phi\\phi} \\f$*\/$/;"	m	struct:spectra
index_ct_td	../include/spectra.h	/^  int index_ct_td; \/**< first index for type \\f$ C_l^{Td} \\f$(d_size values) *\/$/;"	m	struct:spectra
index_ct_te	../include/spectra.h	/^  int index_ct_te; \/**< index for type \\f$ C_l^{TE} \\f$*\/$/;"	m	struct:spectra
index_ct_tl	../include/spectra.h	/^  int index_ct_tl; \/**< first index for type \\f$ C_l^{Tl} \\f$(d_size values) *\/$/;"	m	struct:spectra
index_ct_tp	../include/spectra.h	/^  int index_ct_tp; \/**< index for type \\f$ C_l^{T\\phi} \\f$*\/$/;"	m	struct:spectra
index_ct_tt	../include/spectra.h	/^  int index_ct_tt; \/**< index for type \\f$ C_l^{TT} \\f$*\/$/;"	m	struct:spectra
index_helium_fullreio_fraction	../include/thermodynamics.h	/^  int index_helium_fullreio_fraction; \/**< helium full reionization fraction inferred from primordial helium fraction *\/$/;"	m	struct:reionization
index_helium_fullreio_redshift	../include/thermodynamics.h	/^  int index_helium_fullreio_redshift; \/**< helium full reionization redshift *\/$/;"	m	struct:reionization
index_helium_fullreio_width	../include/thermodynamics.h	/^  int index_helium_fullreio_width;    \/**< a width defining the duration of helium full reionization in the reio_camb scheme *\/$/;"	m	struct:reionization
index_ic	../include/perturbations.h	/^  int index_ic;			          \/**< index of initial condition (adiabatic\/isocurvature(s)\/...) *\/$/;"	m	struct:perturb_parameters_and_workspace
index_ic_ad	../include/perturbations.h	/^  int index_ic_ad; \/**< index value for adiabatic *\/$/;"	m	struct:perturbs
index_ic_bi	../include/perturbations.h	/^  int index_ic_bi; \/**< index value for baryon isocurvature *\/$/;"	m	struct:perturbs
index_ic_cdi	../include/perturbations.h	/^  int index_ic_cdi; \/**< index value for CDM isocurvature *\/$/;"	m	struct:perturbs
index_ic_nid	../include/perturbations.h	/^  int index_ic_nid; \/**< index value for neutrino density isocurvature *\/$/;"	m	struct:perturbs
index_ic_niv	../include/perturbations.h	/^  int index_ic_niv; \/**< index value for neutrino velocity isocurvature *\/$/;"	m	struct:perturbs
index_ic_ten	../include/perturbations.h	/^  int index_ic_ten; \/**< index value for unique possibility for tensors *\/$/;"	m	struct:perturbs
index_ikout	../include/perturbations.h	/^  int index_ikout;            \/**< index for output k value (when k_output_values is set) *\/$/;"	m	struct:perturb_workspace
index_in_a	../include/primordial.h	/^  int index_in_a;       \/**< scale factor *\/$/;"	m	struct:primordial
index_in_ah_im	../include/primordial.h	/^  int index_in_ah_im;   \/**< tensor perturbation (imaginary part) *\/$/;"	m	struct:primordial
index_in_ah_re	../include/primordial.h	/^  int index_in_ah_re;   \/**< tensor perturbation (real part) *\/$/;"	m	struct:primordial
index_in_dah_im	../include/primordial.h	/^  int index_in_dah_im;  \/**< tensor perturbation (imaginary part, time derivative) *\/$/;"	m	struct:primordial
index_in_dah_re	../include/primordial.h	/^  int index_in_dah_re;  \/**< tensor perturbation (real part, time derivative) *\/$/;"	m	struct:primordial
index_in_dksi_im	../include/primordial.h	/^  int index_in_dksi_im; \/**< Mukhanov variable (imaginary part, time derivative) *\/$/;"	m	struct:primordial
index_in_dksi_re	../include/primordial.h	/^  int index_in_dksi_re; \/**< Mukhanov variable (real part, time derivative) *\/$/;"	m	struct:primordial
index_in_dphi	../include/primordial.h	/^  int index_in_dphi;    \/**< its time derivative *\/$/;"	m	struct:primordial
index_in_ksi_im	../include/primordial.h	/^  int index_in_ksi_im;  \/**< Mukhanov variable (imaginary part) *\/$/;"	m	struct:primordial
index_in_ksi_re	../include/primordial.h	/^  int index_in_ksi_re;  \/**< Mukhanov variable (real part) *\/$/;"	m	struct:primordial
index_in_phi	../include/primordial.h	/^  int index_in_phi;     \/**< inflaton vev *\/$/;"	m	struct:primordial
index_k	../include/perturbations.h	/^  int index_k;			          \/**< index of wavenumber *\/$/;"	m	struct:perturb_parameters_and_workspace
index_k_output_values	../include/perturbations.h	/^   int * index_k_output_values; \/**< List of indices corresponding to k-values close to k_output_values for each mode.$/;"	m	struct:perturbs
index_lt_bb	../include/lensing.h	/^  int index_lt_bb; \/**< index for type \\f$ C_l^{BB} \\f$*\/$/;"	m	struct:lensing
index_lt_dd	../include/lensing.h	/^  int index_lt_dd; \/**< index for type \\f$ C_l^{dd} \\f$*\/$/;"	m	struct:lensing
index_lt_ee	../include/lensing.h	/^  int index_lt_ee; \/**< index for type \\f$ C_l^{EE} \\f$*\/$/;"	m	struct:lensing
index_lt_ll	../include/lensing.h	/^  int index_lt_ll; \/**< index for type \\f$ C_l^{dd} \\f$*\/$/;"	m	struct:lensing
index_lt_pp	../include/lensing.h	/^  int index_lt_pp; \/**< index for type \\f$ C_l^{\\phi\\phi} \\f$*\/$/;"	m	struct:lensing
index_lt_td	../include/lensing.h	/^  int index_lt_td; \/**< index for type \\f$ C_l^{Td} \\f$*\/$/;"	m	struct:lensing
index_lt_te	../include/lensing.h	/^  int index_lt_te; \/**< index for type \\f$ C_l^{TE} \\f$*\/$/;"	m	struct:lensing
index_lt_tl	../include/lensing.h	/^  int index_lt_tl; \/**< index for type \\f$ C_l^{Td} \\f$*\/$/;"	m	struct:lensing
index_lt_tp	../include/lensing.h	/^  int index_lt_tp; \/**< index for type \\f$ C_l^{T\\phi} \\f$*\/$/;"	m	struct:lensing
index_lt_tt	../include/lensing.h	/^  int index_lt_tt; \/**< index for type \\f$ C_l^{TT} \\f$*\/$/;"	m	struct:lensing
index_md	../include/perturbations.h	/^  int index_md;                   \/**< index of mode (scalar\/...\/vector\/tensor) *\/$/;"	m	struct:perturb_parameters_and_workspace
index_md_scalars	../include/nonlinear.h	/^  int index_md_scalars; \/**< set equal to psp->index_md_scalars$/;"	m	struct:nonlinear
index_md_scalars	../include/perturbations.h	/^  int index_md_scalars; \/**< index value for scalars *\/$/;"	m	struct:perturbs
index_md_scalars	../include/spectra.h	/^  int index_md_scalars; \/**< index for scalar modes *\/$/;"	m	struct:spectra
index_md_tensors	../include/perturbations.h	/^  int index_md_tensors; \/**< index value for tensors *\/$/;"	m	struct:perturbs
index_md_vectors	../include/perturbations.h	/^  int index_md_vectors; \/**< index value for vectors *\/$/;"	m	struct:perturbs
index_mt_V_prime	../include/perturbations.h	/^  int index_mt_V_prime;       \/**< derivative of Newtonian gauge vector metric perturbation V *\/$/;"	m	struct:perturb_workspace
index_mt_alpha	../include/perturbations.h	/^  int index_mt_alpha;         \/**< \\f$ \\alpha = (h' + 6 \\eta') \/ (2 k^2) \\f$ in synchronous gauge *\/$/;"	m	struct:perturb_workspace
index_mt_alpha_prime	../include/perturbations.h	/^  int index_mt_alpha_prime;   \/**< \\f$ \\alpha'\\f$ wrt conf. time) in synchronous gauge *\/$/;"	m	struct:perturb_workspace
index_mt_eta_prime	../include/perturbations.h	/^  int index_mt_eta_prime;     \/**< eta' (wrt conf. time) in synchronous gauge *\/$/;"	m	struct:perturb_workspace
index_mt_gw_prime_prime	../include/perturbations.h	/^  int index_mt_gw_prime_prime;\/**< second derivative wrt conformal time of gravitational wave field, often called h *\/$/;"	m	struct:perturb_workspace
index_mt_h_prime	../include/perturbations.h	/^  int index_mt_h_prime;       \/**< h' (wrt conf. time) in synchronous gauge *\/$/;"	m	struct:perturb_workspace
index_mt_h_prime_prime	../include/perturbations.h	/^  int index_mt_h_prime_prime; \/**< h'' (wrt conf. time) in synchronous gauge *\/$/;"	m	struct:perturb_workspace
index_mt_hv_prime_prime	../include/perturbations.h	/^  int index_mt_hv_prime_prime;\/**< Second derivative of Synchronous gauge vector metric perturbation \\f$ h_v\\f$ *\/$/;"	m	struct:perturb_workspace
index_mt_phi_prime	../include/perturbations.h	/^  int index_mt_phi_prime;     \/**< (d phi\/d conf.time) in longitudinal gauge *\/$/;"	m	struct:perturb_workspace
index_mt_psi	../include/perturbations.h	/^  int index_mt_psi;           \/**< psi in longitudinal gauge *\/$/;"	m	struct:perturb_workspace
index_pk_cb	../include/nonlinear.h	/^  int index_pk_cb; \/**< index of pk for cold dark matter plus baryons (defined only when has_pk_cb is TRUE *\/$/;"	m	struct:nonlinear
index_pk_cluster	../include/nonlinear.h	/^  int index_pk_cluster;    \/**< equal to index_pk_cb if it exists, otherwise to index_pk_m$/;"	m	struct:nonlinear
index_pk_eq_Omega_m	../include/nonlinear.h	/^  int index_pk_eq_Omega_m;          \/**< index of Omega_m in table pk_eq_w_and_Omega *\/$/;"	m	struct:nonlinear
index_pk_eq_w	../include/nonlinear.h	/^  int index_pk_eq_w;                \/**< index of w in table pk_eq_w_and_Omega *\/$/;"	m	struct:nonlinear
index_pk_m	../include/nonlinear.h	/^  int index_pk_m;  \/**< index of pk for matter (defined only when has_pk_m is TRUE) *\/$/;"	m	struct:nonlinear
index_pk_total	../include/nonlinear.h	/^  int index_pk_total;      \/**< always equal to index_pk_m$/;"	m	struct:nonlinear
index_pt_F0_dr	../include/perturbations.h	/^  int index_pt_F0_dr;$/;"	m	struct:perturb_vector
index_pt_Gamma_fld	../include/perturbations.h	/^  int index_pt_Gamma_fld;  \/**< unique dark energy dynamical variable in PPF case *\/$/;"	m	struct:perturb_vector
index_pt_V	../include/perturbations.h	/^  int index_pt_V;         \/**< vector metric perturbation V in Newtonian gauge *\/$/;"	m	struct:perturb_vector
index_pt_delta_b	../include/perturbations.h	/^  int index_pt_delta_b;   \/**< baryon density *\/$/;"	m	struct:perturb_vector
index_pt_delta_cdm	../include/perturbations.h	/^  int index_pt_delta_cdm; \/**< cdm density *\/$/;"	m	struct:perturb_vector
index_pt_delta_dcdm	../include/perturbations.h	/^  int index_pt_delta_dcdm; \/**< dcdm density *\/$/;"	m	struct:perturb_vector
index_pt_delta_fld	../include/perturbations.h	/^  int index_pt_delta_fld;  \/**< dark energy density in true fluid case *\/$/;"	m	struct:perturb_vector
index_pt_delta_g	../include/perturbations.h	/^  int index_pt_delta_g;   \/**< photon density *\/$/;"	m	struct:perturb_vector
index_pt_delta_idm_dr	../include/perturbations.h	/^  int index_pt_delta_idm_dr;\/**< idm_dr density *\/$/;"	m	struct:perturb_vector
index_pt_delta_idr	../include/perturbations.h	/^  int index_pt_delta_idr; \/**< density of interacting dark radiation *\/$/;"	m	struct:perturb_vector
index_pt_delta_ur	../include/perturbations.h	/^  int index_pt_delta_ur; \/**< density of ultra-relativistic neutrinos\/relics *\/$/;"	m	struct:perturb_vector
index_pt_eta	../include/perturbations.h	/^  int index_pt_eta;       \/**< synchronous gauge metric perturbation eta*\/$/;"	m	struct:perturb_vector
index_pt_gw	../include/perturbations.h	/^  int index_pt_gw;        \/**< tensor metric perturbation h (gravitational waves) *\/$/;"	m	struct:perturb_vector
index_pt_gwdot	../include/perturbations.h	/^  int index_pt_gwdot;     \/**< its time-derivative *\/$/;"	m	struct:perturb_vector
index_pt_hv_prime	../include/perturbations.h	/^  int index_pt_hv_prime;  \/**< vector metric perturbation h_v' in synchronous gauge *\/$/;"	m	struct:perturb_vector
index_pt_l3_g	../include/perturbations.h	/^  int index_pt_l3_g;      \/**< photon l=3 *\/$/;"	m	struct:perturb_vector
index_pt_l3_idr	../include/perturbations.h	/^  int index_pt_l3_idr;    \/**< l=3 of interacting dark radiation *\/$/;"	m	struct:perturb_vector
index_pt_l3_ur	../include/perturbations.h	/^  int index_pt_l3_ur;    \/**< l=3 of ultra-relativistic neutrinos\/relics *\/$/;"	m	struct:perturb_vector
index_pt_perturbed_recombination_delta_chi	../include/perturbations.h	/^  int index_pt_perturbed_recombination_delta_chi;		\/**< Inionization fraction perturbation *\/$/;"	m	struct:perturb_vector
index_pt_perturbed_recombination_delta_temp	../include/perturbations.h	/^  int index_pt_perturbed_recombination_delta_temp;		\/**< Gas temperature perturbation *\/$/;"	m	struct:perturb_vector
index_pt_phi	../include/perturbations.h	/^  int index_pt_phi;	      \/**< newtonian gauge metric perturbation phi *\/$/;"	m	struct:perturb_vector
index_pt_phi_prime_scf	../include/perturbations.h	/^  int index_pt_phi_prime_scf;  \/**< scalar field velocity *\/$/;"	m	struct:perturb_vector
index_pt_phi_scf	../include/perturbations.h	/^  int index_pt_phi_scf;  \/**< scalar field density *\/$/;"	m	struct:perturb_vector
index_pt_pol0_g	../include/perturbations.h	/^  int index_pt_pol0_g;    \/**< photon polarization, l=0 *\/$/;"	m	struct:perturb_vector
index_pt_pol1_g	../include/perturbations.h	/^  int index_pt_pol1_g;    \/**< photon polarization, l=1 *\/$/;"	m	struct:perturb_vector
index_pt_pol2_g	../include/perturbations.h	/^  int index_pt_pol2_g;    \/**< photon polarization, l=2 *\/$/;"	m	struct:perturb_vector
index_pt_pol3_g	../include/perturbations.h	/^  int index_pt_pol3_g;    \/**< photon polarization, l=3 *\/$/;"	m	struct:perturb_vector
index_pt_psi0_ncdm1	../include/perturbations.h	/^  int index_pt_psi0_ncdm1; \/**< first multipole of perturbation of first ncdm species, Psi_0 *\/$/;"	m	struct:perturb_vector
index_pt_shear_g	../include/perturbations.h	/^  int index_pt_shear_g;   \/**< photon shear *\/$/;"	m	struct:perturb_vector
index_pt_shear_idr	../include/perturbations.h	/^  int index_pt_shear_idr; \/**< shear of interacting dark radiation *\/$/;"	m	struct:perturb_vector
index_pt_shear_ur	../include/perturbations.h	/^  int index_pt_shear_ur; \/**< shear of ultra-relativistic neutrinos\/relics *\/$/;"	m	struct:perturb_vector
index_pt_theta_b	../include/perturbations.h	/^  int index_pt_theta_b;   \/**< baryon velocity *\/$/;"	m	struct:perturb_vector
index_pt_theta_cdm	../include/perturbations.h	/^  int index_pt_theta_cdm; \/**< cdm velocity *\/$/;"	m	struct:perturb_vector
index_pt_theta_dcdm	../include/perturbations.h	/^  int index_pt_theta_dcdm; \/**< dcdm velocity *\/$/;"	m	struct:perturb_vector
index_pt_theta_fld	../include/perturbations.h	/^  int index_pt_theta_fld;  \/**< dark energy velocity in true fluid case *\/$/;"	m	struct:perturb_vector
index_pt_theta_g	../include/perturbations.h	/^  int index_pt_theta_g;   \/**< photon velocity *\/$/;"	m	struct:perturb_vector
index_pt_theta_idm_dr	../include/perturbations.h	/^  int index_pt_theta_idm_dr;\/**< idm_dr velocity *\/$/;"	m	struct:perturb_vector
index_pt_theta_idr	../include/perturbations.h	/^  int index_pt_theta_idr; \/**< velocity of interacting dark radiation *\/$/;"	m	struct:perturb_vector
index_pt_theta_ur	../include/perturbations.h	/^  int index_pt_theta_ur; \/**< velocity of ultra-relativistic neutrinos\/relics *\/$/;"	m	struct:perturb_vector
index_q_flat_approximation	../include/transfer.h	/^  int index_q_flat_approximation; \/**< index of the first q value using the flat rescaling approximation *\/$/;"	m	struct:transfers
index_re_Tb	../include/thermodynamics.h	/^  int index_re_Tb;         \/**< baryon temperature \\f$ T_b \\f$ *\/$/;"	m	struct:recombination
index_re_Tb	../include/thermodynamics.h	/^  int index_re_Tb;         \/**< baryon temperature \\f$ T_b \\f$ *\/$/;"	m	struct:reionization
index_re_cb2	../include/thermodynamics.h	/^  int index_re_cb2;        \/**< squared baryon adiabatic sound speed \\f$ c_b^2 \\f$ *\/$/;"	m	struct:recombination
index_re_cb2	../include/thermodynamics.h	/^  int index_re_cb2;        \/**< squared baryon adiabatic sound speed \\f$ c_b^2 \\f$ *\/$/;"	m	struct:reionization
index_re_d3kappadz3	../include/thermodynamics.h	/^  int index_re_d3kappadz3; \/**< second derivative of previous quantity with respect to redshift *\/$/;"	m	struct:reionization
index_re_dkappadtau	../include/thermodynamics.h	/^  int index_re_dkappadtau; \/**< Thomson scattering rate \\f$ d \\kappa \/ d \\tau \\f$ (units 1\/Mpc) *\/$/;"	m	struct:recombination
index_re_dkappadtau	../include/thermodynamics.h	/^  int index_re_dkappadtau; \/**< Thomson scattering rate \\f$ d \\kappa \/ d \\tau\\f$ (units 1\/Mpc) *\/$/;"	m	struct:reionization
index_re_dkappadz	../include/thermodynamics.h	/^  int index_re_dkappadz;   \/**< Thomson scattering rate with respect to redshift \\f$ d \\kappa \/ d z\\f$ (units 1\/Mpc) *\/$/;"	m	struct:reionization
index_re_wb	../include/thermodynamics.h	/^  int index_re_wb;         \/**< baryon equation of state parameter \\f$ w_b \\f$ *\/$/;"	m	struct:recombination
index_re_wb	../include/thermodynamics.h	/^  int index_re_wb;         \/**< baryon equation of state parameter \\f$ w_b \\f$ *\/$/;"	m	struct:reionization
index_re_xe	../include/thermodynamics.h	/^  int index_re_xe;         \/**< ionization fraction \\f$ x_e \\f$ *\/$/;"	m	struct:recombination
index_re_xe	../include/thermodynamics.h	/^  int index_re_xe;         \/**< ionization fraction \\f$ x_e \\f$ *\/$/;"	m	struct:reionization
index_re_z	../include/thermodynamics.h	/^  int index_re_z;          \/**< redshift \\f$ z \\f$ *\/$/;"	m	struct:recombination
index_re_z	../include/thermodynamics.h	/^  int index_re_z;          \/**< redshift \\f$ z \\f$ *\/$/;"	m	struct:reionization
index_reco_when_reio_start	../include/thermodynamics.h	/^  int index_reco_when_reio_start; \/**< index of line in recombination table corresponding to first line of reionization table*\/$/;"	m	struct:reionization
index_reio_exponent	../include/thermodynamics.h	/^  int index_reio_exponent;  \/**< an exponent used in the function x_e(z) in the reio_camb scheme *\/$/;"	m	struct:reionization
index_reio_first_xe	../include/thermodynamics.h	/^  int index_reio_first_xe; \/**< ionization fraction at redshift first_z (inferred from recombination code) *\/$/;"	m	struct:reionization
index_reio_first_z	../include/thermodynamics.h	/^  int index_reio_first_z; \/**< redshift at which we start to impose reionization function *\/$/;"	m	struct:reionization
index_reio_redshift	../include/thermodynamics.h	/^  int index_reio_redshift;  \/**< hydrogen reionization redshift *\/$/;"	m	struct:reionization
index_reio_start	../include/thermodynamics.h	/^  int index_reio_start;     \/**< redshift above which hydrogen reionization neglected *\/$/;"	m	struct:reionization
index_reio_step_sharpness	../include/thermodynamics.h	/^  int index_reio_step_sharpness; \/**< sharpness of tanh jump *\/$/;"	m	struct:reionization
index_reio_width	../include/thermodynamics.h	/^  int index_reio_width;     \/**< a width defining the duration of hydrogen reionization in the reio_camb scheme *\/$/;"	m	struct:reionization
index_reio_xe_after	../include/thermodynamics.h	/^  int index_reio_xe_after;  \/**< ionization fraction after full reionization *\/$/;"	m	struct:reionization
index_reio_xe_before	../include/thermodynamics.h	/^  int index_reio_xe_before; \/**< ionization fraction at redshift 'reio_start' *\/$/;"	m	struct:reionization
index_symmetric_matrix	../include/common.h	75;"	d
index_tau_min_nl	../include/nonlinear.h	/^  int index_tau_min_nl;        \/**< index of smallest value of tau at which nonlinear corrections have been computed$/;"	m	struct:nonlinear
index_th_Tb	../include/thermodynamics.h	/^  int index_th_Tb;            \/**< baryon temperature \\f$ T_b \\f$ *\/$/;"	m	struct:thermo
index_th_Tidm_dr	../include/thermodynamics.h	/^  int index_th_Tidm_dr;       \/**< temperature of DM interacting with DR \\f$ T_{idm_dr} \\f$ *\/$/;"	m	struct:thermo
index_th_cb2	../include/thermodynamics.h	/^  int index_th_cb2;           \/**< squared baryon adiabatic sound speed \\f$ c_b^2 \\f$ *\/$/;"	m	struct:thermo
index_th_cidm_dr2	../include/thermodynamics.h	/^  int index_th_cidm_dr2;      \/**< interacting dark matter squared sound speed \\f$ c_{dm}^2 \\f$ *\/$/;"	m	struct:thermo
index_th_dcb2	../include/thermodynamics.h	/^  int index_th_dcb2;          \/**< derivative wrt conformal time of squared baryon sound speed \\f$ d [c_b^2] \/ d \\tau \\f$ (only computed if some non-minimal tight-coupling schemes is requested) *\/$/;"	m	struct:thermo
index_th_ddcb2	../include/thermodynamics.h	/^  int index_th_ddcb2;         \/**< second derivative wrt conformal time of squared baryon sound speed  \\f$ d^2 [c_b^2] \/ d \\tau^2 \\f$ (only computed if some non0-minimal tight-coupling schemes is requested) *\/$/;"	m	struct:thermo
index_th_dddkappa	../include/thermodynamics.h	/^  int index_th_dddkappa;      \/**< scattering rate second derivative \\f$ d^3 \\kappa \/ d \\tau^3 \\f$ *\/$/;"	m	struct:thermo
index_th_dddmu_idm_dr	../include/thermodynamics.h	/^  int index_th_dddmu_idm_dr;  \/**< second derivative of this scattering rate *\/$/;"	m	struct:thermo
index_th_ddg	../include/thermodynamics.h	/^  int index_th_ddg;           \/**< visibility function second derivative \\f$ (d^2 g \/ d \\tau^2) \\f$ *\/$/;"	m	struct:thermo
index_th_ddkappa	../include/thermodynamics.h	/^  int index_th_ddkappa;       \/**< scattering rate derivative \\f$ d^2 \\kappa \/ d \\tau^2 \\f$ *\/$/;"	m	struct:thermo
index_th_ddmu_idm_dr	../include/thermodynamics.h	/^  int index_th_ddmu_idm_dr;   \/**< derivative of this scattering rate *\/$/;"	m	struct:thermo
index_th_dg	../include/thermodynamics.h	/^  int index_th_dg;            \/**< visibility function derivative \\f$ (d g \/ d \\tau) \\f$ *\/$/;"	m	struct:thermo
index_th_dkappa	../include/thermodynamics.h	/^  int index_th_dkappa;        \/**< Thomson scattering rate \\f$ d \\kappa \/ d \\tau\\f$ (units 1\/Mpc) *\/$/;"	m	struct:thermo
index_th_dmu_idm_dr	../include/thermodynamics.h	/^  int index_th_dmu_idm_dr;    \/**< scattering rate of idr with idm_dr (i.e. idr opacity to idm_dr scattering) (units 1\/Mpc) *\/$/;"	m	struct:thermo
index_th_dmu_idr	../include/thermodynamics.h	/^  int index_th_dmu_idr;       \/**< idr self-interaction rate *\/$/;"	m	struct:thermo
index_th_exp_m_kappa	../include/thermodynamics.h	/^  int index_th_exp_m_kappa;   \/**< \\f$ exp^{-\\kappa} \\f$ *\/$/;"	m	struct:thermo
index_th_g	../include/thermodynamics.h	/^  int index_th_g;             \/**< visibility function \\f$ g = (d \\kappa \/ d \\tau) * exp^{-\\kappa} \\f$ *\/$/;"	m	struct:thermo
index_th_g_idm_dr	../include/thermodynamics.h	/^  int index_th_g_idm_dr;      \/**< visibility function of idm_idr *\/$/;"	m	struct:thermo
index_th_r_d	../include/thermodynamics.h	/^  int index_th_r_d;           \/**< simple analytic approximation to the photon comoving damping scale *\/$/;"	m	struct:thermo
index_th_rate	../include/thermodynamics.h	/^  int index_th_rate;          \/**< maximum variation rate of \\f$ exp^{-\\kappa}\\f$, g and \\f$ (d g \/ d \\tau) \\f$, used for computing integration step in perturbation module *\/$/;"	m	struct:thermo
index_th_tau_d	../include/thermodynamics.h	/^  int index_th_tau_d;         \/**< Baryon drag optical depth *\/$/;"	m	struct:thermo
index_th_tau_idm_dr	../include/thermodynamics.h	/^  int index_th_tau_idm_dr;    \/**< optical depth of idm_dr (due to interactions with idr) *\/$/;"	m	struct:thermo
index_th_tau_idr	../include/thermodynamics.h	/^  int index_th_tau_idr;       \/**< optical depth of idr (due to self-interactions) *\/$/;"	m	struct:thermo
index_th_wb	../include/thermodynamics.h	/^  int index_th_wb;            \/**< baryon equation of state parameter \\f$ w_b = k_B T_b \/ \\mu \\f$ *\/$/;"	m	struct:thermo
index_th_xe	../include/thermodynamics.h	/^  int index_th_xe;            \/**< ionization fraction \\f$ x_e \\f$ *\/$/;"	m	struct:thermo
index_tp_H_T_Nb_prime	../include/perturbations.h	/^  int index_tp_H_T_Nb_prime; \/**< index value for metric fluctuation H_T_Nb' *\/$/;"	m	struct:perturbs
index_tp_delta_b	../include/perturbations.h	/^  int index_tp_delta_b;   \/**< index value for delta of baryons *\/$/;"	m	struct:perturbs
index_tp_delta_cb	../include/perturbations.h	/^  int index_tp_delta_cb; \/**< index value for delta cb *\/$/;"	m	struct:perturbs
index_tp_delta_cdm	../include/perturbations.h	/^  int index_tp_delta_cdm; \/**< index value for delta of cold dark matter *\/$/;"	m	struct:perturbs
index_tp_delta_dcdm	../include/perturbations.h	/^  int index_tp_delta_dcdm;\/**< index value for delta of DCDM *\/$/;"	m	struct:perturbs
index_tp_delta_dr	../include/perturbations.h	/^  int index_tp_delta_dr; \/**< index value for delta of decay radiation *\/$/;"	m	struct:perturbs
index_tp_delta_fld	../include/perturbations.h	/^  int index_tp_delta_fld;  \/**< index value for delta of dark energy *\/$/;"	m	struct:perturbs
index_tp_delta_g	../include/perturbations.h	/^  int index_tp_delta_g;   \/**< index value for delta of gammas *\/$/;"	m	struct:perturbs
index_tp_delta_idm_dr	../include/perturbations.h	/^  int index_tp_delta_idm_dr;\/**< index value for delta of interacting dark matter (with dr)*\/$/;"	m	struct:perturbs
index_tp_delta_idr	../include/perturbations.h	/^  int index_tp_delta_idr; \/**< index value for delta of interacting dark radiation *\/$/;"	m	struct:perturbs
index_tp_delta_m	../include/perturbations.h	/^  int index_tp_delta_m; \/**< index value for matter density fluctuation *\/$/;"	m	struct:perturbs
index_tp_delta_ncdm1	../include/perturbations.h	/^  int index_tp_delta_ncdm1; \/**< index value for delta of first non-cold dark matter species (e.g. massive neutrinos) *\/$/;"	m	struct:perturbs
index_tp_delta_scf	../include/perturbations.h	/^  int index_tp_delta_scf;  \/**< index value for delta of scalar field *\/$/;"	m	struct:perturbs
index_tp_delta_tot	../include/perturbations.h	/^  int index_tp_delta_tot; \/**< index value for total density fluctuation *\/$/;"	m	struct:perturbs
index_tp_delta_ur	../include/perturbations.h	/^  int index_tp_delta_ur; \/**< index value for delta of ultra-relativistic neutrinos\/relics *\/$/;"	m	struct:perturbs
index_tp_eta	../include/perturbations.h	/^  int index_tp_eta;          \/**< index value for metric fluctuation eta *\/$/;"	m	struct:perturbs
index_tp_eta_prime	../include/perturbations.h	/^  int index_tp_eta_prime;    \/**< index value for metric fluctuation eta' *\/$/;"	m	struct:perturbs
index_tp_h	../include/perturbations.h	/^  int index_tp_h;            \/**< index value for metric fluctuation h *\/$/;"	m	struct:perturbs
index_tp_h_prime	../include/perturbations.h	/^  int index_tp_h_prime;      \/**< index value for metric fluctuation h' *\/$/;"	m	struct:perturbs
index_tp_k2gamma_Nb	../include/perturbations.h	/^  int index_tp_k2gamma_Nb;   \/**< index value for metric fluctuation gamma times k^2 in Nbody gauge *\/$/;"	m	struct:perturbs
index_tp_p	../include/perturbations.h	/^  int index_tp_p; \/**< index value for polarization *\/$/;"	m	struct:perturbs
index_tp_perturbed_recombination_delta_chi	../include/perturbations.h	/^  int index_tp_perturbed_recombination_delta_chi;		\/**< Inionization fraction perturbation *\/$/;"	m	struct:perturbs
index_tp_perturbed_recombination_delta_temp	../include/perturbations.h	/^  int index_tp_perturbed_recombination_delta_temp;		\/**< Gas temperature perturbation *\/$/;"	m	struct:perturbs
index_tp_phi	../include/perturbations.h	/^  int index_tp_phi;          \/**< index value for metric fluctuation phi *\/$/;"	m	struct:perturbs
index_tp_phi_plus_psi	../include/perturbations.h	/^  int index_tp_phi_plus_psi; \/**< index value for metric fluctuation phi+psi *\/$/;"	m	struct:perturbs
index_tp_phi_prime	../include/perturbations.h	/^  int index_tp_phi_prime;    \/**< index value for metric fluctuation phi' *\/$/;"	m	struct:perturbs
index_tp_psi	../include/perturbations.h	/^  int index_tp_psi;          \/**< index value for metric fluctuation psi *\/$/;"	m	struct:perturbs
index_tp_t0	../include/perturbations.h	/^  int index_tp_t0; \/**< index value for temperature (j=0 term) *\/$/;"	m	struct:perturbs
index_tp_t1	../include/perturbations.h	/^  int index_tp_t1; \/**< index value for temperature (j=1 term) *\/$/;"	m	struct:perturbs
index_tp_t2	../include/perturbations.h	/^  int index_tp_t2; \/**< index value for temperature (j=2 term) *\/$/;"	m	struct:perturbs
index_tp_theta_b	../include/perturbations.h	/^  int index_tp_theta_b;     \/**< index value for theta of baryons *\/$/;"	m	struct:perturbs
index_tp_theta_cb	../include/perturbations.h	/^  int index_tp_theta_cb;    \/**< index value for theta cb *\/$/;"	m	struct:perturbs
index_tp_theta_cdm	../include/perturbations.h	/^  int index_tp_theta_cdm;   \/**< index value for theta of cold dark matter *\/$/;"	m	struct:perturbs
index_tp_theta_dcdm	../include/perturbations.h	/^  int index_tp_theta_dcdm;  \/**< index value for theta of DCDM *\/$/;"	m	struct:perturbs
index_tp_theta_dr	../include/perturbations.h	/^  int index_tp_theta_dr;    \/**< index value for F1 of decay radiation *\/$/;"	m	struct:perturbs
index_tp_theta_fld	../include/perturbations.h	/^  int index_tp_theta_fld;   \/**< index value for theta of dark energy *\/$/;"	m	struct:perturbs
index_tp_theta_g	../include/perturbations.h	/^  int index_tp_theta_g;     \/**< index value for theta of gammas *\/$/;"	m	struct:perturbs
index_tp_theta_idm_dr	../include/perturbations.h	/^  int index_tp_theta_idm_dr;\/**< index value for theta of interacting dark matter (with dr)*\/$/;"	m	struct:perturbs
index_tp_theta_idr	../include/perturbations.h	/^  int index_tp_theta_idr;   \/**< index value for theta of interacting dark radiation *\/$/;"	m	struct:perturbs
index_tp_theta_m	../include/perturbations.h	/^  int index_tp_theta_m;     \/**< index value for matter velocity fluctuation *\/$/;"	m	struct:perturbs
index_tp_theta_ncdm1	../include/perturbations.h	/^  int index_tp_theta_ncdm1; \/**< index value for theta of first non-cold dark matter species (e.g. massive neutrinos) *\/$/;"	m	struct:perturbs
index_tp_theta_scf	../include/perturbations.h	/^  int index_tp_theta_scf;   \/**< index value for theta of scalar field *\/$/;"	m	struct:perturbs
index_tp_theta_tot	../include/perturbations.h	/^  int index_tp_theta_tot;   \/**< index value for total velocity fluctuation *\/$/;"	m	struct:perturbs
index_tp_theta_ur	../include/perturbations.h	/^  int index_tp_theta_ur;    \/**< index value for theta of ultra-relativistic neutrinos\/relics *\/$/;"	m	struct:perturbs
index_tt_b	../include/transfer.h	/^  int index_tt_b;       \/**< index for transfer type = B-polarization *\/$/;"	m	struct:transfers
index_tt_d0	../include/transfer.h	/^  int index_tt_d0;      \/**< index for first bin of transfer type = doppler effect for of number count (j=0 term) *\/$/;"	m	struct:transfers
index_tt_d1	../include/transfer.h	/^  int index_tt_d1;      \/**< index for first bin of transfer type = doppler effect for of number count (j=1 term) *\/$/;"	m	struct:transfers
index_tt_density	../include/transfer.h	/^  int index_tt_density; \/**< index for first bin of transfer type = matter density *\/$/;"	m	struct:transfers
index_tt_e	../include/transfer.h	/^  int index_tt_e;       \/**< index for transfer type = E-polarization *\/$/;"	m	struct:transfers
index_tt_lcmb	../include/transfer.h	/^  int index_tt_lcmb;    \/**< index for transfer type = CMB lensing *\/$/;"	m	struct:transfers
index_tt_lensing	../include/transfer.h	/^  int index_tt_lensing; \/**< index for first bin of transfer type = galaxy lensing *\/$/;"	m	struct:transfers
index_tt_nc_g1	../include/transfer.h	/^  int index_tt_nc_g1;   \/**< index for first bin of transfer type = gravity term G1 for of number count *\/$/;"	m	struct:transfers
index_tt_nc_g2	../include/transfer.h	/^  int index_tt_nc_g2;   \/**< index for first bin of transfer type = gravity term G2 for of number count *\/$/;"	m	struct:transfers
index_tt_nc_g3	../include/transfer.h	/^  int index_tt_nc_g3;   \/**< index for first bin of transfer type = gravity term G3 for of number count *\/$/;"	m	struct:transfers
index_tt_nc_g4	../include/transfer.h	/^  int index_tt_nc_g4;   \/**< index for first bin of transfer type = gravity term G3 for of number count *\/$/;"	m	struct:transfers
index_tt_nc_g5	../include/transfer.h	/^  int index_tt_nc_g5;   \/**< index for first bin of transfer type = gravity term G3 for of number count *\/$/;"	m	struct:transfers
index_tt_nc_lens	../include/transfer.h	/^  int index_tt_nc_lens; \/**< index for first bin of transfer type = lensing for of number count *\/$/;"	m	struct:transfers
index_tt_rsd	../include/transfer.h	/^  int index_tt_rsd;     \/**< index for first bin of transfer type = redshift space distortion of number count *\/$/;"	m	struct:transfers
index_tt_t0	../include/transfer.h	/^  int index_tt_t0;      \/**< index for transfer type = temperature (j=0 term) *\/$/;"	m	struct:transfers
index_tt_t1	../include/transfer.h	/^  int index_tt_t1;      \/**< index for transfer type = temperature (j=1 term) *\/$/;"	m	struct:transfers
index_tt_t2	../include/transfer.h	/^  int index_tt_t2;      \/**< index for transfer type = temperature (j=2 term) *\/$/;"	m	struct:transfers
inflation_H	../include/primordial.h	/^  inflation_H,$/;"	e	enum:primordial_spectrum_type
inflation_V	../include/primordial.h	/^  inflation_V,$/;"	e	enum:primordial_spectrum_type
inflation_V_end	../include/primordial.h	/^  inflation_V_end,$/;"	e	enum:primordial_spectrum_type
inflation_module_behavior	../include/primordial.h	/^enum inflation_module_behavior {$/;"	g
initialise_HIS_cache	../include/transfer.h	/^  short initialise_HIS_cache; \/**< only true if we are using CLASS for setting up a cache of HIS structures *\/$/;"	m	struct:transfers
initialize_generic_integrator	../tools/dei_rkck.c	/^int initialize_generic_integrator($/;"	f
initialize_jacobian	../tools/evolver_ndf15.c	/^int initialize_jacobian(struct jacobian *jac, int neq, ErrorMsg error_message){$/;"	f
initialize_numjac_workspace	../tools/evolver_ndf15.c	/^int initialize_numjac_workspace(struct numjac_workspace * nj_ws,int neq, ErrorMsg error_message){$/;"	f
input_auxillary_target_conditions	input.c	/^int input_auxillary_target_conditions(struct file_content * pfc,$/;"	f
input_default_params	input.c	/^int input_default_params($/;"	f
input_default_precision	input.c	/^int input_default_precision ( struct precision * ppr ) {$/;"	f
input_find_root	input.c	/^int input_find_root(double *xzero,$/;"	f
input_fzerofun_1d	input.c	/^int input_fzerofun_1d(double input,$/;"	f
input_get_guess	input.c	/^int input_get_guess(double *xguess,$/;"	f
input_init	input.c	/^int input_init($/;"	f
input_init_from_arguments	input.c	/^int input_init_from_arguments($/;"	f
input_pprpba	../include/input.h	/^struct input_pprpba {$/;"	s
input_prepare_pk_eq	input.c	/^int input_prepare_pk_eq($/;"	f
input_read_parameters	input.c	/^int input_read_parameters($/;"	f
input_read_precisions	input.c	/^int input_read_precisions($/;"	f
input_try_unknown_parameters	input.c	/^int input_try_unknown_parameters(double * unknown_parameter,$/;"	f
integrate	../include/primordial.h	/^  enum integration_direction integrate;$/;"	m	struct:primordial_inflation_parameters_and_workspace	typeref:enum:primordial_inflation_parameters_and_workspace::integration_direction
integrated_growth	nonlinear_hmcode.c	/^double integrated_growth(double a){$/;"	f
integration_direction	../include/primordial.h	/^enum integration_direction {$/;"	g
inter_closeby	../include/background.h	/^  short inter_closeby; \/**< flag for calling background_at_eta and find position in interpolation table starting from previous position in previous call *\/$/;"	m	struct:background
inter_closeby	../include/thermodynamics.h	/^  short inter_closeby; \/**< flag for calling thermodynamics_at_z and find position in interpolation table starting from previous position in previous call *\/$/;"	m	struct:thermo
inter_mode	../include/perturbations.h	/^  short inter_mode;	\/**< flag defining the method used for interpolation background\/thermo quantities tables *\/$/;"	m	struct:perturb_workspace
inter_normal	../include/background.h	/^  short inter_normal;  \/**< flag for calling background_at_eta and find position in interpolation table normally *\/$/;"	m	struct:background
inter_normal	../include/thermodynamics.h	/^  short inter_normal;  \/**< flag for calling thermodynamics_at_z and find position in interpolation table normally *\/$/;"	m	struct:thermo
interp_from_dif	../tools/evolver_ndf15.c	/^int interp_from_dif(double tinterp,$/;"	f
interp_from_difold	../tools/evolver_ndf15.c	/^int interp_from_difold(double tinterp,double tnew,double *ynew,double h,double **dif,int k, double *yinterp,$/;"	f
interpolated_sources	../include/transfer.h	/^  double * interpolated_sources; \/**< interpolated_sources[index_tau]:$/;"	m	struct:transfer_workspace
is_non_zero	../include/nonlinear.h	/^  short * is_non_zero; \/**< for a given mode, is_non_zero[index_md][index_ic1_ic2] is set to true if the pair of initial conditions (index_ic1, index_ic2) are statistically correlated, or to false if they are uncorrelated *\/$/;"	m	struct:nonlinear
is_non_zero	../include/primordial.h	/^  short ** is_non_zero; \/**< is_non_zero[index_md][index_ic1_ic2] set to false if pair$/;"	m	struct:primordial
is_non_zero	../include/spectra.h	/^  short ** is_non_zero; \/**< for a given mode, is_non_zero[index_md][index_ic1_ic2] is set to true if the pair of initial conditions (index_ic1, index_ic2) are statistically correlated, or to false if they are uncorrelated *\/$/;"	m	struct:spectra
j	../include/hermite3_interpolation_csource.h	/^int j, nx, current_border_idx=0;$/;"	v
j	../include/hermite4_interpolation_csource.h	/^int j, nx, current_border_idx=0;$/;"	v
j	../include/hermite6_interpolation_csource.h	/^int K, l, j, nx, current_border_idx=0;$/;"	v
j	../tools/hermite3_interpolation_csource.h	/^int j, nx, current_border_idx=0;$/;"	v
j	../tools/hermite4_interpolation_csource.h	/^int j, nx, current_border_idx=0;$/;"	v
j	../tools/hermite6_interpolation_csource.h	/^int K, l, j, nx, current_border_idx=0;$/;"	v
jacobian	../include/evolver_ndf15.h	/^struct jacobian{$/;"	s
jacvec	../include/evolver_ndf15.h	/^	double *jacvec; \/*Stores experience gained from subsequent calls *\/$/;"	m	struct:jacobian
k	../include/nonlinear.h	/^  double * k;      \/**< k[index_k] = list of k values *\/$/;"	m	struct:nonlinear
k	../include/perturbations.h	/^  double ** k;      \/**< k[index_md][index_k] = list of values *\/$/;"	m	struct:perturbs
k	../include/perturbations.h	/^  double k;			              \/**< current value of wavenumber in 1\/Mpc *\/$/;"	m	struct:perturb_parameters_and_workspace
k	../include/primordial.h	/^  double k;$/;"	m	struct:primordial_inflation_parameters_and_workspace
k	../include/transfer.h	/^  double ** k; \/**< list of wavenumber values for each requested mode, k[index_md][index_q]. In flat universes k=q. In non-flat universes q and k differ through q2 = k2 + K(1+m), where m=0,1,2 for scalar, vector, tensor. q should be used throughout the transfer module, excepted when interpolating or manipulating the source functions S(k,tau): for a given value of q this should be done in k(q). *\/$/;"	m	struct:transfers
k_max	../include/perturbations.h	/^  double k_max;     \/**< maximum value (over all modes) *\/$/;"	m	struct:perturbs
k_max_for_pk	../include/perturbations.h	/^  double k_max_for_pk; \/**< maximum value of k in 1\/Mpc in P(k) (if \\f$ C_l \\f$'s also requested, overseeded by value kmax inferred from l_scalar_max if it is bigger) *\/$/;"	m	struct:perturbs
k_min	../include/perturbations.h	/^  double k_min;     \/**< minimum value (over all modes) *\/$/;"	m	struct:perturbs
k_nl	../include/nonlinear.h	/^  double ** k_nl;              \/**< wavenumber at which non-linear corrections become important,$/;"	m	struct:nonlinear
k_output_values	../include/perturbations.h	/^  double k_output_values[_MAX_NUMBER_OF_K_FILES_];    \/**< List of k values where perturbation output is requested. *\/$/;"	m	struct:perturbs
k_output_values_num	../include/perturbations.h	/^  int k_output_values_num;       \/**< Number of perturbation outputs (default=0) *\/$/;"	m	struct:perturbs
k_pivot	../include/primordial.h	/^  double k_pivot; \/**< pivot scale in \\f$ Mpc^{-1} \\f$ *\/$/;"	m	struct:primordial
k_size	../include/nonlinear.h	/^  int k_size;      \/**< k_size = total number of k values *\/$/;"	m	struct:nonlinear
k_size	../include/perturbations.h	/^  int * k_size;     \/**< k_size[index_md] = total number of k$/;"	m	struct:perturbs
k_size_cl	../include/perturbations.h	/^  int * k_size_cl;  \/**< k_size_cl[index_md] number of k values used$/;"	m	struct:perturbs
k_size_cmb	../include/perturbations.h	/^  int * k_size_cmb;  \/**< k_size_cmb[index_md] number of k values used$/;"	m	struct:perturbs
k_size_extra	../include/nonlinear.h	/^  int k_size_extra;\/** total number of k values of extrapolated k array (high k)*\/$/;"	m	struct:nonlinear
key	../cpp/ClassEngine.hh	/^  inline string key(const unsigned& i) const {return pars[i].first;}$/;"	f	class:ClassParams
ksi_ncdm	../include/background.h	/^  double * ksi_ncdm, ksi_ncdm_default;  \/**< list of 2nd parameters in$/;"	m	struct:background
ksi_ncdm_default	../include/background.h	/^  double * ksi_ncdm, ksi_ncdm_default;  \/**< list of 2nd parameters in$/;"	m	struct:background
l	../include/hermite3_interpolation_csource.h	/^int l = pHIS->l[lnum];$/;"	v
l	../include/hermite4_interpolation_csource.h	/^int l = pHIS->l[lnum];$/;"	v
l	../include/hermite6_interpolation_csource.h	/^int K, l, j, nx, current_border_idx=0;$/;"	v
l	../include/hyperspherical.h	/^   int l;$/;"	m	struct:WKB_parameters
l	../include/hyperspherical.h	/^  int *l;             \/\/Vector of l values stored$/;"	m	struct:HypersphericalInterpolationStructure
l	../include/lensing.h	/^  double * l;       \/**< table of multipole values l[index_l] *\/$/;"	m	struct:lensing
l	../include/spectra.h	/^  double * l;    \/**< list of multipole values l[index_l] *\/$/;"	m	struct:spectra
l	../include/transfer.h	/^  int * l;        \/**< list of multipole values l[index_l] *\/$/;"	m	struct:transfers
l	../tools/hermite3_interpolation_csource.h	/^int l = pHIS->l[lnum];$/;"	v
l	../tools/hermite4_interpolation_csource.h	/^int l = pHIS->l[lnum];$/;"	v
l	../tools/hermite6_interpolation_csource.h	/^int K, l, j, nx, current_border_idx=0;$/;"	v
l_lensed_max	../include/lensing.h	/^  int l_lensed_max;    \/**< last multipole at which lensed spectra are computed *\/$/;"	m	struct:lensing
l_lss_max	../include/perturbations.h	/^  int l_lss_max; \/**< maximum l value for LSS \\f$ C_l \\f$'s (density and lensing potential in  bins) *\/$/;"	m	struct:perturbs
l_max	../include/spectra.h	/^  int * l_max;    \/**< last multipole (given as an input) at which$/;"	m	struct:spectra
l_max_ct	../include/spectra.h	/^  int ** l_max_ct;    \/**< last multipole (given as an input) at which$/;"	m	struct:spectra
l_max_dr	../include/perturbations.h	/^  int l_max_dr;          \/**< max momentum in Boltzmann hierarchy for dr) *\/$/;"	m	struct:perturb_vector
l_max_g	../include/perturbations.h	/^  int l_max_g;            \/**< max momentum in Boltzmann hierarchy (at least 3) *\/$/;"	m	struct:perturb_vector
l_max_idr	../include/perturbations.h	/^  int l_max_idr;          \/**< max momentum in Boltzmann hierarchy (at least 3) for interacting dark radiation *\/$/;"	m	struct:perturb_vector
l_max_lt	../include/lensing.h	/^  int * l_max_lt;    \/**< last multipole (given as an input) at which$/;"	m	struct:lensing
l_max_ncdm	../include/perturbations.h	/^  int* l_max_ncdm;	\/**< mutipole l at which Boltzmann hierarchy is truncated (for each ncdm species) *\/$/;"	m	struct:perturb_vector
l_max_pol_g	../include/perturbations.h	/^  int l_max_pol_g;        \/**< max momentum in Boltzmann hierarchy (at least 3) *\/$/;"	m	struct:perturb_vector
l_max_scalars	../cpp/ClassEngine.hh	/^  inline int l_max_scalars() const {return _lmax;}$/;"	f	class:ClassEngine
l_max_tot	../include/spectra.h	/^  int l_max_tot; \/**< last multipole (given as an input) at which$/;"	m	struct:spectra
l_max_ur	../include/perturbations.h	/^  int l_max_ur;          \/**< max momentum in Boltzmann hierarchy (at least 3) *\/$/;"	m	struct:perturb_vector
l_scalar_max	../include/perturbations.h	/^  int l_scalar_max; \/**< maximum l value for CMB scalars \\f$ C_l \\f$'s *\/$/;"	m	struct:perturbs
l_size	../include/hyperspherical.h	/^  int l_size;                \/\/Number of l values$/;"	m	struct:HypersphericalInterpolationStructure
l_size	../include/lensing.h	/^  int l_size;       \/**< number of l values *\/$/;"	m	struct:lensing
l_size	../include/spectra.h	/^  int * l_size;   \/**< number of multipole values for each requested mode, l_size[index_md] *\/$/;"	m	struct:spectra
l_size	../include/transfer.h	/^  int * l_size;   \/**< number of multipole values for each requested mode, l_size[index_md] *\/$/;"	m	struct:transfers
l_size	../include/transfer.h	/^  int l_size;        \/**< number of l values *\/$/;"	m	struct:transfer_workspace
l_size_max	../include/spectra.h	/^  int l_size_max; \/**< greatest of all l_size[index_md] *\/$/;"	m	struct:spectra
l_size_max	../include/transfer.h	/^  int l_size_max; \/**< greatest of all l_size[index_md] *\/$/;"	m	struct:transfers
l_size_tt	../include/transfer.h	/^  int ** l_size_tt;  \/**< number of multipole values for which we effectively compute the transfer function,l_size_tt[index_md][index_tt] *\/$/;"	m	struct:transfers
l_tensor_max	../include/perturbations.h	/^  int l_tensor_max; \/**< maximum l value for CMB tensors \\f$ C_l \\f$'s *\/$/;"	m	struct:perturbs
l_unlensed_max	../include/lensing.h	/^  int l_unlensed_max;    \/**< last multipole in all calculations (same as in spectra module)*\/$/;"	m	struct:lensing
l_vector_max	../include/perturbations.h	/^  int l_vector_max; \/**< maximum l value for CMB vectors \\f$ C_l \\f$'s *\/$/;"	m	struct:perturbs
last_index	../include/background.h	/^  int last_index;$/;"	m	struct:background_parameters_for_distributions
last_index_back	../include/perturbations.h	/^  int last_index_back;   \/**< the background interpolation function background_at_tau() keeps memory of the last point called through this index *\/$/;"	m	struct:perturb_workspace
last_index_thermo	../include/perturbations.h	/^  int last_index_thermo; \/**< the thermodynamics interpolation function thermodynamics_at_z() keeps memory of the last point called through this index *\/$/;"	m	struct:perturb_workspace
late_sources	../include/perturbations.h	/^  double *** late_sources; \/**< Pointer towards the source interpolation table$/;"	m	struct:perturbs
lcmb_pivot	../include/transfer.h	/^  double lcmb_pivot;   \/**< if lcmb_tilt non-zero, corresponding pivot$/;"	m	struct:transfers
lcmb_rescale	../include/transfer.h	/^  double lcmb_rescale; \/**< normally set to one, can be used$/;"	m	struct:transfers
lcmb_tilt	../include/transfer.h	/^  double lcmb_tilt;    \/**< normally set to zero, can be used$/;"	m	struct:transfers
le	../cpp/ClassEngine.hh	/^  struct lensing le;          \/* for lensed spectra *\/$/;"	m	class:ClassEngine	typeref:struct:ClassEngine::lensing
leaf_childs	../include/quadrature.h	/^  int leaf_childs;\/* Number of leafs under current node. 1 means that the node is a leaf. *\/$/;"	m	struct:adaptive_integration_tree_node
leaf_count	../tools/quadrature.c	/^int leaf_count(qss_node *node){$/;"	f
left	../include/quadrature.h	/^  struct  adaptive_integration_tree_node *left, *right;	\/* Pointer to left child. *\/$/;"	m	struct:adaptive_integration_tree_node	typeref:struct:adaptive_integration_tree_node::adaptive_integration_tree_node
left_border	../include/hermite3_interpolation_csource.h	/^double left_border, right_border, next_border;$/;"	v
left_border	../include/hermite4_interpolation_csource.h	/^double left_border, right_border, next_border;$/;"	v
left_border	../include/hermite6_interpolation_csource.h	/^double left_border, right_border, next_border;$/;"	v
left_border	../tools/hermite3_interpolation_csource.h	/^double left_border, right_border, next_border;$/;"	v
left_border	../tools/hermite4_interpolation_csource.h	/^double left_border, right_border, next_border;$/;"	v
left_border	../tools/hermite6_interpolation_csource.h	/^double left_border, right_border, next_border;$/;"	v
lensing	../include/lensing.h	/^struct lensing {$/;"	s
lensing_addback_cl_ee_bb	lensing.c	/^int lensing_addback_cl_ee_bb($/;"	f
lensing_addback_cl_te	lensing.c	/^int lensing_addback_cl_te($/;"	f
lensing_addback_cl_tt	lensing.c	/^int lensing_addback_cl_tt($/;"	f
lensing_cl_at_l	lensing.c	/^int lensing_cl_at_l($/;"	f
lensing_d00	lensing.c	/^int lensing_d00($/;"	f
lensing_d11	lensing.c	/^int lensing_d11($/;"	f
lensing_d1m1	lensing.c	/^int lensing_d1m1($/;"	f
lensing_d20	lensing.c	/^int lensing_d20($/;"	f
lensing_d22	lensing.c	/^int lensing_d22($/;"	f
lensing_d2m2	lensing.c	/^int lensing_d2m2($/;"	f
lensing_d31	lensing.c	/^int lensing_d31($/;"	f
lensing_d3m1	lensing.c	/^int lensing_d3m1($/;"	f
lensing_d3m3	lensing.c	/^int lensing_d3m3($/;"	f
lensing_d40	lensing.c	/^int lensing_d40($/;"	f
lensing_d4m2	lensing.c	/^int lensing_d4m2($/;"	f
lensing_d4m4	lensing.c	/^int lensing_d4m4($/;"	f
lensing_free	lensing.c	/^int lensing_free($/;"	f
lensing_indices	lensing.c	/^int lensing_indices($/;"	f
lensing_init	lensing.c	/^int lensing_init($/;"	f
lensing_lensed_cl_ee_bb	lensing.c	/^int lensing_lensed_cl_ee_bb($/;"	f
lensing_lensed_cl_te	lensing.c	/^int lensing_lensed_cl_te($/;"	f
lensing_lensed_cl_tt	lensing.c	/^int lensing_lensed_cl_tt($/;"	f
lensing_verbose	../include/lensing.h	/^  short lensing_verbose; \/**< flag regulating the amount of information sent to standard output (none if set to zero) *\/$/;"	m	struct:lensing
linear	../include/primordial.h	/^  linear,$/;"	e	enum:linear_or_logarithmic
linear_or_logarithmic	../include/primordial.h	/^enum linear_or_logarithmic {$/;"	g
lmax	../cpp/Engine.hh	/^  inline int lmax() {return _lmax;}$/;"	f	class:Engine
ln_aH_ratio	../include/primordial.h	/^  ln_aH_ratio,$/;"	e	enum:phi_pivot_methods
ln_aH_ratio_auto	../include/primordial.h	/^  ln_aH_ratio_auto$/;"	e	enum:phi_pivot_methods
ln_k	../include/nonlinear.h	/^  double * ln_k;   \/**< ln_k[index_k] = list of log(k) values *\/$/;"	m	struct:nonlinear
ln_pk_ic_l	../include/nonlinear.h	/^  double ** ln_pk_ic_l;   \/**< Matter power spectrum (linear).$/;"	m	struct:nonlinear
ln_pk_l	../include/nonlinear.h	/^  double ** ln_pk_l;   \/**< Total matter power spectrum summed over initial conditions (linear).$/;"	m	struct:nonlinear
ln_pk_nl	../include/nonlinear.h	/^  double ** ln_pk_nl;   \/**< Total matter power spectrum summed over initial conditions (nonlinear).$/;"	m	struct:nonlinear
ln_tau	../include/nonlinear.h	/^  double * ln_tau;     \/**< log(tau) array, only needed if user wants$/;"	m	struct:nonlinear
ln_tau	../include/perturbations.h	/^  double * ln_tau;     \/**< log of the arrau tau_sampling, covering only the final time range required for the output of$/;"	m	struct:perturbs
ln_tau_size	../include/nonlinear.h	/^  int ln_tau_size;     \/**< number of values in this array *\/$/;"	m	struct:nonlinear
ln_tau_size	../include/perturbations.h	/^  int ln_tau_size;     \/**< number of values in this array *\/$/;"	m	struct:perturbs
lnk	../include/primordial.h	/^  double * lnk;    \/**< list of ln(k) values lnk[index_k] *\/$/;"	m	struct:primordial
lnk_size	../include/primordial.h	/^  int lnk_size;    \/**< number of ln(k) values *\/$/;"	m	struct:primordial
lnpk	../include/primordial.h	/^  double ** lnpk;  \/**< depends on indices index_md, index_ic1, index_ic2, index_k as:$/;"	m	struct:primordial
logarithmic	../include/primordial.h	/^  logarithmic$/;"	e	enum:linear_or_logarithmic
logj	../include/evolver_ndf15.h	/^	int * logj;$/;"	m	struct:numjac_workspace
long_info	../include/background.h	/^  short long_info;   \/**< flag for calling background_at_eta and return all information *\/$/;"	m	struct:background
lt_size	../include/lensing.h	/^  int lt_size; \/**< number of \\f$ C_l\\f$ types requested *\/$/;"	m	struct:lensing
lubksb	../tools/evolver_ndf15.c	/^int lubksb(double **a, int n, int *indx, double b[]){$/;"	f
ludcmp	../tools/evolver_ndf15.c	/^int ludcmp(double **a, int n, int *indx, double *d, double *vv){$/;"	f
luidx	../include/evolver_ndf15.h	/^	int *luidx;$/;"	m	struct:jacobian
lxlp1	../include/hermite3_interpolation_csource.h	/^double lxlp1 = l*(l+1.0);$/;"	v
lxlp1	../include/hermite4_interpolation_csource.h	/^double lxlp1 = l*(l+1.0);$/;"	v
lxlp1	../include/hermite6_interpolation_csource.h	/^double xmin, xmax, deltax, deltax2, lxlp1;$/;"	v
lxlp1	../tools/hermite3_interpolation_csource.h	/^double lxlp1 = l*(l+1.0);$/;"	v
lxlp1	../tools/hermite4_interpolation_csource.h	/^double lxlp1 = l*(l+1.0);$/;"	v
lxlp1	../tools/hermite6_interpolation_csource.h	/^double xmin, xmax, deltax, deltax2, lxlp1;$/;"	v
m_idm	../include/thermodynamics.h	/^  double m_idm;         \/**< interacting dark matter mass *\/$/;"	m	struct:thermo
m_ncdm_in_eV	../include/background.h	/^  double * m_ncdm_in_eV; \/**< list of ncdm masses in eV (inferred from M_ncdm and other parameters above) *\/$/;"	m	struct:background
main	../cpp/testKlass.cc	/^int main(int argc,char** argv){$/;"	f
many_tanh_num	../include/thermodynamics.h	/^  int many_tanh_num; \/**< with how many jumps do we want to describe reionization? *\/$/;"	m	struct:thermo
many_tanh_width	../include/thermodynamics.h	/^  double many_tanh_width; \/**< sharpness of tanh() steps *\/$/;"	m	struct:thermo
many_tanh_xe	../include/thermodynamics.h	/^  double * many_tanh_xe; \/**< imposed \\f$ X_e(z)\\f$ value at the end of each jump (ie at later times)*\/$/;"	m	struct:thermo
many_tanh_z	../include/thermodynamics.h	/^  double * many_tanh_z; \/**< central z value for each tanh jump *\/$/;"	m	struct:thermo
max_group	../include/evolver_ndf15.h	/^	int max_group; \/*Number of columngroups -1 *\/$/;"	m	struct:jacobian
max_l_max	../include/perturbations.h	/^  int max_l_max;    \/**< maximum l_max for any multipole *\/$/;"	m	struct:perturb_workspace
max_nonzero	../include/evolver_ndf15.h	/^	int max_nonzero;     \/*Maximal number of non-zero entries to be considered sparse *\/$/;"	m	struct:jacobian
maxnz	../include/sparse.h	/^	int maxnz;		\/* Maximum number of non-zero entries*\/$/;"	m	struct:sparse_matrix
md_size	../include/perturbations.h	/^  int md_size; \/**< number of modes included in computation *\/$/;"	m	struct:perturbs
md_size	../include/primordial.h	/^  int md_size;      \/**< number of modes included in computation *\/$/;"	m	struct:primordial
md_size	../include/spectra.h	/^  int md_size;           \/**< number of modes (scalar, tensor, ...) included in computation *\/$/;"	m	struct:spectra
md_size	../include/transfer.h	/^  int md_size;       \/**< number of modes included in computation *\/$/;"	m	struct:transfers
method	../include/nonlinear.h	/^  enum non_linear_method method; \/**< method for computing non-linear corrections (none, Halogit, etc.) *\/$/;"	m	struct:nonlinear	typeref:enum:nonlinear::non_linear_method
mt_size	../include/perturbations.h	/^  int mt_size;                \/**< size of metric perturbation vector *\/$/;"	m	struct:perturb_workspace
n	../include/dei_rkck.h	/^  int n;$/;"	m	struct:generic_integrator_workspace
n	../include/sparse.h	/^	int n;			\/*Matrix assumed square, [nxn] *\/$/;"	m	struct:sparse_numerical
n_ad_bi	../include/primordial.h	/^  double n_ad_bi; \/**< ADxBI cross-correlation tilt *\/$/;"	m	struct:primordial
n_ad_cdi	../include/primordial.h	/^  double n_ad_cdi; \/**< ADxCDI cross-correlation tilt *\/$/;"	m	struct:primordial
n_ad_nid	../include/primordial.h	/^  double n_ad_nid; \/**< ADxNID cross-correlation tilt *\/$/;"	m	struct:primordial
n_ad_niv	../include/primordial.h	/^  double n_ad_niv; \/**< ADxNIV cross-correlation tilt *\/$/;"	m	struct:primordial
n_bi	../include/primordial.h	/^  double n_bi;  \/**< BI tilt *\/$/;"	m	struct:primordial
n_bi_cdi	../include/primordial.h	/^  double n_bi_cdi; \/**< BIxCDI cross-correlation tilt *\/$/;"	m	struct:primordial
n_bi_nid	../include/primordial.h	/^  double n_bi_nid; \/**< BIxNIV cross-correlation tilt *\/$/;"	m	struct:primordial
n_bi_niv	../include/primordial.h	/^  double n_bi_niv; \/**< BIxNIV cross-correlation tilt *\/$/;"	m	struct:primordial
n_cdi	../include/primordial.h	/^  double n_cdi;  \/**< CDI tilt *\/$/;"	m	struct:primordial
n_cdi_nid	../include/primordial.h	/^  double n_cdi_nid; \/**< CDIxNID cross-correlation tilt *\/$/;"	m	struct:primordial
n_cdi_niv	../include/primordial.h	/^  double n_cdi_niv; \/**< CDIxNIV cross-correlation tilt *\/$/;"	m	struct:primordial
n_e	../include/thermodynamics.h	/^  double n_e; \/**< total number density of electrons today (free or not) *\/$/;"	m	struct:thermo
n_ncdm	../include/background.h	/^  int n_ncdm;$/;"	m	struct:background_parameters_for_distributions
n_nid	../include/primordial.h	/^  double n_nid;  \/**< NID tilt *\/$/;"	m	struct:primordial
n_nid_niv	../include/primordial.h	/^  double n_nid_niv; \/**< NIDxNIV cross-correlation tilt *\/$/;"	m	struct:primordial
n_niv	../include/primordial.h	/^  double n_niv;  \/**< NIV tilt *\/$/;"	m	struct:primordial
n_s	../include/primordial.h	/^  double n_s;  \/**< usual scalar tilt = [curvature power spectrum tilt at pivot scale -1] *\/$/;"	m	struct:primordial
n_t	../include/primordial.h	/^  double n_t;  \/**< usual tensor tilt = [GW power spectrum tilt at pivot scale] *\/$/;"	m	struct:primordial
name	../include/parser.h	/^  FileArg * name;  \/**< list of (size) names *\/$/;"	m	struct:file_content
natural	../include/primordial.h	/^  natural,$/;"	e	enum:potential_shape
ncdm_input_q_size	../include/background.h	/^  int * ncdm_input_q_size; \/**< Vector of numbers of q bins *\/$/;"	m	struct:background
ncdm_psd_files	../include/background.h	/^  char * ncdm_psd_files;                \/**< list of filenames for tabulated p-s-d *\/$/;"	m	struct:background
ncdm_psd_parameters	../include/background.h	/^  double * ncdm_psd_parameters;         \/**< list of parameters for specifying\/modifying$/;"	m	struct:background
ncdm_qmax	../include/background.h	/^  double * ncdm_qmax;   \/**< Vector of maximum value of q *\/$/;"	m	struct:background
ncdm_quadrature_method	../include/quadrature.h	/^enum ncdm_quadrature_method {qm_auto, qm_Laguerre, qm_trapz_indefinite, qm_trapz};$/;"	g
ncdm_quadrature_strategy	../include/background.h	/^  int * ncdm_quadrature_strategy; \/**< Vector of integers according to quadrature strategy. *\/$/;"	m	struct:background
ncdmfa_CLASS	../include/perturbations.h	/^enum ncdmfa_method {ncdmfa_mb,ncdmfa_hu,ncdmfa_CLASS,ncdmfa_none};$/;"	e	enum:ncdmfa_method
ncdmfa_flags	../include/perturbations.h	/^enum ncdmfa_flags {ncdmfa_off, ncdmfa_on};$/;"	g
ncdmfa_hu	../include/perturbations.h	/^enum ncdmfa_method {ncdmfa_mb,ncdmfa_hu,ncdmfa_CLASS,ncdmfa_none};$/;"	e	enum:ncdmfa_method
ncdmfa_mb	../include/perturbations.h	/^enum ncdmfa_method {ncdmfa_mb,ncdmfa_hu,ncdmfa_CLASS,ncdmfa_none};$/;"	e	enum:ncdmfa_method
ncdmfa_method	../include/perturbations.h	/^enum ncdmfa_method {ncdmfa_mb,ncdmfa_hu,ncdmfa_CLASS,ncdmfa_none};$/;"	g
ncdmfa_none	../include/perturbations.h	/^enum ncdmfa_method {ncdmfa_mb,ncdmfa_hu,ncdmfa_CLASS,ncdmfa_none};$/;"	e	enum:ncdmfa_method
ncdmfa_off	../include/perturbations.h	/^enum ncdmfa_flags {ncdmfa_off, ncdmfa_on};$/;"	e	enum:ncdmfa_flags
ncdmfa_on	../include/perturbations.h	/^enum ncdmfa_flags {ncdmfa_off, ncdmfa_on};$/;"	e	enum:ncdmfa_flags
ncols	../include/sparse.h	/^	int ncols;		\/* Number of columns *\/$/;"	m	struct:sparse_matrix
ndf15	../include/common.h	/^  ndf15 \/* stiff integrator *\/$/;"	e	enum:evolver_type
neglect_late_source	../include/transfer.h	/^  short neglect_late_source; \/**< flag stating whether we use the time cut approximation for the wavenumber at hand *\/$/;"	m	struct:transfer_workspace
new_jacobian	../include/evolver_ndf15.h	/^	int new_jacobian; \/* True if sp_ludcmp has not been run on the current jacobian. *\/$/;"	m	struct:jacobian
new_linearisation	../tools/evolver_ndf15.c	/^int new_linearisation(struct jacobian *jac,double hinvGak,int neq,ErrorMsg error_message){$/;"	f
newtonian	../include/perturbations.h	/^  newtonian, \/**< newtonian (or longitudinal) gauge *\/$/;"	e	enum:possible_gauges
next_border	../include/hermite3_interpolation_csource.h	/^double left_border, right_border, next_border;$/;"	v
next_border	../include/hermite4_interpolation_csource.h	/^double left_border, right_border, next_border;$/;"	v
next_border	../include/hermite6_interpolation_csource.h	/^double left_border, right_border, next_border;$/;"	v
next_border	../tools/hermite3_interpolation_csource.h	/^double left_border, right_border, next_border;$/;"	v
next_border	../tools/hermite4_interpolation_csource.h	/^double left_border, right_border, next_border;$/;"	v
next_border	../tools/hermite6_interpolation_csource.h	/^double left_border, right_border, next_border;$/;"	v
nindex_idm_dr	../include/thermodynamics.h	/^  double nindex_idm_dr; \/**< temperature dependence of the interaction between dark matter and dark radiation *\/$/;"	m	struct:thermo
nl	../cpp/ClassEngine.hh	/^  struct nonlinear nl;        \/* for non-linear spectra *\/$/;"	m	class:ClassEngine	typeref:struct:ClassEngine::nonlinear
nl_HMcode	../include/nonlinear.h	/^enum non_linear_method {nl_none,nl_halofit,nl_HMcode};$/;"	e	enum:non_linear_method
nl_corr_density	../include/nonlinear.h	/^  double ** nl_corr_density;   \/**< nl_corr_density[index_pk][index_tau * ppt->k_size + index_k] *\/$/;"	m	struct:nonlinear
nl_emu_dmonly	../include/nonlinear.h	/^enum hmcode_baryonic_feedback_model {nl_emu_dmonly, nl_owls_dmonly, nl_owls_ref, nl_owls_agn, nl_owls_dblim, nl_user_defined};$/;"	e	enum:hmcode_baryonic_feedback_model
nl_halofit	../include/nonlinear.h	/^enum non_linear_method {nl_none,nl_halofit,nl_HMcode};$/;"	e	enum:non_linear_method
nl_none	../include/nonlinear.h	/^enum non_linear_method {nl_none,nl_halofit,nl_HMcode};$/;"	e	enum:non_linear_method
nl_owls_agn	../include/nonlinear.h	/^enum hmcode_baryonic_feedback_model {nl_emu_dmonly, nl_owls_dmonly, nl_owls_ref, nl_owls_agn, nl_owls_dblim, nl_user_defined};$/;"	e	enum:hmcode_baryonic_feedback_model
nl_owls_dblim	../include/nonlinear.h	/^enum hmcode_baryonic_feedback_model {nl_emu_dmonly, nl_owls_dmonly, nl_owls_ref, nl_owls_agn, nl_owls_dblim, nl_user_defined};$/;"	e	enum:hmcode_baryonic_feedback_model
nl_owls_dmonly	../include/nonlinear.h	/^enum hmcode_baryonic_feedback_model {nl_emu_dmonly, nl_owls_dmonly, nl_owls_ref, nl_owls_agn, nl_owls_dblim, nl_user_defined};$/;"	e	enum:hmcode_baryonic_feedback_model
nl_owls_ref	../include/nonlinear.h	/^enum hmcode_baryonic_feedback_model {nl_emu_dmonly, nl_owls_dmonly, nl_owls_ref, nl_owls_agn, nl_owls_dblim, nl_user_defined};$/;"	e	enum:hmcode_baryonic_feedback_model
nl_user_defined	../include/nonlinear.h	/^enum hmcode_baryonic_feedback_model {nl_emu_dmonly, nl_owls_dmonly, nl_owls_ref, nl_owls_agn, nl_owls_dblim, nl_user_defined};$/;"	e	enum:hmcode_baryonic_feedback_model
non_diag	../include/spectra.h	/^  int non_diag; \/**< sets the number of cross-correlation spectra$/;"	m	struct:spectra
non_linear_method	../include/nonlinear.h	/^enum non_linear_method {nl_none,nl_halofit,nl_HMcode};$/;"	g
nonlinear	../include/nonlinear.h	/^struct nonlinear {$/;"	s
nonlinear_free	nonlinear.c	/^int nonlinear_free($/;"	f
nonlinear_get_k_list	nonlinear.c	/^int nonlinear_get_k_list($/;"	f
nonlinear_get_source	nonlinear.c	/^int nonlinear_get_source($/;"	f
nonlinear_get_tau_list	nonlinear.c	/^int nonlinear_get_tau_list($/;"	f
nonlinear_halofit	nonlinear.c	/^int nonlinear_halofit($/;"	f
nonlinear_halofit_integrate	nonlinear.c	/^int nonlinear_halofit_integrate($/;"	f
nonlinear_hmcode	nonlinear.c	/^int nonlinear_hmcode($/;"	f
nonlinear_hmcode2020	nonlinear_hmcode.c	/^int nonlinear_hmcode2020($/;"	f
nonlinear_hmcode_baryonic_feedback	nonlinear.c	/^int nonlinear_hmcode_baryonic_feedback($/;"	f
nonlinear_hmcode_dark_energy_correction	nonlinear.c	/^int nonlinear_hmcode_dark_energy_correction($/;"	f
nonlinear_hmcode_fill_growtab	nonlinear.c	/^int nonlinear_hmcode_fill_growtab($/;"	f
nonlinear_hmcode_fill_sigtab	nonlinear.c	/^int nonlinear_hmcode_fill_sigtab($/;"	f
nonlinear_hmcode_growint	nonlinear.c	/^int nonlinear_hmcode_growint($/;"	f
nonlinear_hmcode_halomassfunction	nonlinear.c	/^int nonlinear_hmcode_halomassfunction($/;"	f
nonlinear_hmcode_sigma8_at_z	nonlinear.c	/^int nonlinear_hmcode_sigma8_at_z($/;"	f
nonlinear_hmcode_sigmadisp100_at_z	nonlinear.c	/^int nonlinear_hmcode_sigmadisp100_at_z($/;"	f
nonlinear_hmcode_sigmadisp_at_z	nonlinear.c	/^int nonlinear_hmcode_sigmadisp_at_z($/;"	f
nonlinear_hmcode_sigmaprime_at_z	nonlinear.c	/^int nonlinear_hmcode_sigmaprime_at_z($/;"	f
nonlinear_hmcode_window_nfw	nonlinear.c	/^int nonlinear_hmcode_window_nfw($/;"	f
nonlinear_hmcode_workspace_free	nonlinear.c	/^int nonlinear_hmcode_workspace_free($/;"	f
nonlinear_hmcode_workspace_init	nonlinear.c	/^int nonlinear_hmcode_workspace_init($/;"	f
nonlinear_indices	nonlinear.c	/^int nonlinear_indices($/;"	f
nonlinear_init	nonlinear.c	/^int nonlinear_init($/;"	f
nonlinear_k_nl_at_z	nonlinear.c	/^int nonlinear_k_nl_at_z($/;"	f
nonlinear_pk_at_k_and_z	nonlinear.c	/^int nonlinear_pk_at_k_and_z($/;"	f
nonlinear_pk_at_z	nonlinear.c	/^int nonlinear_pk_at_z($/;"	f
nonlinear_pk_linear	nonlinear.c	/^int nonlinear_pk_linear($/;"	f
nonlinear_pk_tilt_at_k_and_z	nonlinear.c	/^int nonlinear_pk_tilt_at_k_and_z($/;"	f
nonlinear_pks_at_k_and_z	nonlinear.c	/^int nonlinear_pks_at_k_and_z($/;"	f
nonlinear_pks_at_kvec_and_zvec	nonlinear.c	/^int nonlinear_pks_at_kvec_and_zvec($/;"	f
nonlinear_pks_at_z	nonlinear.c	/^int nonlinear_pks_at_z($/;"	f
nonlinear_sigma_at_z	nonlinear.c	/^int nonlinear_sigma_at_z($/;"	f
nonlinear_sigmas	nonlinear.c	/^int nonlinear_sigmas($/;"	f
nonlinear_sigmas_at_z	nonlinear.c	/^int nonlinear_sigmas_at_z($/;"	f
nonlinear_verbose	../include/nonlinear.h	/^  short nonlinear_verbose;  	\/**< amount of information written in standard output *\/$/;"	m	struct:nonlinear
nonlinear_workspace	../include/nonlinear.h	/^struct nonlinear_workspace {$/;"	s
normal_info	../include/background.h	/^  short normal_info; \/**< flag for calling background_at_eta and return medium information *\/$/;"	m	struct:background
nrows	../include/sparse.h	/^	int nrows;		\/* Number of rows *\/$/;"	m	struct:sparse_matrix
numCls	../cpp/ClassEngine.hh	/^  inline int numCls() const {return sp.ct_size;};$/;"	f	class:ClassEngine
number_of_scalar_titles	../include/perturbations.h	/^  int number_of_scalar_titles; \/**< number of titles\/columns in scalar perturbation output files *\/$/;"	m	struct:perturbs
number_of_tensor_titles	../include/perturbations.h	/^  int number_of_tensor_titles; \/**< number of titles\/columns in tensor perturbation output files*\/$/;"	m	struct:perturbs
number_of_vector_titles	../include/perturbations.h	/^  int number_of_vector_titles; \/**< number of titles\/columns in vector perturbation output files*\/$/;"	m	struct:perturbs
numerical	../include/primordial.h	/^  numerical,$/;"	e	enum:inflation_module_behavior
numjac	../tools/evolver_ndf15.c	/^int numjac($/;"	f
numjac_workspace	../include/evolver_ndf15.h	/^struct numjac_workspace{$/;"	s
nx	../include/hermite3_interpolation_csource.h	/^int j, nx, current_border_idx=0;$/;"	v
nx	../include/hermite4_interpolation_csource.h	/^int j, nx, current_border_idx=0;$/;"	v
nx	../include/hermite6_interpolation_csource.h	/^int K, l, j, nx, current_border_idx=0;$/;"	v
nx	../tools/hermite3_interpolation_csource.h	/^int j, nx, current_border_idx=0;$/;"	v
nx	../tools/hermite4_interpolation_csource.h	/^int j, nx, current_border_idx=0;$/;"	v
nx	../tools/hermite6_interpolation_csource.h	/^int K, l, j, nx, current_border_idx=0;$/;"	v
nz_ddnz	../include/transfer.h	/^  double * nz_ddnz;      \/**< second derivatives in splined selection function*\/$/;"	m	struct:transfers
nz_evo_dd_dlog_nz	../include/transfer.h	/^  double * nz_evo_dd_dlog_nz; \/**< second derivatives in splined log of evolution function *\/$/;"	m	struct:transfers
nz_evo_dlog_nz	../include/transfer.h	/^  double * nz_evo_dlog_nz;    \/**< log of tabulated values of evolution function *\/$/;"	m	struct:transfers
nz_evo_file_name	../include/transfer.h	/^  FileName nz_evo_file_name;  \/**< dN\/dz (evolution function) input file name *\/$/;"	m	struct:transfers
nz_evo_nz	../include/transfer.h	/^  double * nz_evo_nz;         \/**< input tabulated values of evolution function *\/$/;"	m	struct:transfers
nz_evo_size	../include/transfer.h	/^  int nz_evo_size;            \/**< number of redshift values in input tabulated evolution function *\/$/;"	m	struct:transfers
nz_evo_z	../include/transfer.h	/^  double * nz_evo_z;          \/**< redshift values in input tabulated evolution function *\/$/;"	m	struct:transfers
nz_file_name	../include/transfer.h	/^  FileName nz_file_name; \/**< dN\/dz (selection function) input file name *\/$/;"	m	struct:transfers
nz_nz	../include/transfer.h	/^  double * nz_nz;        \/**< input tabulated values of selection function *\/$/;"	m	struct:transfers
nz_size	../include/transfer.h	/^  int nz_size;           \/**< number of redshift values in input tabulated selection function *\/$/;"	m	struct:transfers
nz_z	../include/transfer.h	/^  double * nz_z;         \/**< redshift values in input tabulated selection function *\/$/;"	m	struct:transfers
omega_dcdmdr	../include/input.h	/^enum target_names {theta_s, Omega_dcdmdr, omega_dcdmdr, Omega_scf, Omega_ini_dcdm, omega_ini_dcdm, sigma8};$/;"	e	enum:target_names
omega_ini_dcdm	../include/input.h	/^enum target_names {theta_s, Omega_dcdmdr, omega_dcdmdr, Omega_scf, Omega_ini_dcdm, omega_ini_dcdm, sigma8};$/;"	e	enum:target_names
op	../cpp/ClassEngine.hh	/^  struct output op;           \/* for output files *\/$/;"	m	class:ClassEngine	typeref:struct:ClassEngine::output
open	../include/background.h	/^enum spatial_curvature {flat,open,closed};$/;"	e	enum:spatial_curvature
out_sigma	../include/nonlinear.h	/^enum out_sigmas {out_sigma,out_sigma_prime,out_sigma_disp};$/;"	e	enum:out_sigmas
out_sigma_disp	../include/nonlinear.h	/^enum out_sigmas {out_sigma,out_sigma_prime,out_sigma_disp};$/;"	e	enum:out_sigmas
out_sigma_prime	../include/nonlinear.h	/^enum out_sigmas {out_sigma,out_sigma_prime,out_sigma_disp};$/;"	e	enum:out_sigmas
out_sigmas	../include/nonlinear.h	/^enum out_sigmas {out_sigma,out_sigma_prime,out_sigma_disp};$/;"	g
output	../include/output.h	/^struct output {$/;"	s
output_background	output.c	/^int output_background($/;"	f
output_cl	output.c	/^int output_cl($/;"	f
output_format	../include/output.h	/^  enum file_format output_format; \/**< which format for output files (definitions, order of columns, etc.) *\/$/;"	m	struct:output	typeref:enum:output::file_format
output_init	output.c	/^int output_init($/;"	f
output_one_line_of_cl	output.c	/^int output_one_line_of_cl($/;"	f
output_one_line_of_pk	output.c	/^int output_one_line_of_pk($/;"	f
output_open_cl_file	output.c	/^int output_open_cl_file($/;"	f
output_open_pk_file	output.c	/^int output_open_pk_file($/;"	f
output_perturbations	output.c	/^int output_perturbations($/;"	f
output_pk	output.c	/^int output_pk($/;"	f
output_primordial	output.c	/^int output_primordial($/;"	f
output_print_data	output.c	/^int output_print_data(FILE *out,$/;"	f
output_thermodynamics	output.c	/^int output_thermodynamics($/;"	f
output_tk	output.c	/^int output_tk($/;"	f
output_total_cl_at_l	output.c	/^int output_total_cl_at_l($/;"	f
output_verbose	../include/output.h	/^  short output_verbose; \/**< flag regulating the amount of information sent to standard output (none if set to zero) *\/$/;"	m	struct:output
p	../include/sparse.h	/^	int *p;			\/*Row permutation. *\/$/;"	m	struct:sparse_numerical
pBIS	../include/transfer.h	/^  HyperInterpStruct * pBIS;  \/**< pointer to structure containing all the spherical bessel functions of the flat case (used even in the non-flat case, for approximation schemes). pBIS = pointer to Bessel Interpolation Structure. *\/$/;"	m	struct:transfer_workspace
parNames	../cpp/ClassEngine.hh	/^  std::vector<std::string> parNames;$/;"	m	class:ClassEngine
pars	../cpp/ClassEngine.hh	/^  std::vector<std::pair<string,string> > pars;$/;"	m	class:ClassParams
parser_cat	../tools/parser.c	/^int parser_cat($/;"	f
parser_free	../tools/parser.c	/^int parser_free($/;"	f
parser_init	../tools/parser.c	/^int parser_init($/;"	f
parser_read_double	../tools/parser.c	/^int parser_read_double($/;"	f
parser_read_double_and_position	../tools/parser.c	/^int parser_read_double_and_position($/;"	f
parser_read_file	../tools/parser.c	/^int parser_read_file($/;"	f
parser_read_int	../tools/parser.c	/^int parser_read_int($/;"	f
parser_read_line	../tools/parser.c	/^int parser_read_line($/;"	f
parser_read_list_of_doubles	../tools/parser.c	/^int parser_read_list_of_doubles($/;"	f
parser_read_list_of_integers	../tools/parser.c	/^int parser_read_list_of_integers($/;"	f
parser_read_list_of_strings	../tools/parser.c	/^int parser_read_list_of_strings($/;"	f
parser_read_string	../tools/parser.c	/^int parser_read_string($/;"	f
pba	../include/background.h	/^  struct background * pba;$/;"	m	struct:background_parameters_and_workspace	typeref:struct:background_parameters_and_workspace::background
pba	../include/background.h	/^  struct background * pba;$/;"	m	struct:background_parameters_for_distributions	typeref:struct:background_parameters_for_distributions::background
pba	../include/input.h	/^  struct background * pba;$/;"	m	struct:input_pprpba	typeref:struct:input_pprpba::background
pba	../include/perturbations.h	/^  struct background * pba;        \/**< pointer to the background structure *\/$/;"	m	struct:perturb_parameters_and_workspace	typeref:struct:perturb_parameters_and_workspace::background
pba	../include/thermodynamics.h	/^  struct background * pba;$/;"	m	struct:thermodynamics_parameters_and_workspace	typeref:struct:thermodynamics_parameters_and_workspace::background
perturb_approximations	perturbations.c	/^int perturb_approximations($/;"	f
perturb_derivs	perturbations.c	/^int perturb_derivs(double tau,$/;"	f
perturb_einstein	perturbations.c	/^int perturb_einstein($/;"	f
perturb_find_approximation_number	perturbations.c	/^int perturb_find_approximation_number($/;"	f
perturb_find_approximation_switches	perturbations.c	/^int perturb_find_approximation_switches($/;"	f
perturb_free	perturbations.c	/^int perturb_free($/;"	f
perturb_get_k_list	perturbations.c	/^int perturb_get_k_list($/;"	f
perturb_indices_of_perturbs	perturbations.c	/^int perturb_indices_of_perturbs($/;"	f
perturb_init	perturbations.c	/^int perturb_init($/;"	f
perturb_initial_conditions	perturbations.c	/^int perturb_initial_conditions(struct precision * ppr,$/;"	f
perturb_output_data	perturbations.c	/^int perturb_output_data($/;"	f
perturb_output_file	../include/perturbations.h	/^  FILE * perturb_output_file; \/**< filepointer to output file*\/$/;"	m	struct:perturb_workspace
perturb_output_firstline_and_ic_suffix	perturbations.c	/^int perturb_output_firstline_and_ic_suffix($/;"	f
perturb_output_titles	perturbations.c	/^int perturb_output_titles($/;"	f
perturb_parameters_and_workspace	../include/perturbations.h	/^struct perturb_parameters_and_workspace {$/;"	s
perturb_prepare_k_output	perturbations.c	/^int perturb_prepare_k_output(struct background * pba,$/;"	f
perturb_print_variables	perturbations.c	/^int perturb_print_variables(double tau,$/;"	f
perturb_rsa_delta_and_theta	perturbations.c	/^int perturb_rsa_delta_and_theta($/;"	f
perturb_rsa_idr_delta_and_theta	perturbations.c	/^int perturb_rsa_idr_delta_and_theta($/;"	f
perturb_solve	perturbations.c	/^int perturb_solve($/;"	f
perturb_sources	perturbations.c	/^int perturb_sources($/;"	f
perturb_sources_at_tau	perturbations.c	/^int perturb_sources_at_tau($/;"	f
perturb_tca_slip_and_shear	perturbations.c	/^int perturb_tca_slip_and_shear(double * y,$/;"	f
perturb_timesampling_for_sources	perturbations.c	/^int perturb_timesampling_for_sources($/;"	f
perturb_timescale	perturbations.c	/^int perturb_timescale($/;"	f
perturb_total_stress_energy	perturbations.c	/^int perturb_total_stress_energy($/;"	f
perturb_vector	../include/perturbations.h	/^struct perturb_vector$/;"	s
perturb_vector_free	perturbations.c	/^int perturb_vector_free($/;"	f
perturb_vector_init	perturbations.c	/^int perturb_vector_init($/;"	f
perturb_workspace	../include/perturbations.h	/^struct perturb_workspace$/;"	s
perturb_workspace_free	perturbations.c	/^int perturb_workspace_free ($/;"	f
perturb_workspace_init	perturbations.c	/^int perturb_workspace_init($/;"	f
perturbations_verbose	../include/perturbations.h	/^  short perturbations_verbose; \/**< flag regulating the amount of information sent to standard output (none if set to zero) *\/$/;"	m	struct:perturbs
perturbs	../include/perturbations.h	/^struct perturbs$/;"	s
phi	../include/hyperspherical.h	/^  double *phi;        \/\/array of size nl*nx. [y_{l1}(x1) t_{l1}(x2)...]$/;"	m	struct:HypersphericalInterpolationStructure
phi_end	../include/primordial.h	/^  double phi_end;	\/**< value of inflaton at the end of inflation *\/$/;"	m	struct:primordial
phi_ini_scf	../include/background.h	/^  double phi_ini_scf;       \/**< \\f$ \\phi(t_0) \\f$: scalar field initial value *\/$/;"	m	struct:background
phi_max	../include/primordial.h	/^  double phi_max;        \/**< in inflationary module, value of phi when \\f$ k_{max}=aH \\f$*\/$/;"	m	struct:primordial
phi_min	../include/primordial.h	/^  double phi_min;        \/**< in inflationary module, value of phi when \\f$ k_{min}=aH \\f$*\/$/;"	m	struct:primordial
phi_pivot	../include/primordial.h	/^  double phi_pivot;      \/**< in inflationary module, value of$/;"	m	struct:primordial
phi_pivot_method	../include/primordial.h	/^  enum phi_pivot_methods phi_pivot_method; \/**< flag for method used to define and find the pivot scale *\/$/;"	m	struct:primordial	typeref:enum:primordial::phi_pivot_methods
phi_pivot_methods	../include/primordial.h	/^enum phi_pivot_methods {$/;"	g
phi_pivot_target	../include/primordial.h	/^  double phi_pivot_target; \/**< For each of the above methods, critical value to be reached between pivot and end of inflation (N_star, [aH]ratio, etc.) *\/$/;"	m	struct:primordial
phi_prime_ini_scf	../include/background.h	/^  double phi_prime_ini_scf; \/**< \\f$ d\\phi(t_0)\/d\\tau \\f$: scalar field initial derivative wrt conformal time *\/$/;"	m	struct:background
phi_stop	../include/primordial.h	/^  double phi_stop;       \/**< in inflationary module, value of phi at the end of inflation *\/$/;"	m	struct:primordial
phiminabs	../include/hyperspherical.h	/^   double phiminabs;$/;"	m	struct:WKB_parameters
phisign	../include/hermite3_interpolation_csource.h	/^int phisign = 1, dphisign = 1;$/;"	v
phisign	../include/hermite4_interpolation_csource.h	/^int phisign = 1, dphisign = 1;$/;"	v
phisign	../include/hermite6_interpolation_csource.h	/^int phisign = 1, dphisign = 1;$/;"	v
phisign	../tools/hermite3_interpolation_csource.h	/^int phisign = 1, dphisign = 1;$/;"	v
phisign	../tools/hermite4_interpolation_csource.h	/^int phisign = 1, dphisign = 1;$/;"	v
phisign	../tools/hermite6_interpolation_csource.h	/^int phisign = 1, dphisign = 1;$/;"	v
pinv	../include/sparse.h	/^	int *pinv;		\/*Inverse row permutation. *\/$/;"	m	struct:sparse_numerical
pk_def	../include/common.h	/^enum pk_def {$/;"	g
pk_eq_ddw_and_ddOmega	../include/nonlinear.h	/^  double * pk_eq_ddw_and_ddOmega;   \/**< table of second derivatives *\/$/;"	m	struct:nonlinear
pk_eq_size	../include/nonlinear.h	/^  int pk_eq_size;                   \/**< number of indices in table pk_eq_w_and_Omega *\/$/;"	m	struct:nonlinear
pk_eq_tau	../include/nonlinear.h	/^  double * pk_eq_tau;               \/**< table of time values *\/$/;"	m	struct:nonlinear
pk_eq_tau_size	../include/nonlinear.h	/^  int pk_eq_tau_size;               \/**< number of times (and raws in table pk_eq_w_and_Omega) *\/$/;"	m	struct:nonlinear
pk_eq_w_and_Omega	../include/nonlinear.h	/^  double * pk_eq_w_and_Omega;       \/**< table of background quantites *\/$/;"	m	struct:nonlinear
pk_linear	../include/nonlinear.h	/^enum pk_outputs {pk_linear,pk_nonlinear};$/;"	e	enum:pk_outputs
pk_nonlinear	../include/nonlinear.h	/^enum pk_outputs {pk_linear,pk_nonlinear};$/;"	e	enum:pk_outputs
pk_outputs	../include/nonlinear.h	/^enum pk_outputs {pk_linear,pk_nonlinear};$/;"	g
pk_size	../include/nonlinear.h	/^  int pk_size;     \/**< k_size = total number of pk *\/$/;"	m	struct:nonlinear
pm	../cpp/ClassEngine.hh	/^  struct primordial pm;       \/* for primordial spectra *\/$/;"	m	class:ClassEngine	typeref:struct:ClassEngine::primordial
pnl	../include/spectra.h	/^  struct nonlinear * pnl; \/**< a pointer to the nonlinear structure is$/;"	m	struct:spectra	typeref:struct:spectra::nonlinear
polynomial	../include/primordial.h	/^  polynomial,$/;"	e	enum:potential_shape
possible_gauges	../include/perturbations.h	/^enum possible_gauges {$/;"	g
potential	../include/primordial.h	/^  enum potential_shape potential;$/;"	m	struct:primordial	typeref:enum:primordial::potential_shape
potential_shape	../include/primordial.h	/^enum potential_shape {$/;"	g
ppm	../include/primordial.h	/^  struct primordial * ppm;$/;"	m	struct:primordial_inflation_parameters_and_workspace	typeref:struct:primordial_inflation_parameters_and_workspace::primordial
ppr	../include/input.h	/^  struct precision * ppr;$/;"	m	struct:input_pprpba	typeref:struct:input_pprpba::precision
ppr	../include/perturbations.h	/^  struct precision * ppr;         \/**< pointer to the precision structure *\/$/;"	m	struct:perturb_parameters_and_workspace	typeref:struct:perturb_parameters_and_workspace::precision
ppr	../include/thermodynamics.h	/^  struct precision * ppr;$/;"	m	struct:thermodynamics_parameters_and_workspace	typeref:struct:thermodynamics_parameters_and_workspace::precision
ppt	../include/perturbations.h	/^  struct perturbs * ppt;          \/**< pointer to the precision structure *\/$/;"	m	struct:perturb_parameters_and_workspace	typeref:struct:perturb_parameters_and_workspace::perturbs
ppw	../include/perturbations.h	/^  struct perturb_workspace * ppw; \/**< workspace defined above *\/$/;"	m	struct:perturb_parameters_and_workspace	typeref:struct:perturb_parameters_and_workspace::perturb_workspace
pr	../cpp/ClassEngine.hh	/^  struct precision pr;        \/* for precision parameters *\/$/;"	m	class:ClassEngine	typeref:struct:ClassEngine::precision
precision	../include/common.h	/^struct precision$/;"	s
preco	../include/thermodynamics.h	/^  struct recombination * preco;$/;"	m	struct:thermodynamics_parameters_and_workspace	typeref:struct:thermodynamics_parameters_and_workspace::recombination
primordial	../include/primordial.h	/^struct primordial {$/;"	s
primordial_analytic_spectrum	primordial.c	/^int primordial_analytic_spectrum($/;"	f
primordial_analytic_spectrum_init	primordial.c	/^int primordial_analytic_spectrum_init($/;"	f
primordial_external_spectrum_init	primordial.c	/^int primordial_external_spectrum_init($/;"	f
primordial_free	primordial.c	/^int primordial_free($/;"	f
primordial_get_lnk_list	primordial.c	/^int primordial_get_lnk_list($/;"	f
primordial_indices	primordial.c	/^int primordial_indices($/;"	f
primordial_inflation_analytic_spectra	primordial.c	/^int primordial_inflation_analytic_spectra($/;"	f
primordial_inflation_check_hubble	primordial.c	/^int primordial_inflation_check_hubble($/;"	f
primordial_inflation_check_potential	primordial.c	/^int primordial_inflation_check_potential($/;"	f
primordial_inflation_derivs	primordial.c	/^int primordial_inflation_derivs($/;"	f
primordial_inflation_evolve_background	primordial.c	/^int primordial_inflation_evolve_background($/;"	f
primordial_inflation_find_attractor	primordial.c	/^int primordial_inflation_find_attractor($/;"	f
primordial_inflation_find_phi_pivot	primordial.c	/^int primordial_inflation_find_phi_pivot($/;"	f
primordial_inflation_get_epsilon	primordial.c	/^int primordial_inflation_get_epsilon($/;"	f
primordial_inflation_hubble	primordial.c	/^int primordial_inflation_hubble($/;"	f
primordial_inflation_indices	primordial.c	/^int primordial_inflation_indices($/;"	f
primordial_inflation_one_k	primordial.c	/^int primordial_inflation_one_k($/;"	f
primordial_inflation_one_wavenumber	primordial.c	/^int primordial_inflation_one_wavenumber($/;"	f
primordial_inflation_parameters_and_workspace	../include/primordial.h	/^struct primordial_inflation_parameters_and_workspace {$/;"	s
primordial_inflation_potential	primordial.c	/^int primordial_inflation_potential($/;"	f
primordial_inflation_solve_inflation	primordial.c	/^int primordial_inflation_solve_inflation($/;"	f
primordial_inflation_spectra	primordial.c	/^int primordial_inflation_spectra($/;"	f
primordial_init	primordial.c	/^int primordial_init($/;"	f
primordial_output_data	primordial.c	/^int primordial_output_data(struct perturbs * ppt,$/;"	f
primordial_output_titles	primordial.c	/^int primordial_output_titles(struct perturbs * ppt,$/;"	f
primordial_spec_type	../include/primordial.h	/^  enum primordial_spectrum_type primordial_spec_type; \/**< type of primordial spectrum (simple analytic from, integration of inflationary perturbations, etc.) *\/$/;"	m	struct:primordial	typeref:enum:primordial::primordial_spectrum_type
primordial_spectrum_at_k	primordial.c	/^int primordial_spectrum_at_k($/;"	f
primordial_spectrum_type	../include/primordial.h	/^enum primordial_spectrum_type {$/;"	g
primordial_verbose	../include/primordial.h	/^  short primordial_verbose; \/**< flag regulating the amount of information sent to standard output (none if set to zero) *\/$/;"	m	struct:primordial
printFC	../cpp/ClassEngine.cc	/^void ClassEngine::printFC() {$/;"	f	class:ClassEngine
proper	../include/primordial.h	/^  proper$/;"	e	enum:time_definition
pt	../cpp/ClassEngine.hh	/^  struct perturbs pt;         \/* for source functions *\/$/;"	m	class:ClassEngine	typeref:struct:ClassEngine::perturbs
pt_size	../include/perturbations.h	/^  int pt_size;            \/**< size of perturbation vector *\/$/;"	m	struct:perturb_vector
pth	../include/perturbations.h	/^  struct thermo * pth;            \/**< pointer to the thermodynamics structure *\/$/;"	m	struct:perturb_parameters_and_workspace	typeref:struct:perturb_parameters_and_workspace::thermo
pv	../include/perturbations.h	/^  struct perturb_vector * pv; \/**< pointer to vector of integrated$/;"	m	struct:perturb_workspace	typeref:struct:perturb_workspace::perturb_vector
pvecback	../include/background.h	/^  double * pvecback;$/;"	m	struct:background_parameters_and_workspace
pvecback	../include/perturbations.h	/^  double * pvecback;          \/**< background quantities *\/$/;"	m	struct:perturb_workspace
pvecback	../include/thermodynamics.h	/^  double * pvecback;$/;"	m	struct:thermodynamics_parameters_and_workspace
pvecmetric	../include/perturbations.h	/^  double * pvecmetric;        \/**< metric quantities *\/$/;"	m	struct:perturb_workspace
pvecthermo	../include/perturbations.h	/^  double * pvecthermo;        \/**< thermodynamics quantities *\/$/;"	m	struct:perturb_workspace
q	../include/background.h	/^  double *q;$/;"	m	struct:background_parameters_for_distributions
q	../include/sparse.h	/^	int *q;			\/* Column permutation *\/$/;"	m	struct:sparse_numerical
q	../include/transfer.h	/^  double * q;  \/**< list of wavenumber values, q[index_q] *\/$/;"	m	struct:transfers
q_ncdm	../include/background.h	/^  double ** q_ncdm;     \/**< Pointers to vectors of perturbation sampling in q *\/$/;"	m	struct:background
q_ncdm_bg	../include/background.h	/^  double ** q_ncdm_bg;  \/**< Pointers to vectors of background sampling in q *\/$/;"	m	struct:background
q_size	../include/transfer.h	/^  size_t q_size; \/**< number of wavenumber values *\/$/;"	m	struct:transfers
q_size_ncdm	../include/background.h	/^  int * q_size_ncdm;    \/**< Size of the q_ncdm arrays *\/$/;"	m	struct:background
q_size_ncdm	../include/perturbations.h	/^  int* q_size_ncdm;	\/**< number of discrete momenta (for each ncdm species) *\/$/;"	m	struct:perturb_vector
q_size_ncdm_bg	../include/background.h	/^  int * q_size_ncdm_bg; \/**< Size of the q_ncdm_bg arrays *\/$/;"	m	struct:background
qm_Laguerre	../include/quadrature.h	/^enum ncdm_quadrature_method {qm_auto, qm_Laguerre, qm_trapz_indefinite, qm_trapz};$/;"	e	enum:ncdm_quadrature_method
qm_auto	../include/quadrature.h	/^enum ncdm_quadrature_method {qm_auto, qm_Laguerre, qm_trapz_indefinite, qm_trapz};$/;"	e	enum:ncdm_quadrature_method
qm_trapz	../include/quadrature.h	/^enum ncdm_quadrature_method {qm_auto, qm_Laguerre, qm_trapz_indefinite, qm_trapz};$/;"	e	enum:ncdm_quadrature_method
qm_trapz_indefinite	../include/quadrature.h	/^enum ncdm_quadrature_method {qm_auto, qm_Laguerre, qm_trapz_indefinite, qm_trapz};$/;"	e	enum:ncdm_quadrature_method
qss_node	../include/quadrature.h	/^} qss_node;$/;"	t	typeref:struct:adaptive_integration_tree_node
quadrature_gauss_legendre	../tools/quadrature.c	/^int quadrature_gauss_legendre($/;"	f
quadrature_in_rectangle	../tools/quadrature.c	/^int quadrature_in_rectangle($/;"	f
r	../include/primordial.h	/^  double r;    \/**< usual tensor to scalar ratio of power spectra, \\f$ r=A_T\/A_S=P_h\/P_R \\f$*\/$/;"	m	struct:primordial
ra_rec	../include/thermodynamics.h	/^  double ra_rec;  \/**< conformal angular diameter distance to recombination *\/$/;"	m	struct:thermo
ra_star	../include/thermodynamics.h	/^  double ra_star;  \/**< conformal angular diameter distance to z_star *\/$/;"	m	struct:thermo
radial_function_type	../include/transfer.h	/^              NC_RSD} radial_function_type;$/;"	t	typeref:enum:__anon2
rd_rec	../include/thermodynamics.h	/^  double rd_rec;  \/**< comoving photon damping scale at recombination *\/$/;"	m	struct:thermo
rd_star	../include/thermodynamics.h	/^  double rd_star;  \/**< comoving photon damping scale at z_star *\/$/;"	m	struct:thermo
re_size	../include/thermodynamics.h	/^  int re_size;             \/**< size of this vector *\/$/;"	m	struct:recombination
re_size	../include/thermodynamics.h	/^  int re_size;             \/**< size of this vector *\/$/;"	m	struct:reionization
reachr	../tools/sparse.c	/^int reachr(sp_mat *G, sp_mat *B,int k, int *xik,int *pinv){$/;"	f
read	../include/parser.h	/^  short * read;    \/**< set to _TRUE_ if this parameter is effectively read *\/$/;"	m	struct:file_content
recfast	../include/thermodynamics.h	/^  recfast,$/;"	e	enum:recombination_algorithm
recombination	../include/thermodynamics.h	/^  enum recombination_algorithm recombination; \/**< recombination code *\/$/;"	m	struct:thermo	typeref:enum:thermo::recombination_algorithm
recombination	../include/thermodynamics.h	/^struct recombination {$/;"	s
recombination_algorithm	../include/thermodynamics.h	/^enum recombination_algorithm {$/;"	g
recombination_table	../include/thermodynamics.h	/^  double * recombination_table; \/**< table recombination_table[index_z*preco->re_size+index_re] with all other quantities (array of size preco->rt_size*preco->re_size) *\/$/;"	m	struct:recombination
reduce_tree	../tools/quadrature.c	/^int reduce_tree(qss_node *node, int level){$/;"	f
reio_bins_tanh	../include/thermodynamics.h	/^  reio_bins_tanh,  \/**< binned reionization history with tanh inteprolation between bins *\/$/;"	e	enum:reionization_parametrization
reio_camb	../include/thermodynamics.h	/^  reio_camb,  \/**< reionization parameterized like in CAMB *\/$/;"	e	enum:reionization_parametrization
reio_half_tanh	../include/thermodynamics.h	/^  reio_half_tanh,  \/**< half a tanh, instead of the full tanh *\/$/;"	e	enum:reionization_parametrization
reio_inter	../include/thermodynamics.h	/^  reio_inter       \/**< linear interpolation between specified points *\/$/;"	e	enum:reionization_parametrization
reio_inter_num	../include/thermodynamics.h	/^  int reio_inter_num; \/**< with how many jumps do we want to describe reionization? *\/$/;"	m	struct:thermo
reio_inter_xe	../include/thermodynamics.h	/^  double * reio_inter_xe; \/**< discrete \\f$ X_e(z)\\f$ values *\/$/;"	m	struct:thermo
reio_inter_z	../include/thermodynamics.h	/^  double * reio_inter_z; \/**< discrete z values *\/$/;"	m	struct:thermo
reio_many_tanh	../include/thermodynamics.h	/^  reio_many_tanh,  \/**< similar to reio_camb but with more than one tanh *\/$/;"	e	enum:reionization_parametrization
reio_none	../include/thermodynamics.h	/^  reio_none, \/**< no reionization *\/$/;"	e	enum:reionization_parametrization
reio_num_params	../include/thermodynamics.h	/^  int reio_num_params; \/**< length of vector reionization_parameters *\/$/;"	m	struct:reionization
reio_num_z	../include/thermodynamics.h	/^  int reio_num_z; \/**< number of reionization jumps *\/$/;"	m	struct:reionization
reio_parametrization	../include/thermodynamics.h	/^  enum reionization_parametrization reio_parametrization; \/**< reionization scheme *\/$/;"	m	struct:thermo	typeref:enum:thermo::reionization_parametrization
reio_tau	../include/thermodynamics.h	/^  reio_tau \/**< input = tau *\/$/;"	e	enum:reionization_z_or_tau
reio_z	../include/thermodynamics.h	/^  reio_z,  \/**< input = redshift *\/$/;"	e	enum:reionization_z_or_tau
reio_z_or_tau	../include/thermodynamics.h	/^  enum reionization_z_or_tau reio_z_or_tau; \/**< is the input parameter the reionization redshift or optical depth? *\/$/;"	m	struct:thermo	typeref:enum:thermo::reionization_z_or_tau
reionization	../include/thermodynamics.h	/^struct reionization {$/;"	s
reionization_exponent	../include/thermodynamics.h	/^  double reionization_exponent; \/**< shape of H reionization *\/$/;"	m	struct:thermo
reionization_optical_depth	../include/thermodynamics.h	/^  double reionization_optical_depth; \/**< reionization optical depth inferred from reionization history *\/$/;"	m	struct:reionization
reionization_parameters	../include/thermodynamics.h	/^  double * reionization_parameters; \/**< vector containing all reionization parameters necessary to compute xe(z) *\/$/;"	m	struct:reionization
reionization_parametrization	../include/thermodynamics.h	/^enum reionization_parametrization {$/;"	g
reionization_table	../include/thermodynamics.h	/^  double * reionization_table; \/**< table reionization_table[index_z*preio->re_size+index_re] with all other quantities (array of size preio->rt_size*preio->re_size) *\/$/;"	m	struct:reionization
reionization_width	../include/thermodynamics.h	/^  double reionization_width; \/**< width of H reionization *\/$/;"	m	struct:thermo
reionization_z_or_tau	../include/thermodynamics.h	/^enum reionization_z_or_tau {$/;"	g
repeated_pattern	../include/evolver_ndf15.h	/^	int repeated_pattern;$/;"	m	struct:jacobian
required_computation_stage	../include/input.h	/^  enum computation_stage required_computation_stage;$/;"	m	struct:fzerofun_workspace	typeref:enum:fzerofun_workspace::computation_stage
rho_plus_p_shear	../include/perturbations.h	/^  double rho_plus_p_shear;	\/**< total (rho+p)*shear (gives delta Tij) *\/$/;"	m	struct:perturb_workspace
rho_plus_p_theta	../include/perturbations.h	/^  double rho_plus_p_theta;	\/**< total (rho+p)*theta perturbation (gives delta Toi) *\/$/;"	m	struct:perturb_workspace
rho_plus_p_theta_fld	../include/perturbations.h	/^  double rho_plus_p_theta_fld; \/**< velocity divergence of fluid, not so trivial in PPF scheme *\/$/;"	m	struct:perturb_workspace
rho_plus_p_tot	../include/perturbations.h	/^  double rho_plus_p_tot;    \/**< total (rho+p) (used to infer theta_tot from rho_plus_p_theta) *\/$/;"	m	struct:perturb_workspace
right	../include/quadrature.h	/^  struct  adaptive_integration_tree_node *left, *right;	\/* Pointer to left child. *\/$/;"	m	struct:adaptive_integration_tree_node	typeref:struct:adaptive_integration_tree_node::
right_border	../include/hermite3_interpolation_csource.h	/^double left_border, right_border, next_border;$/;"	v
right_border	../include/hermite4_interpolation_csource.h	/^double left_border, right_border, next_border;$/;"	v
right_border	../include/hermite6_interpolation_csource.h	/^double left_border, right_border, next_border;$/;"	v
right_border	../tools/hermite3_interpolation_csource.h	/^double left_border, right_border, next_border;$/;"	v
right_border	../tools/hermite4_interpolation_csource.h	/^double left_border, right_border, next_border;$/;"	v
right_border	../tools/hermite6_interpolation_csource.h	/^double left_border, right_border, next_border;$/;"	v
rk	../include/common.h	/^  rk, \/* Runge-Kutta integrator *\/$/;"	e	enum:evolver_type
rkck	../tools/dei_rkck.c	/^int rkck($/;"	f
rkqs	../tools/dei_rkck.c	/^int rkqs(double *x, double htry, double eps,$/;"	f
root	../include/output.h	/^  char root[_FILENAMESIZE_-32]; \/**< root for all file names *\/$/;"	m	struct:output
rs_d	../include/thermodynamics.h	/^  double rs_d;    \/**< comoving sound horizon at baryon drag *\/$/;"	m	struct:thermo
rs_drag	../cpp/ClassEngine.hh	/^  inline double rs_drag() const {return th.rs_d;} $/;"	f	class:ClassEngine
rs_rec	../include/thermodynamics.h	/^  double rs_rec;  \/**< comoving sound horizon at recombination *\/$/;"	m	struct:thermo
rs_star	../include/thermodynamics.h	/^  double rs_star; \/**< comoving sound horizon at z_star *\/$/;"	m	struct:thermo
rsa_MD	../include/perturbations.h	/^enum rsa_method {rsa_null,rsa_MD,rsa_MD_with_reio,rsa_none};$/;"	e	enum:rsa_method
rsa_MD_with_reio	../include/perturbations.h	/^enum rsa_method {rsa_null,rsa_MD,rsa_MD_with_reio,rsa_none};$/;"	e	enum:rsa_method
rsa_delta_g	../include/perturbations.h	/^  double rsa_delta_g;  \/**< photon density in radiation streaming approximation *\/$/;"	m	struct:perturb_workspace
rsa_delta_idr	../include/perturbations.h	/^  double rsa_delta_idr; \/**< interacting dark radiation density in dark radiation streaming approximation *\/$/;"	m	struct:perturb_workspace
rsa_delta_ur	../include/perturbations.h	/^  double rsa_delta_ur; \/**< photon density in radiation streaming approximation *\/$/;"	m	struct:perturb_workspace
rsa_flags	../include/perturbations.h	/^enum rsa_flags {rsa_off, rsa_on};$/;"	g
rsa_idr_MD	../include/perturbations.h	/^enum rsa_idr_method {rsa_idr_none,rsa_idr_MD};  \/* for the idm-idr case *\/$/;"	e	enum:rsa_idr_method
rsa_idr_flags	../include/perturbations.h	/^enum rsa_idr_flags {rsa_idr_off, rsa_idr_on};$/;"	g
rsa_idr_method	../include/perturbations.h	/^enum rsa_idr_method {rsa_idr_none,rsa_idr_MD};  \/* for the idm-idr case *\/$/;"	g
rsa_idr_none	../include/perturbations.h	/^enum rsa_idr_method {rsa_idr_none,rsa_idr_MD};  \/* for the idm-idr case *\/$/;"	e	enum:rsa_idr_method
rsa_idr_off	../include/perturbations.h	/^enum rsa_idr_flags {rsa_idr_off, rsa_idr_on};$/;"	e	enum:rsa_idr_flags
rsa_idr_on	../include/perturbations.h	/^enum rsa_idr_flags {rsa_idr_off, rsa_idr_on};$/;"	e	enum:rsa_idr_flags
rsa_method	../include/perturbations.h	/^enum rsa_method {rsa_null,rsa_MD,rsa_MD_with_reio,rsa_none};$/;"	g
rsa_none	../include/perturbations.h	/^enum rsa_method {rsa_null,rsa_MD,rsa_MD_with_reio,rsa_none};$/;"	e	enum:rsa_method
rsa_null	../include/perturbations.h	/^enum rsa_method {rsa_null,rsa_MD,rsa_MD_with_reio,rsa_none};$/;"	e	enum:rsa_method
rsa_off	../include/perturbations.h	/^enum rsa_flags {rsa_off, rsa_on};$/;"	e	enum:rsa_flags
rsa_on	../include/perturbations.h	/^enum rsa_flags {rsa_off, rsa_on};$/;"	e	enum:rsa_flags
rsa_theta_g	../include/perturbations.h	/^  double rsa_theta_g;  \/**< photon velocity in radiation streaming approximation *\/$/;"	m	struct:perturb_workspace
rsa_theta_idr	../include/perturbations.h	/^  double rsa_theta_idr; \/**< interacting dark radiation velocity in dark radiation streaming approximation *\/$/;"	m	struct:perturb_workspace
rsa_theta_ur	../include/perturbations.h	/^  double rsa_theta_ur; \/**< photon velocity in radiation streaming approximation *\/$/;"	m	struct:perturb_workspace
rt_size	../include/thermodynamics.h	/^  int rt_size;                 \/**< number of lines (redshift steps) in the table *\/$/;"	m	struct:reionization
rt_size	../include/thermodynamics.h	/^  int rt_size; \/**< number of lines (redshift steps) in the table *\/$/;"	m	struct:recombination
rtab	../include/nonlinear.h	/^  double * rtab; \/** List of R values *\/$/;"	m	struct:nonlinear_workspace
running	../include/primordial.h	/^  double ** running;   \/**< all runnings in matrix form: running[index_md][index_ic1_ic2] *\/$/;"	m	struct:primordial
s_l	../include/perturbations.h	/^  double * s_l;     \/**< array of freestreaming coefficients \\f$ s_l = \\sqrt{1-K*(l^2-1)\/k^2} \\f$*\/$/;"	m	struct:perturb_workspace
scalar_perturbations_data	../include/perturbations.h	/^  double * scalar_perturbations_data[_MAX_NUMBER_OF_K_FILES_]; \/**< Array of double pointers to perturbation output for scalars *\/$/;"	m	struct:perturbs
scalar_titles	../include/perturbations.h	/^  char scalar_titles[_MAXTITLESTRINGLENGTH_]; \/**< _DELIMITER_ separated string of titles for scalar perturbation output files. *\/$/;"	m	struct:perturbs
scf_parameters	../include/background.h	/^  double * scf_parameters;  \/**< list of parameters describing the scalar field potential *\/$/;"	m	struct:background
scf_parameters_size	../include/background.h	/^  int scf_parameters_size;  \/**< size of scf_parameters *\/$/;"	m	struct:background
scf_tuning_index	../include/background.h	/^  int scf_tuning_index;     \/**< index in scf_parameters used for tuning *\/$/;"	m	struct:background
second_order_CLASS	../include/perturbations.h	/^enum tca_method {first_order_MB,first_order_CAMB,first_order_CLASS,second_order_CRS,second_order_CLASS,compromise_CLASS};$/;"	e	enum:tca_method
second_order_CRS	../include/perturbations.h	/^enum tca_method {first_order_MB,first_order_CAMB,first_order_CLASS,second_order_CRS,second_order_CLASS,compromise_CLASS};$/;"	e	enum:tca_method
selection	../include/perturbations.h	/^  enum selection_type selection;                \/**< type of selection functions *\/$/;"	m	struct:perturbs	typeref:enum:perturbs::selection_type
selection_bias	../include/transfer.h	/^  double selection_bias[_SELECTION_NUM_MAX_];               \/**< light-to-mass bias in the transfer function of density number count *\/$/;"	m	struct:transfers
selection_delta_tau	../include/perturbations.h	/^  double selection_delta_tau; \/**< used in presence of selection functions (for matter density, cosmic shear...) *\/$/;"	m	struct:perturbs
selection_function	../include/perturbations.h	/^  double * selection_function; \/**< selection function W(tau), normalized to \\f$ \\int W(tau) dtau=1 \\f$, stored in selection_function[bin*ppt->tau_size+index_tau] *\/$/;"	m	struct:perturbs
selection_magnification_bias	../include/transfer.h	/^  double selection_magnification_bias[_SELECTION_NUM_MAX_]; \/**< magnification bias in the transfer function of density number count *\/$/;"	m	struct:transfers
selection_max_of_tau_max	../include/perturbations.h	/^  double selection_max_of_tau_max; \/**< used in presence of selection functions (for matter density, cosmic shear...) *\/$/;"	m	struct:perturbs
selection_mean	../include/perturbations.h	/^  double selection_mean[_SELECTION_NUM_MAX_]; \/**< centers of selection functions *\/$/;"	m	struct:perturbs
selection_min_of_tau_min	../include/perturbations.h	/^  double selection_min_of_tau_min; \/**< used in presence of selection functions (for matter density, cosmic shear...) *\/$/;"	m	struct:perturbs
selection_num	../include/perturbations.h	/^  int selection_num;                            \/**< number of selection functions$/;"	m	struct:perturbs
selection_tau	../include/perturbations.h	/^  double * selection_tau; \/**< value of conformal time at the center of each bin *\/$/;"	m	struct:perturbs
selection_tau_max	../include/perturbations.h	/^  double * selection_tau_max; \/**< value of conformal time above which W(tau) is considered to vanish for each bin *\/$/;"	m	struct:perturbs
selection_tau_min	../include/perturbations.h	/^  double * selection_tau_min; \/**< value of conformal time below which W(tau) is considered to vanish for each bin *\/$/;"	m	struct:perturbs
selection_type	../include/perturbations.h	/^enum selection_type {gaussian,tophat,dirac};$/;"	g
selection_width	../include/perturbations.h	/^  double selection_width[_SELECTION_NUM_MAX_];  \/**< widths of selection functions *\/$/;"	m	struct:perturbs
sgnK	../include/background.h	/^  int sgnK; \/**< K\/|K|: -1, 0 or 1 *\/$/;"	m	struct:background
sgnK	../include/transfer.h	/^  int sgnK; \/**< 0 (flat), 1 (positive curvature, spherical, closed), -1 (negative curvature, hyperbolic, open) *\/$/;"	m	struct:transfer_workspace
shear_ncdm	../include/perturbations.h	/^  double * shear_ncdm;	\/**< shear for each ncdm species *\/$/;"	m	struct:perturb_workspace
shooting_error	../include/background.h	/^  ErrorMsg shooting_error; \/**< Error message from shooting failed. *\/$/;"	m	struct:background
shooting_failed	../include/background.h	/^  short shooting_failed;  \/**< flag is set to true if shooting failed. *\/$/;"	m	struct:background
short_info	../include/background.h	/^  short short_info;  \/**< flag for calling background_at_eta and return little information *\/$/;"	m	struct:background
sigma8	../include/input.h	/^enum target_names {theta_s, Omega_dcdmdr, omega_dcdmdr, Omega_scf, Omega_ini_dcdm, omega_ini_dcdm, sigma8};$/;"	e	enum:target_names
sigma8	../include/nonlinear.h	/^  double * sigma8;   \/**< sigma8[index_pk] *\/$/;"	m	struct:nonlinear
sigma_8	../include/nonlinear.h	/^  double ** sigma_8;$/;"	m	struct:nonlinear_workspace
sigma_disp	../include/nonlinear.h	/^  double ** sigma_disp;$/;"	m	struct:nonlinear_workspace
sigma_disp_100	../include/nonlinear.h	/^  double ** sigma_disp_100;$/;"	m	struct:nonlinear_workspace
sigma_prime	../include/nonlinear.h	/^  double ** sigma_prime;$/;"	m	struct:nonlinear_workspace
sinK	../include/hermite3_interpolation_csource.h	/^double *sinK = pHIS->sinK;$/;"	v
sinK	../include/hermite4_interpolation_csource.h	/^double *sinK = pHIS->sinK;$/;"	v
sinK	../include/hermite6_interpolation_csource.h	/^double beta, beta2, *xvec, *sinK, *cotK;$/;"	v
sinK	../include/hyperspherical.h	/^  double *sinK;          \/\/Vector of sin_K(xvec)$/;"	m	struct:HypersphericalInterpolationStructure
sinK	../tools/hermite3_interpolation_csource.h	/^double *sinK = pHIS->sinK;$/;"	v
sinK	../tools/hermite4_interpolation_csource.h	/^double *sinK = pHIS->sinK;$/;"	v
sinK	../tools/hermite6_interpolation_csource.h	/^double beta, beta2, *xvec, *sinK, *cotK;$/;"	v
sinKm	../include/hermite3_interpolation_csource.h	/^double cotKm=0,sinKm=0;$/;"	v
sinKm	../include/hermite4_interpolation_csource.h	/^double cotKm=0,cotKp=0,sinKm=0,sinKp=0;$/;"	v
sinKm	../include/hermite6_interpolation_csource.h	/^double cotKm=0,cotKp=0,sinKm=0,sinKp=0, sinKm2, sinKp2;$/;"	v
sinKm	../tools/hermite3_interpolation_csource.h	/^double cotKm=0,sinKm=0;$/;"	v
sinKm	../tools/hermite4_interpolation_csource.h	/^double cotKm=0,cotKp=0,sinKm=0,sinKp=0;$/;"	v
sinKm	../tools/hermite6_interpolation_csource.h	/^double cotKm=0,cotKp=0,sinKm=0,sinKp=0, sinKm2, sinKp2;$/;"	v
sinKm2	../include/hermite3_interpolation_csource.h	/^double sinKm2;$/;"	v
sinKm2	../include/hermite4_interpolation_csource.h	/^double sinKm2, sinKp2;$/;"	v
sinKm2	../include/hermite6_interpolation_csource.h	/^double cotKm=0,cotKp=0,sinKm=0,sinKp=0, sinKm2, sinKp2;$/;"	v
sinKm2	../tools/hermite3_interpolation_csource.h	/^double sinKm2;$/;"	v
sinKm2	../tools/hermite4_interpolation_csource.h	/^double sinKm2, sinKp2;$/;"	v
sinKm2	../tools/hermite6_interpolation_csource.h	/^double cotKm=0,cotKp=0,sinKm=0,sinKp=0, sinKm2, sinKp2;$/;"	v
sinKp	../include/hermite3_interpolation_csource.h	/^double cotKp=0,sinKp=0;$/;"	v
sinKp	../include/hermite4_interpolation_csource.h	/^double cotKm=0,cotKp=0,sinKm=0,sinKp=0;$/;"	v
sinKp	../include/hermite6_interpolation_csource.h	/^double cotKm=0,cotKp=0,sinKm=0,sinKp=0, sinKm2, sinKp2;$/;"	v
sinKp	../tools/hermite3_interpolation_csource.h	/^double cotKp=0,sinKp=0;$/;"	v
sinKp	../tools/hermite4_interpolation_csource.h	/^double cotKm=0,cotKp=0,sinKm=0,sinKp=0;$/;"	v
sinKp	../tools/hermite6_interpolation_csource.h	/^double cotKm=0,cotKp=0,sinKm=0,sinKp=0, sinKm2, sinKp2;$/;"	v
sinKp2	../include/hermite3_interpolation_csource.h	/^double sinKp2;$/;"	v
sinKp2	../include/hermite4_interpolation_csource.h	/^double sinKm2, sinKp2;$/;"	v
sinKp2	../include/hermite6_interpolation_csource.h	/^double cotKm=0,cotKp=0,sinKm=0,sinKp=0, sinKm2, sinKp2;$/;"	v
sinKp2	../tools/hermite3_interpolation_csource.h	/^double sinKp2;$/;"	v
sinKp2	../tools/hermite4_interpolation_csource.h	/^double sinKm2, sinKp2;$/;"	v
sinKp2	../tools/hermite6_interpolation_csource.h	/^double cotKm=0,cotKp=0,sinKm=0,sinKp=0, sinKm2, sinKp2;$/;"	v
sine_integral	../tools/trigonometric_integrals.c	/^int sine_integral($/;"	f
size	../cpp/ClassEngine.hh	/^  inline unsigned size() const {return pars.size();}$/;"	f	class:ClassParams
size	../include/parser.h	/^  int size;$/;"	m	struct:file_content
size_scalar_perturbation_data	../include/perturbations.h	/^  int size_scalar_perturbation_data[_MAX_NUMBER_OF_K_FILES_]; \/**< Array of sizes of scalar double pointers  *\/$/;"	m	struct:perturbs
size_tensor_perturbation_data	../include/perturbations.h	/^  int size_tensor_perturbation_data[_MAX_NUMBER_OF_K_FILES_]; \/**< Array of sizes of tensor double pointers  *\/$/;"	m	struct:perturbs
size_vector_perturbation_data	../include/perturbations.h	/^  int size_vector_perturbation_data[_MAX_NUMBER_OF_K_FILES_]; \/**< Array of sizes of vector double pointers  *\/$/;"	m	struct:perturbs
smallest_allowed_variation	../include/common.h	/^  double smallest_allowed_variation; \/**< machine-dependent, assigned automatically by the code *\/$/;"	m	struct:precision
sort_x_and_w	../tools/quadrature.c	/^int sort_x_and_w(double *x, double *w, double *workx, double *workw, int startidx, int endidx){$/;"	f
source_extrapolation	../include/nonlinear.h	/^enum source_extrapolation {extrap_zero,extrap_only_max,extrap_only_max_units,extrap_max_scaled,extrap_hmcode,extrap_user_defined};$/;"	g
sources	../include/perturbations.h	/^  double *** sources; \/**< Pointer towards the source interpolation table$/;"	m	struct:perturbs
sources	../include/transfer.h	/^  double * sources;              \/**< sources[index_tau]: sources$/;"	m	struct:transfer_workspace
sp	../cpp/ClassEngine.hh	/^  struct spectra sp;          \/* for output spectra *\/$/;"	m	class:ClassEngine	typeref:struct:ClassEngine::spectra
spJ	../include/evolver_ndf15.h	/^	sp_mat *spJ; \/* Stores the matrix we want to decompose *\/$/;"	m	struct:jacobian
sp_amd	../tools/sparse.c	/^int sp_amd(int *Cp, int *Ci, int n, int nzmax, int *P, int *W){$/;"	f
sp_ludcmp	../tools/sparse.c	/^int sp_ludcmp(sp_num *N, sp_mat *A, double pivtol){$/;"	f
sp_lusolve	../tools/sparse.c	/^int sp_lusolve(sp_num *N, double *b, double *x){$/;"	f
sp_mat	../include/sparse.h	/^} sp_mat;$/;"	t	typeref:struct:sparse_matrix
sp_mat_alloc	../tools/sparse.c	/^int sp_mat_alloc(sp_mat** A, int ncols, int nrows, int maxnz, ErrorMsg error_message){$/;"	f
sp_mat_free	../tools/sparse.c	/^int sp_mat_free(sp_mat *A){$/;"	f
sp_num	../include/sparse.h	/^} sp_num;$/;"	t	typeref:struct:sparse_numerical
sp_num_alloc	../tools/sparse.c	/^int sp_num_alloc(sp_num** N, int n, ErrorMsg error_message){$/;"	f
sp_num_free	../tools/sparse.c	/^int sp_num_free(sp_num *N){$/;"	f
sp_refactor	../tools/sparse.c	/^int sp_refactor(sp_num *N, sp_mat *A){$/;"	f
sp_splsolve	../tools/sparse.c	/^int sp_splsolve(sp_mat *G, sp_mat *B, int k, int*xik, int top, double *x, int *pinv){$/;"	f
sp_tdfs	../tools/sparse.c	/^int sp_tdfs(int j, int k, int *head, const int *next, int *post, int *stack){$/;"	f
sp_wclear	../tools/sparse.c	/^int sp_wclear(int mark, int lemax, int *w, int n){$/;"	f
sparse_matrix	../include/sparse.h	/^typedef struct sparse_matrix{$/;"	s
sparse_numerical	../include/sparse.h	/^typedef struct sparse_numerical{$/;"	s
sparse_stuff_initialized	../include/evolver_ndf15.h	/^	int sparse_stuff_initialized;$/;"	m	struct:jacobian
spatial_curvature	../include/background.h	/^enum spatial_curvature {flat,open,closed};$/;"	g
spectra	../include/spectra.h	/^struct spectra {$/;"	s
spectra_cl_at_l	spectra.c	/^int spectra_cl_at_l($/;"	f
spectra_cls	spectra.c	/^int spectra_cls($/;"	f
spectra_compute_cl	spectra.c	/^int spectra_compute_cl($/;"	f
spectra_fast_pk_at_kvec_and_zvec	spectra.c	/^int spectra_fast_pk_at_kvec_and_zvec($/;"	f
spectra_free	spectra.c	/^int spectra_free($/;"	f
spectra_indices	spectra.c	/^int spectra_indices($/;"	f
spectra_init	spectra.c	/^int spectra_init($/;"	f
spectra_pk_at_k_and_z	spectra.c	/^int spectra_pk_at_k_and_z($/;"	f
spectra_pk_at_z	spectra.c	/^int spectra_pk_at_z($/;"	f
spectra_pk_nl_at_k_and_z	spectra.c	/^int spectra_pk_nl_at_k_and_z($/;"	f
spectra_pk_nl_at_z	spectra.c	/^int spectra_pk_nl_at_z($/;"	f
spectra_sigma	spectra.c	/^int spectra_sigma($/;"	f
spectra_sigma_cb	spectra.c	/^int spectra_sigma_cb($/;"	f
spectra_tk_at_k_and_z	spectra.c	/^int spectra_tk_at_k_and_z($/;"	f
spectra_tk_at_z	spectra.c	/^int spectra_tk_at_z($/;"	f
spectra_verbose	../include/spectra.h	/^  short spectra_verbose; \/**< flag regulating the amount of information sent to standard output (none if set to zero) *\/$/;"	m	struct:spectra
stab	../include/nonlinear.h	/^  double * stab; \/** List of Sigma Values *\/$/;"	m	struct:nonlinear_workspace
stepmin	../include/dei_rkck.h	/^  double stepmin;$/;"	m	struct:generic_integrator_workspace
store_perturbations	../include/perturbations.h	/^  int store_perturbations;  \/**< Do we want to store perturbations? *\/$/;"	m	struct:perturbs
str	../cpp/ClassEngine.cc	/^std::string str (const char* s){return string(s);}$/;"	f
str	../cpp/ClassEngine.cc	/^template<> std::string str (const bool &x){$/;"	f
str	../cpp/ClassEngine.cc	/^template<> std::string str (const double &x){$/;"	f
str	../cpp/ClassEngine.cc	/^template<> std::string str (const float &x){$/;"	f
str	../cpp/ClassEngine.cc	/^template<> std::string str (const std::string &x) {return x;}$/;"	f
str	../cpp/ClassEngine.cc	/^template<typename T> std::string str(const T &x){$/;"	f
switch_dop	../include/perturbations.h	/^  int switch_dop;  \/**< in temperature calculation, do we want to include the Doppler term? *\/$/;"	m	struct:perturbs
switch_eisw	../include/perturbations.h	/^  int switch_eisw; \/**< in temperature calculation, do we want to include the early integrated Sachs Wolfe term? *\/$/;"	m	struct:perturbs
switch_lisw	../include/perturbations.h	/^  int switch_lisw; \/**< in temperature calculation, do we want to include the late integrated Sachs Wolfe term? *\/$/;"	m	struct:perturbs
switch_pol	../include/perturbations.h	/^  int switch_pol;  \/**< in temperature calculation, do we want to include the polarization-related term? *\/$/;"	m	struct:perturbs
switch_sw	../include/perturbations.h	/^  int switch_sw;   \/**< in temperature calculation, do we want to include the intrinsic temperature + Sachs Wolfe term? *\/$/;"	m	struct:perturbs
synchronous	../include/perturbations.h	/^  synchronous \/**< synchronous gauge with \\f$ \\theta_{cdm} = 0 \\f$ by convention *\/$/;"	e	enum:possible_gauges
sz	../include/growTable.h	/^  long sz;      \/**< total size *\/$/;"	m	struct:__anon1
tablesize	../include/background.h	/^  int tablesize;$/;"	m	struct:background_parameters_for_distributions
target_name	../include/input.h	/^  enum target_names * target_name;$/;"	m	struct:fzerofun_workspace	typeref:enum:fzerofun_workspace::target_names
target_names	../include/input.h	/^enum target_names {theta_s, Omega_dcdmdr, omega_dcdmdr, Omega_scf, Omega_ini_dcdm, omega_ini_dcdm, sigma8};$/;"	g
target_quantity	../include/primordial.h	/^enum target_quantity {$/;"	g
target_size	../include/input.h	/^  int target_size;$/;"	m	struct:fzerofun_workspace
target_value	../include/input.h	/^  double * target_value;$/;"	m	struct:fzerofun_workspace
tau	../include/nonlinear.h	/^  double * tau;    \/**< tau[index_tau] = list of time values, covering$/;"	m	struct:nonlinear
tau0_minus_tau	../include/transfer.h	/^  double * tau0_minus_tau;       \/**< tau0_minus_tau[index_tau]: values of (tau0 - tau) *\/$/;"	m	struct:transfer_workspace
tau0_minus_tau_cut	../include/transfer.h	/^  double tau0_minus_tau_cut; \/**< critical value of (tau0-tau) in time cut approximation for the wavenumber at hand *\/$/;"	m	struct:transfer_workspace
tau_cut	../include/thermodynamics.h	/^  double tau_cut; \/**< at at which the visibility goes below a fixed fraction of the maximum visibility, used for an approximation in perturbation module *\/$/;"	m	struct:thermo
tau_d	../include/thermodynamics.h	/^  double tau_d;   \/**< baryon drag time *\/$/;"	m	struct:thermo
tau_eq	../include/background.h	/^  double tau_eq;    \/**< conformal time at radiation\/matter equality [Mpc] *\/$/;"	m	struct:background
tau_free_streaming	../include/thermodynamics.h	/^  double tau_free_streaming;     \/**< minimum value of tau at which free-streaming approximation can be switched on *\/$/;"	m	struct:thermo
tau_idr_free_streaming	../include/thermodynamics.h	/^  double tau_idr_free_streaming; \/**< trigger for dark radiation free streaming approximation (idm-idr) *\/$/;"	m	struct:thermo
tau_ini	../include/thermodynamics.h	/^  double tau_ini; \/**< initial conformal time at which thermodynamical variables have been be integrated *\/$/;"	m	struct:thermo
tau_rec	../include/thermodynamics.h	/^  double tau_rec; \/**< conformal time at which the visibility reaches its maximum (= recombination time) *\/$/;"	m	struct:thermo
tau_reio	../include/thermodynamics.h	/^  double tau_reio; \/**< if above set to tau, input value of reionization optical depth *\/$/;"	m	struct:thermo
tau_sampling	../include/perturbations.h	/^  double * tau_sampling;    \/**< array of tau values *\/$/;"	m	struct:perturbs
tau_size	../include/nonlinear.h	/^  int tau_size;    \/**< tau_size = number of values *\/$/;"	m	struct:nonlinear
tau_size	../include/perturbations.h	/^  int tau_size;             \/**< number of values in this array *\/$/;"	m	struct:perturbs
tau_size	../include/transfer.h	/^  int tau_size;                  \/**< number of discrete time values for a given type *\/$/;"	m	struct:transfer_workspace
tau_size_max	../include/transfer.h	/^  int tau_size_max;              \/**< maximum number of discrete time values for all types *\/$/;"	m	struct:transfer_workspace
tau_star	../include/thermodynamics.h	/^  double tau_star;\/**< confirmal time at which photon optical depth crosses one *\/$/;"	m	struct:thermo
tau_table	../include/background.h	/^  double * tau_table;        \/**< vector tau_table[index_tau] with values of \\f$ \\tau \\f$ (conformal time) *\/$/;"	m	struct:background
tautable	../include/nonlinear.h	/^  double * tautable;$/;"	m	struct:nonlinear_workspace
tca_flags	../include/perturbations.h	/^enum tca_flags {tca_on, tca_off};$/;"	g
tca_idm_dr_flags	../include/perturbations.h	/^enum tca_idm_dr_flags {tca_idm_dr_on, tca_idm_dr_off};$/;"	g
tca_idm_dr_off	../include/perturbations.h	/^enum tca_idm_dr_flags {tca_idm_dr_on, tca_idm_dr_off};$/;"	e	enum:tca_idm_dr_flags
tca_idm_dr_on	../include/perturbations.h	/^enum tca_idm_dr_flags {tca_idm_dr_on, tca_idm_dr_off};$/;"	e	enum:tca_idm_dr_flags
tca_method	../include/perturbations.h	/^enum tca_method {first_order_MB,first_order_CAMB,first_order_CLASS,second_order_CRS,second_order_CLASS,compromise_CLASS};$/;"	g
tca_off	../include/perturbations.h	/^enum tca_flags {tca_on, tca_off};$/;"	e	enum:tca_flags
tca_on	../include/perturbations.h	/^enum tca_flags {tca_on, tca_off};$/;"	e	enum:tca_flags
tca_shear_g	../include/perturbations.h	/^  double tca_shear_g;  \/**< photon shear in tight-coupling approximation *\/$/;"	m	struct:perturb_workspace
tca_shear_idm_dr	../include/perturbations.h	/^  double tca_shear_idm_dr;\/**< interacting dark radiation shear in tight coupling appproximation *\/$/;"	m	struct:perturb_workspace
tca_slip	../include/perturbations.h	/^  double tca_slip;     \/**< photon-baryon slip in tight-coupling approximation *\/$/;"	m	struct:perturb_workspace
tensor_method	../include/perturbations.h	/^  enum tensor_methods tensor_method;  \/**< way to treat neutrinos in tensor perturbations(neglect, approximate as massless, take exact equations) *\/$/;"	m	struct:perturbs	typeref:enum:perturbs::tensor_methods
tensor_methods	../include/perturbations.h	/^enum tensor_methods {tm_photons_only,tm_massless_approximation,tm_exact};$/;"	g
tensor_perturbations_data	../include/perturbations.h	/^  double * tensor_perturbations_data[_MAX_NUMBER_OF_K_FILES_]; \/**< Array of double pointers to perturbation output for tensors *\/$/;"	m	struct:perturbs
tensor_titles	../include/perturbations.h	/^  char tensor_titles[_MAXTITLESTRINGLENGTH_]; \/**< _DELIMITER_ separated string of titles for tensor perturbation output files. *\/$/;"	m	struct:perturbs
th	../cpp/ClassEngine.hh	/^  struct thermo th;           \/* for thermodynamics *\/$/;"	m	class:ClassEngine	typeref:struct:ClassEngine::thermo
th_size	../include/thermodynamics.h	/^  int th_size;                \/**< size of thermodynamics vector *\/$/;"	m	struct:thermo
thermo	../include/thermodynamics.h	/^struct thermo$/;"	s
thermodynamics_at_z	thermodynamics.c	/^int thermodynamics_at_z($/;"	f
thermodynamics_derivs_with_recfast	thermodynamics.c	/^int thermodynamics_derivs_with_recfast($/;"	f
thermodynamics_energy_injection	thermodynamics.c	/^int thermodynamics_energy_injection($/;"	f
thermodynamics_free	thermodynamics.c	/^int thermodynamics_free($/;"	f
thermodynamics_get_xe_before_reionization	thermodynamics.c	/^int thermodynamics_get_xe_before_reionization($/;"	f
thermodynamics_helium_from_bbn	thermodynamics.c	/^int thermodynamics_helium_from_bbn($/;"	f
thermodynamics_indices	thermodynamics.c	/^int thermodynamics_indices($/;"	f
thermodynamics_init	thermodynamics.c	/^int thermodynamics_init($/;"	f
thermodynamics_merge_reco_and_reio	thermodynamics.c	/^int thermodynamics_merge_reco_and_reio($/;"	f
thermodynamics_onthespot_energy_injection	thermodynamics.c	/^int thermodynamics_onthespot_energy_injection($/;"	f
thermodynamics_output_data	thermodynamics.c	/^int thermodynamics_output_data(struct background * pba,$/;"	f
thermodynamics_output_titles	thermodynamics.c	/^int thermodynamics_output_titles(struct background * pba,$/;"	f
thermodynamics_parameters_and_workspace	../include/thermodynamics.h	/^struct thermodynamics_parameters_and_workspace {$/;"	s
thermodynamics_recombination	thermodynamics.c	/^int thermodynamics_recombination($/;"	f
thermodynamics_recombination_with_hyrec	thermodynamics.c	/^int thermodynamics_recombination_with_hyrec($/;"	f
thermodynamics_recombination_with_recfast	thermodynamics.c	/^int thermodynamics_recombination_with_recfast($/;"	f
thermodynamics_reionization	thermodynamics.c	/^int thermodynamics_reionization($/;"	f
thermodynamics_reionization_function	thermodynamics.c	/^int thermodynamics_reionization_function($/;"	f
thermodynamics_reionization_sample	thermodynamics.c	/^int thermodynamics_reionization_sample($/;"	f
thermodynamics_table	../include/thermodynamics.h	/^  double * thermodynamics_table; \/**< table thermodynamics_table[index_z*pth->tt_size+pba->index_th] with all other quantities (array of size th_size*tt_size) *\/$/;"	m	struct:thermo
thermodynamics_tanh	thermodynamics.c	/^int thermodynamics_tanh(double x,$/;"	f
thermodynamics_verbose	../include/thermodynamics.h	/^  short thermodynamics_verbose; \/**< flag regulating the amount of information sent to standard output (none if set to zero) *\/$/;"	m	struct:thermo
theta_cb	../include/perturbations.h	/^  double theta_cb;       \/**< velocity divergence theta of only cdm and baryon *\/$/;"	m	struct:perturb_workspace
theta_m	../include/perturbations.h	/^  double theta_m;	\/**< velocity divergence theta of all non-relativistic species *\/$/;"	m	struct:perturb_workspace
theta_ncdm	../include/perturbations.h	/^  double * theta_ncdm;	\/**< velocity divergence theta of each ncdm species *\/$/;"	m	struct:perturb_workspace
theta_s	../include/input.h	/^enum target_names {theta_s, Omega_dcdmdr, omega_dcdmdr, Omega_scf, Omega_ini_dcdm, omega_ini_dcdm, sigma8};$/;"	e	enum:target_names
three_ceff2_ur	../include/perturbations.h	/^  double three_ceff2_ur;\/**< 3 x effective squared sound speed for the ultrarelativistic perturbations *\/$/;"	m	struct:perturbs
three_cvis2_ur	../include/perturbations.h	/^  double three_cvis2_ur;\/**< 3 x effective viscosity parameter for the ultrarelativistic perturbations *\/$/;"	m	struct:perturbs
tilt	../include/primordial.h	/^  double ** tilt;      \/**< all tilts in matrix form: tilt[index_md][index_ic1_ic2] *\/$/;"	m	struct:primordial
time	../include/primordial.h	/^  enum time_definition time;$/;"	m	struct:primordial_inflation_parameters_and_workspace	typeref:enum:primordial_inflation_parameters_and_workspace::time_definition
time_definition	../include/primordial.h	/^enum time_definition {$/;"	g
tm_exact	../include/perturbations.h	/^enum tensor_methods {tm_photons_only,tm_massless_approximation,tm_exact};$/;"	e	enum:tensor_methods
tm_massless_approximation	../include/perturbations.h	/^enum tensor_methods {tm_photons_only,tm_massless_approximation,tm_exact};$/;"	e	enum:tensor_methods
tm_photons_only	../include/perturbations.h	/^enum tensor_methods {tm_photons_only,tm_massless_approximation,tm_exact};$/;"	e	enum:tensor_methods
tmp	../include/evolver_ndf15.h	/^	double * tmp;$/;"	m	struct:numjac_workspace
tophat	../include/perturbations.h	/^enum selection_type {gaussian,tophat,dirac};$/;"	e	enum:selection_type
topvec	../include/sparse.h	/^	int *topvec;	\/*topvec[k] holds the first index in xi[k].*\/$/;"	m	struct:sparse_numerical
tp_size	../include/perturbations.h	/^  int * tp_size; \/**< number of types tp_size[index_md] included in computation for each mode *\/$/;"	m	struct:perturbs
tr	../cpp/ClassEngine.hh	/^  struct transfers tr;        \/* for transfer functions *\/$/;"	m	class:ClassEngine	typeref:struct:ClassEngine::transfers
transfer	../include/transfer.h	/^  double ** transfer; \/**< table of transfer functions for each mode, initial condition, type, multipole and wavenumber, with argument transfer[index_md][((index_ic * ptr->tt_size[index_md] + index_tt) * ptr->l_size[index_md] + index_l) * ptr->q_size + index_q] *\/$/;"	m	struct:transfers
transfer_can_be_neglected	transfer.c	/^int transfer_can_be_neglected($/;"	f
transfer_compute_for_each_l	transfer.c	/^int transfer_compute_for_each_l($/;"	f
transfer_compute_for_each_q	transfer.c	/^int transfer_compute_for_each_q($/;"	f
transfer_dNdz_analytic	transfer.c	/^int transfer_dNdz_analytic($/;"	f
transfer_f_evo	transfer.c	/^int transfer_f_evo($/;"	f
transfer_free	transfer.c	/^int transfer_free($/;"	f
transfer_free_source_correspondence	transfer.c	/^int transfer_free_source_correspondence($/;"	f
transfer_functions_at_q	transfer.c	/^int transfer_functions_at_q($/;"	f
transfer_get_k_list	transfer.c	/^int transfer_get_k_list($/;"	f
transfer_get_l_list	transfer.c	/^int transfer_get_l_list($/;"	f
transfer_get_lmax	transfer.c	/^int transfer_get_lmax(int (*get_xmin_generic)(int sgnK,$/;"	f
transfer_get_q_list	transfer.c	/^int transfer_get_q_list($/;"	f
transfer_get_source_correspondence	transfer.c	/^int transfer_get_source_correspondence($/;"	f
transfer_global_selection_read	transfer.c	/^int transfer_global_selection_read($/;"	f
transfer_indices_of_transfers	transfer.c	/^int transfer_indices_of_transfers($/;"	f
transfer_init	transfer.c	/^int transfer_init($/;"	f
transfer_integrate	transfer.c	/^int transfer_integrate($/;"	f
transfer_interpolate_sources	transfer.c	/^int transfer_interpolate_sources($/;"	f
transfer_late_source_can_be_neglected	transfer.c	/^int transfer_late_source_can_be_neglected($/;"	f
transfer_lensing_sampling	transfer.c	/^int transfer_lensing_sampling($/;"	f
transfer_limber	transfer.c	/^int transfer_limber($/;"	f
transfer_limber2	transfer.c	/^int transfer_limber2($/;"	f
transfer_limber_interpolate	transfer.c	/^int transfer_limber_interpolate($/;"	f
transfer_perturbation_copy_sources_and_nl_corrections	transfer.c	/^int transfer_perturbation_copy_sources_and_nl_corrections($/;"	f
transfer_perturbation_source_spline	transfer.c	/^int transfer_perturbation_source_spline($/;"	f
transfer_perturbation_sources_free	transfer.c	/^int transfer_perturbation_sources_free($/;"	f
transfer_perturbation_sources_spline_free	transfer.c	/^int transfer_perturbation_sources_spline_free($/;"	f
transfer_precompute_selection	transfer.c	/^int transfer_precompute_selection($/;"	f
transfer_radial_coordinates	transfer.c	/^int transfer_radial_coordinates($/;"	f
transfer_radial_function	transfer.c	/^int transfer_radial_function($/;"	f
transfer_select_radial_function	transfer.c	/^int transfer_select_radial_function($/;"	f
transfer_selection_compute	transfer.c	/^int transfer_selection_compute($/;"	f
transfer_selection_function	transfer.c	/^int transfer_selection_function($/;"	f
transfer_selection_sampling	transfer.c	/^int transfer_selection_sampling($/;"	f
transfer_selection_times	transfer.c	/^int transfer_selection_times($/;"	f
transfer_source_resample	transfer.c	/^int transfer_source_resample($/;"	f
transfer_source_tau_size	transfer.c	/^int transfer_source_tau_size($/;"	f
transfer_source_tau_size_max	transfer.c	/^int transfer_source_tau_size_max($/;"	f
transfer_sources	transfer.c	/^int transfer_sources($/;"	f
transfer_update_HIS	transfer.c	/^int transfer_update_HIS($/;"	f
transfer_use_limber	transfer.c	/^int transfer_use_limber($/;"	f
transfer_verbose	../include/transfer.h	/^  short transfer_verbose; \/**< flag regulating the amount of information sent to standard output (none if set to zero) *\/$/;"	m	struct:transfers
transfer_workspace	../include/transfer.h	/^struct transfer_workspace {$/;"	s
transfer_workspace_free	transfer.c	/^int transfer_workspace_free($/;"	f
transfer_workspace_init	transfer.c	/^int transfer_workspace_init($/;"	f
transfers	../include/transfer.h	/^struct transfers {$/;"	s
trig_order	../include/hyperspherical.h	/^  int trig_order;        \/\/Order of the interpolation formula for SinK and CosK.$/;"	m	struct:HypersphericalInterpolationStructure
trust_sparse	../include/evolver_ndf15.h	/^	int trust_sparse; \/* Number of times a pattern is repeated (actually included) before we trust it. *\/$/;"	m	struct:jacobian
tt_size	../include/thermodynamics.h	/^  int tt_size; \/**< number of lines (redshift steps) in the tables *\/$/;"	m	struct:thermo
tt_size	../include/transfer.h	/^  int * tt_size;     \/**< number of requested transfer types tt_size[index_md] for each mode *\/$/;"	m	struct:transfers
two_scales	../include/primordial.h	/^  two_scales,$/;"	e	enum:primordial_spectrum_type
ufa_CLASS	../include/perturbations.h	/^enum ufa_method {ufa_mb,ufa_hu,ufa_CLASS,ufa_none};$/;"	e	enum:ufa_method
ufa_flags	../include/perturbations.h	/^enum ufa_flags {ufa_off, ufa_on};$/;"	g
ufa_hu	../include/perturbations.h	/^enum ufa_method {ufa_mb,ufa_hu,ufa_CLASS,ufa_none};$/;"	e	enum:ufa_method
ufa_mb	../include/perturbations.h	/^enum ufa_method {ufa_mb,ufa_hu,ufa_CLASS,ufa_none};$/;"	e	enum:ufa_method
ufa_method	../include/perturbations.h	/^enum ufa_method {ufa_mb,ufa_hu,ufa_CLASS,ufa_none};$/;"	g
ufa_none	../include/perturbations.h	/^enum ufa_method {ufa_mb,ufa_hu,ufa_CLASS,ufa_none};$/;"	e	enum:ufa_method
ufa_off	../include/perturbations.h	/^enum ufa_flags {ufa_off, ufa_on};$/;"	e	enum:ufa_flags
ufa_on	../include/perturbations.h	/^enum ufa_flags {ufa_off, ufa_on};$/;"	e	enum:ufa_flags
uninitialize_jacobian	../tools/evolver_ndf15.c	/^int uninitialize_jacobian(struct jacobian *jac){$/;"	f
uninitialize_numjac_workspace	../tools/evolver_ndf15.c	/^int uninitialize_numjac_workspace(struct numjac_workspace * nj_ws){$/;"	f
unknown_parameters_index	../include/input.h	/^  int * unknown_parameters_index;$/;"	m	struct:fzerofun_workspace
updateParValues	../cpp/ClassEngine.cc	/^bool ClassEngine::updateParValues(const std::vector<double>& par){$/;"	f	class:ClassEngine
use_ppf	../include/background.h	/^  short use_ppf; \/**< flag switching on PPF perturbation equations$/;"	m	struct:background
use_sparse	../include/evolver_ndf15.h	/^	int use_sparse;$/;"	m	struct:jacobian
used_in_sources	../include/perturbations.h	/^  int * used_in_sources; \/**< boolean array specifying which$/;"	m	struct:perturb_vector
value	../cpp/ClassEngine.hh	/^  inline string value(const unsigned& i) const {return pars[i].second;}$/;"	f	class:ClassParams
value	../include/parser.h	/^  FileArg * value; \/**< list of (size) values *\/$/;"	m	struct:file_content
vector_perturbations_data	../include/perturbations.h	/^  double * vector_perturbations_data[_MAX_NUMBER_OF_K_FILES_]; \/**< Array of double pointers to perturbation output for vectors *\/$/;"	m	struct:perturbs
vector_source_pi	../include/perturbations.h	/^  double vector_source_pi;	\/**< first stress-energy source term in Einstein's vector equations *\/$/;"	m	struct:perturb_workspace
vector_source_v	../include/perturbations.h	/^  double vector_source_v;	\/**< second stress-energy source term in Einstein's vector equations *\/$/;"	m	struct:perturb_workspace
vector_titles	../include/perturbations.h	/^  char vector_titles[_MAXTITLESTRINGLENGTH_]; \/**< _DELIMITER_ separated string of titles for vector perturbation output files. *\/$/;"	m	struct:perturbs
w	../include/quadrature.h	/^  double *w;		\/* Pointer to the corresponding weights *\/$/;"	m	struct:adaptive_integration_tree_node
w	../include/sparse.h	/^	double *w;		\/* Work array for sp_lu *\/$/;"	m	struct:sparse_numerical
w0_fld	../include/background.h	/^  double w0_fld; \/**< \\f$ w0_{DE} \\f$: current fluid equation of state parameter *\/$/;"	m	struct:background
w_ncdm	../include/background.h	/^  double ** w_ncdm;     \/**< Pointers to vectors of corresponding quadrature weights w *\/$/;"	m	struct:background
w_ncdm_bg	../include/background.h	/^  double ** w_ncdm_bg;  \/**< Pointers to vectors of corresponding quadrature weights w *\/$/;"	m	struct:background
w_trapz	../include/transfer.h	/^  double * w_trapz;              \/**< w_trapz[index_tau]: values of weights in trapezoidal integration (related to time steps) *\/$/;"	m	struct:transfer_workspace
wa_fld	../include/background.h	/^  double wa_fld; \/**< \\f$ wa_{DE} \\f$: fluid equation of state parameter derivative *\/$/;"	m	struct:background
wamd	../include/sparse.h	/^	int *wamd;		\/* Work array for sp_amd *\/$/;"	m	struct:sparse_numerical
writeCls	../cpp/Engine.cc	/^Engine::writeCls(std::ostream &of){$/;"	f	class:Engine
write_background	../include/output.h	/^  short write_background; \/**< flag for outputing background evolution in file *\/$/;"	m	struct:output
write_header	../include/output.h	/^  short write_header; \/**< flag stating whether we should write a header in output files *\/$/;"	m	struct:output
write_perturbations	../include/output.h	/^  short write_perturbations; \/**< flag for outputing perturbations of selected wavenumber(s) in file(s) *\/$/;"	m	struct:output
write_primordial	../include/output.h	/^  short write_primordial; \/**< flag for outputing scalar\/tensor primordial spectra in files *\/$/;"	m	struct:output
write_thermodynamics	../include/output.h	/^  short write_thermodynamics; \/**< flag for outputing thermodynamical evolution in file *\/$/;"	m	struct:output
x	../include/hermite3_interpolation_csource.h	/^double yp=0, dyp=0, x;$/;"	v
x	../include/hermite4_interpolation_csource.h	/^double ym=0, yp=0, dym=0, dyp=0, x;$/;"	v
x	../include/hermite6_interpolation_csource.h	/^double ym=0, yp=0, dym=0, dyp=0, d2ym=0, d2yp=0, x, z, z2, z3, z4, z5;$/;"	v
x	../include/hyperspherical.h	/^  double *x;          \/\/Pointer to x-values$/;"	m	struct:HypersphericalInterpolationStructure
x	../include/quadrature.h	/^  double *x;		\/* Pointer to the abscissas of node *\/$/;"	m	struct:adaptive_integration_tree_node
x	../tools/hermite3_interpolation_csource.h	/^double yp=0, dyp=0, x;$/;"	v
x	../tools/hermite4_interpolation_csource.h	/^double ym=0, yp=0, dym=0, dyp=0, x;$/;"	v
x	../tools/hermite6_interpolation_csource.h	/^double ym=0, yp=0, dym=0, dyp=0, d2ym=0, d2yp=0, x, z, z2, z3, z4, z5;$/;"	v
x_size	../include/hyperspherical.h	/^  int x_size;                \/\/Number of x-values$/;"	m	struct:HypersphericalInterpolationStructure
xi	../include/sparse.h	/^	int **xi;		\/*xi[k] points to a row of xi, which holds the topological ordered indices.*\/$/;"	m	struct:sparse_numerical
xjac	../include/evolver_ndf15.h	/^	double *xjac; \/*Stores the values of the sparse jacobian. (Same pattern as spJ) *\/$/;"	m	struct:jacobian
xmax	../include/hermite3_interpolation_csource.h	/^double xmin, xmax, deltax;$/;"	v
xmax	../include/hermite4_interpolation_csource.h	/^double xmin, xmax, deltax;$/;"	v
xmax	../include/hermite6_interpolation_csource.h	/^double xmin, xmax, deltax, deltax2, lxlp1;$/;"	v
xmax	../tools/hermite3_interpolation_csource.h	/^double xmin, xmax, deltax;$/;"	v
xmax	../tools/hermite4_interpolation_csource.h	/^double xmin, xmax, deltax;$/;"	v
xmax	../tools/hermite6_interpolation_csource.h	/^double xmin, xmax, deltax, deltax2, lxlp1;$/;"	v
xmin	../include/hermite3_interpolation_csource.h	/^double xmin, xmax, deltax;$/;"	v
xmin	../include/hermite4_interpolation_csource.h	/^double xmin, xmax, deltax;$/;"	v
xmin	../include/hermite6_interpolation_csource.h	/^double xmin, xmax, deltax, deltax2, lxlp1;$/;"	v
xmin	../tools/hermite3_interpolation_csource.h	/^double xmin, xmax, deltax;$/;"	v
xmin	../tools/hermite4_interpolation_csource.h	/^double xmin, xmax, deltax;$/;"	v
xmin	../tools/hermite6_interpolation_csource.h	/^double xmin, xmax, deltax, deltax2, lxlp1;$/;"	v
xvec	../include/hermite3_interpolation_csource.h	/^double *xvec;$/;"	v
xvec	../include/hermite4_interpolation_csource.h	/^double *xvec;$/;"	v
xvec	../include/hermite6_interpolation_csource.h	/^double beta, beta2, *xvec, *sinK, *cotK;$/;"	v
xvec	../tools/hermite3_interpolation_csource.h	/^double *xvec;$/;"	v
xvec	../tools/hermite4_interpolation_csource.h	/^double *xvec;$/;"	v
xvec	../tools/hermite6_interpolation_csource.h	/^double beta, beta2, *xvec, *sinK, *cotK;$/;"	v
y	../include/dei_rkck.h	/^  double * y;$/;"	m	struct:generic_integrator_workspace
y	../include/perturbations.h	/^  double * y;             \/**< vector of perturbations to be integrated *\/$/;"	m	struct:perturb_vector
ydel_Fdel	../include/evolver_ndf15.h	/^	double **ydel_Fdel;$/;"	m	struct:numjac_workspace
yerr	../include/dei_rkck.h	/^  double * yerr;$/;"	m	struct:generic_integrator_workspace
ym	../include/hermite3_interpolation_csource.h	/^double ym=0;$/;"	v
ym	../include/hermite4_interpolation_csource.h	/^double ym=0, yp=0, dym=0, dyp=0, x;$/;"	v
ym	../include/hermite6_interpolation_csource.h	/^double ym=0, yp=0, dym=0, dyp=0, d2ym=0, d2yp=0, x, z, z2, z3, z4, z5;$/;"	v
ym	../tools/hermite3_interpolation_csource.h	/^double ym=0;$/;"	v
ym	../tools/hermite4_interpolation_csource.h	/^double ym=0, yp=0, dym=0, dyp=0, x;$/;"	v
ym	../tools/hermite6_interpolation_csource.h	/^double ym=0, yp=0, dym=0, dyp=0, d2ym=0, d2yp=0, x, z, z2, z3, z4, z5;$/;"	v
yp	../include/hermite3_interpolation_csource.h	/^double yp=0, dyp=0, x;$/;"	v
yp	../include/hermite4_interpolation_csource.h	/^double ym=0, yp=0, dym=0, dyp=0, x;$/;"	v
yp	../include/hermite6_interpolation_csource.h	/^double ym=0, yp=0, dym=0, dyp=0, d2ym=0, d2yp=0, x, z, z2, z3, z4, z5;$/;"	v
yp	../tools/hermite3_interpolation_csource.h	/^double yp=0, dyp=0, x;$/;"	v
yp	../tools/hermite4_interpolation_csource.h	/^double ym=0, yp=0, dym=0, dyp=0, x;$/;"	v
yp	../tools/hermite6_interpolation_csource.h	/^double ym=0, yp=0, dym=0, dyp=0, d2ym=0, d2yp=0, x, z, z2, z3, z4, z5;$/;"	v
yscal	../include/dei_rkck.h	/^  double * yscal;$/;"	m	struct:generic_integrator_workspace
yscale	../include/evolver_ndf15.h	/^	double *yscale;$/;"	m	struct:numjac_workspace
ytemp	../include/dei_rkck.h	/^  double * ytemp;$/;"	m	struct:generic_integrator_workspace
ytempo	../include/dei_rkck.h	/^  double * ytempo;$/;"	m	struct:generic_integrator_workspace
yydel	../include/evolver_ndf15.h	/^	double * yydel;$/;"	m	struct:numjac_workspace
z	../include/hermite3_interpolation_csource.h	/^double z[2]={0.,0.};$/;"	v
z	../include/hermite4_interpolation_csource.h	/^double z[3]={0.,0.,0.};$/;"	v
z	../include/hermite6_interpolation_csource.h	/^double ym=0, yp=0, dym=0, dyp=0, d2ym=0, d2yp=0, x, z, z2, z3, z4, z5;$/;"	v
z	../tools/hermite3_interpolation_csource.h	/^double z[2]={0.,0.};$/;"	v
z	../tools/hermite4_interpolation_csource.h	/^double z[3]={0.,0.,0.};$/;"	v
z	../tools/hermite6_interpolation_csource.h	/^double ym=0, yp=0, dym=0, dyp=0, d2ym=0, d2yp=0, x, z, z2, z3, z4, z5;$/;"	v
z2	../include/hermite6_interpolation_csource.h	/^double ym=0, yp=0, dym=0, dyp=0, d2ym=0, d2yp=0, x, z, z2, z3, z4, z5;$/;"	v
z2	../tools/hermite6_interpolation_csource.h	/^double ym=0, yp=0, dym=0, dyp=0, d2ym=0, d2yp=0, x, z, z2, z3, z4, z5;$/;"	v
z3	../include/hermite6_interpolation_csource.h	/^double ym=0, yp=0, dym=0, dyp=0, d2ym=0, d2yp=0, x, z, z2, z3, z4, z5;$/;"	v
z3	../tools/hermite6_interpolation_csource.h	/^double ym=0, yp=0, dym=0, dyp=0, d2ym=0, d2yp=0, x, z, z2, z3, z4, z5;$/;"	v
z4	../include/hermite6_interpolation_csource.h	/^double ym=0, yp=0, dym=0, dyp=0, d2ym=0, d2yp=0, x, z, z2, z3, z4, z5;$/;"	v
z4	../tools/hermite6_interpolation_csource.h	/^double ym=0, yp=0, dym=0, dyp=0, d2ym=0, d2yp=0, x, z, z2, z3, z4, z5;$/;"	v
z5	../include/hermite6_interpolation_csource.h	/^double ym=0, yp=0, dym=0, dyp=0, d2ym=0, d2yp=0, x, z, z2, z3, z4, z5;$/;"	v
z5	../tools/hermite6_interpolation_csource.h	/^double ym=0, yp=0, dym=0, dyp=0, d2ym=0, d2yp=0, x, z, z2, z3, z4, z5;$/;"	v
z_d	../include/thermodynamics.h	/^  double z_d;     \/**< baryon drag redshift *\/$/;"	m	struct:thermo
z_drag	../cpp/ClassEngine.hh	/^  inline double z_drag() const {return th.z_d;}$/;"	f	class:ClassEngine
z_eq	../include/background.h	/^  double z_eq;      \/**< redshift at radiation\/matter equality *\/$/;"	m	struct:background
z_infinity	../include/nonlinear.h	/^  double z_infinity; \/** for HMcode: z value at which Dark Energy correction is evaluated needs to be at early times (default *\/$/;"	m	struct:nonlinear
z_max_pk	../include/perturbations.h	/^  double z_max_pk; \/**< when we compute only the matter spectrum \/ transfer functions, but not the CMB, we are sometimes interested to sample source functions at very high redshift, way before recombination. This z_max_pk will then fix the initial sampling time of the sources. *\/$/;"	m	struct:perturbs
z_max_pk	../include/spectra.h	/^  double z_max_pk;  \/**< maximum value of z at which matter spectrum P(k,z) will be evaluated; keep fixed to zero if P(k) only needed today *\/$/;"	m	struct:spectra
z_pk	../include/output.h	/^  double z_pk[_Z_PK_NUM_MAX_]; \/**< value(s) of redshift at which P(k,z) and T_i(k,z) should be written *\/$/;"	m	struct:output
z_pk_num	../include/output.h	/^  int z_pk_num; \/**< number of redshift at which P(k,z) and T_i(k,z) should be written *\/$/;"	m	struct:output
z_rec	../include/thermodynamics.h	/^  double z_rec;   \/**< z at which the visibility reaches its maximum (= recombination redshift) *\/$/;"	m	struct:thermo
z_reio	../include/thermodynamics.h	/^  double z_reio;   \/**< if above set to z,   input value of reionization redshift *\/$/;"	m	struct:thermo
z_star	../include/thermodynamics.h	/^  double z_star;  \/**< redshift at which photon optical depth crosses one *\/$/;"	m	struct:thermo
z_table	../include/background.h	/^  double * z_table;          \/**< vector z_table[index_tau] with values of \\f$ z \\f$ (redshift) *\/$/;"	m	struct:background
z_table	../include/thermodynamics.h	/^  double * z_table; \/**< vector z_table[index_z] with values of redshift (vector of size tt_size) *\/$/;"	m	struct:thermo
zpp_over_z	../include/primordial.h	/^  double zpp_over_z;$/;"	m	struct:primordial_inflation_parameters_and_workspace
ztable	../include/nonlinear.h	/^  double * ztable;$/;"	m	struct:nonlinear_workspace
~ClassEngine	../cpp/ClassEngine.cc	/^ClassEngine::~ClassEngine()$/;"	f	class:ClassEngine
~Engine	../cpp/Engine.hh	/^  virtual ~Engine(){};$/;"	f	class:Engine
