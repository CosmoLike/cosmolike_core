!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A2_ia	structs.c	/^  double A2_ia; \/\/placeholder param for quadratic,etc IA$/;"	m	struct:__anon20	file:
A2_ia	structs.c	/^  double A2_ia[2];$/;"	m	struct:__anon21	file:
A_IA_Joachimi	IA.c	/^double A_IA_Joachimi(double a){$/;"	f
A_LF	IA.c	/^double A_LF(double mag, double a){\/\/ averaged (L\/L_0)^beta over red galaxy LF$/;"	f
A_LF_all	IA.c	/^double A_LF_all(double mag, double a){\/\/ averaged (L\/L_0)^beta over red galaxy LF$/;"	f
A_ia	structs.c	/^    double  A_ia;$/;"	m	struct:input_nuisance_params	file:
A_ia	structs.c	/^  double A_ia; \/\/A IA see Joachimi2012$/;"	m	struct:__anon20	file:
A_ia	structs.c	/^  double A_ia[2]; \/\/A IA see Joachimi2012$/;"	m	struct:__anon21	file:
A_s	structs.c	/^     double A_s;$/;"	m	struct:__anon9	file:
A_s	structs.c	/^    double A_s;$/;"	m	struct:input_cosmo_params_mpp	file:
A_z	structs.c	/^    double  A_z[10];$/;"	m	struct:input_nuisance_params_mpp	file:
A_z	structs.c	/^  double A_z[10]; \/\/NLA normalization per source redshift bin, for mpp analyis (activate with like.IA =3)$/;"	m	struct:__anon20	file:
Aubourg_Planck_BAO_SN	structs.c	/^  int Aubourg_Planck_BAO_SN;$/;"	m	struct:__anon8	file:
B1	halo.c	/^double B1 (double m,double a){ \/\/b(m,a) based on redshift evolution fits in Tinker et al. paper, no additional normalization$/;"	f
B1_model	structs.c	/^typedef  double (*B1_model)(double z, int nz);$/;"	t	file:
B1_normalized	halo.c	/^double B1_normalized (double m,double a){ \/\/divide by bias norm only in matter spectra, not in HOD modeling\/cluster analyses$/;"	f
B1_nu	halo.c	/^double B1_nu (double n,double a){$/;"	f
BAO	BAO.c	/^baopara BAO;$/;"	v
BAO	structs.c	/^  int BAO;$/;"	m	struct:__anon8	file:
BOSS_Chuang	structs.c	/^  int BOSS_Chuang;$/;"	m	struct:__anon8	file:
C	structs.c	/^  cosmopara C;$/;"	m	struct:__anon19	file:
COS_shear_shear_tomo	EBfunctions.c	/^void COS_shear_shear_tomo(double *E,double *B,int ORDER,double vt_max, double vt_min,int ni, int nj)$/;"	f
COV_FILE	structs.c	/^  char COV_FILE[500]; $/;"	m	struct:__anon8	file:
CUBE	basics.c	33;"	d	file:
C_GI_JB_nointerp	IA.c	/^double C_GI_JB_nointerp(double s, int ni, int nj) $/;"	f
C_GI_lin_nointerp	IA.c	/^double C_GI_lin_nointerp(double s, int ni, int nj) $/;"	f
C_GI_nointerp	IA.c	/^double C_GI_nointerp(double s, int ni, int nj) $/;"	f
C_II_JB_nointerp	IA.c	/^double C_II_JB_nointerp(double s, int ni, int nj)$/;"	f
C_II_lin_nointerp	IA.c	/^double C_II_lin_nointerp(double s, int ni, int nj) $/;"	f
C_II_nointerp	IA.c	/^double C_II_nointerp(double s, int ni, int nj) $/;"	f
C_ccl_tomo	cluster.c	/^double C_ccl_tomo(double l, int nz1, int nN1, int nz2, int nN2){$/;"	f
C_ccl_tomo	clusters_DES.c	/^double C_ccl_tomo(double l, int nz1, int nN1, int nz2, int nN2){$/;"	f
C_cgl_tomo_nointerp	cluster.c	/^double C_cgl_tomo_nointerp(double l, int nz, int nN, int zs){$/;"	f
C_cgl_tomo_nointerp	clusters_DES.c	/^double C_cgl_tomo_nointerp(double l, int nz, int nN, int zs){$/;"	f
C_cgl_tomo_sys	like_fourier.c	/^double C_cgl_tomo_sys(double ell_Cluster, int zl,int nN, int zs)$/;"	f
C_cgl_tomo_sys	like_fourier_HOD.c	/^double C_cgl_tomo_sys(double ell_Cluster, int zl,int nN, int zs)$/;"	f
C_cl_HOD	cosmo2D_fourier.c	/^double C_cl_HOD(double l, int ni)  \/\/galaxy clustering power spectrum of galaxies in bin ni, using HOD model$/;"	f
C_cl_HOD_rm	redmagic_real.c	/^double C_cl_HOD_rm (double k){$/;"	f
C_cl_HOD_rm_1h	redmagic_real.c	/^double C_cl_HOD_rm_1h (double k){$/;"	f
C_cl_HOD_wrapper	cosmo2D_real.c	/^double C_cl_HOD_wrapper(double l,int ni, int nj){$/;"	f
C_cl_RSD	cosmo2D_exact.c	/^double C_cl_RSD(int l, int ni, int nj){$/;"	f
C_cl_g_rm_tomo	covariances_fourier_HOD.c	/^double C_cl_g_rm_tomo(double l, int nzc1, int nN1, int nzl1){$/;"	f
C_cl_g_tomo	cluster.c	/^double C_cl_g_tomo(double l, int nzc1, int nN1, int nzl1){$/;"	f
C_cl_g_tomo	clusters_DES.c	/^double C_cl_g_tomo(double l, int nzc1, int nN1, int nzl1){$/;"	f
C_cl_lin_nointerp	cosmo2D_fourier.c	/^double C_cl_lin_nointerp(double l, int ni, int nj)  \/\/galaxy clustering power spectrum of galaxy bins ni, nj$/;"	f
C_cl_non_Limber	cosmo2D_exact.c	/^double C_cl_non_Limber(int l, int ni, int nj){ \/\/includes RSD too!$/;"	f
C_cl_tomo	cosmo2D_fourier.c	/^double C_cl_tomo(double l, int ni, int nj)  \/\/galaxy clustering power spectrum of galaxies in bins ni, nj$/;"	f
C_cl_tomo_nointerp	cosmo2D_fourier.c	/^double C_cl_tomo_nointerp(double l, int ni, int nj)  \/\/galaxy clustering power spectrum of galaxy bins ni, nj$/;"	f
C_gI_JB_nointerp	IA.c	/^double C_gI_JB_nointerp(double s, int ni, int nj)$/;"	f
C_gI_lin_nointerp	IA.c	/^double C_gI_lin_nointerp(double s, int ni, int nj)$/;"	f
C_gI_nointerp	IA.c	/^double C_gI_nointerp(double s, int ni, int nj)$/;"	f
C_ggl_IA	IA.c	/^double C_ggl_IA(double s, int nl, int ns)$/;"	f
C_ggl_IA_tab	IA.c	/^double C_ggl_IA_tab(double l, int ni, int nj)  \/\/G-G lensing power spectrum, lens bin ni, source bin nj$/;"	f
C_gk	CMBxLSS.c	/^double C_gk(double l, int ni)$/;"	f
C_gk_nointerp	CMBxLSS.c	/^double C_gk_nointerp(double l, int nl)$/;"	f
C_gk_wrapper	CMBxLSS.c	/^double C_gk_wrapper(double l,int ni, int nj){$/;"	f
C_gl_HOD_tomo	cosmo2D_fourier.c	/^double C_gl_HOD_tomo(double l, int ni, int nj)  \/\/G-G lensing power spectrum, lens bin ni, source bin nj$/;"	f
C_gl_tomo	cosmo2D_fourier.c	/^double C_gl_tomo(double l, int ni, int nj)  \/\/G-G lensing power spectrum, lens bin ni, source bin nj$/;"	f
C_gl_tomo_HOD_sys	like_fourier_HOD.c	/^double C_gl_tomo_HOD_sys(double ell,int zl,int zs)$/;"	f
C_gl_tomo_all	covariances_real.c	/^double C_gl_tomo_all(double l, int ni, int nj)  \/\/slower version of G-G lensing power spectrum, lens bin ni, source bin nj - tabulated for all lens-source combinations without overlap criterion$/;"	f
C_gl_tomo_nointerp	cosmo2D_fourier.c	/^double C_gl_tomo_nointerp(double l, int ni, int nj)  \/\/G-G lensing power spectrum, lens bin ni, source bin nj$/;"	f
C_gl_tomo_sys	like_fourier.c	/^double C_gl_tomo_sys(double ell,int zl,int zs)$/;"	f
C_kk	CMBxLSS.c	/^double C_kk(double l)$/;"	f
C_kk_nointerp	CMBxLSS.c	/^double C_kk_nointerp(double l){$/;"	f
C_ks	CMBxLSS.c	/^double C_ks(double l, int ni)$/;"	f
C_ks_IA	CMBxLSS.c	/^double C_ks_IA(double s, int ni)$/;"	f
C_ks_nointerp	CMBxLSS.c	/^double C_ks_nointerp(double l, int ns) {$/;"	f
C_ks_wrapper	CMBxLSS.c	/^double C_ks_wrapper(double l,int ni, int nj){$/;"	f
C_magnification_magnification	magnification.c	/^double C_magnification_magnification(double s) $/;"	f
C_magnification_magnification_tomo	magnification.c	/^double C_magnification_magnification_tomo(double s, int ni, int nj) \/\/shear tomography power spectra$/;"	f
C_pos_mag	magnification.c	/^double C_pos_mag(double s) $/;"	f
C_pos_mag_tomo	magnification.c	/^double C_pos_mag_tomo(double s, int ni, int nj)  \/\/G-G lensing power spectrum, lens bin ni, source bin nj$/;"	f
C_shear_mag	magnification.c	/^double C_shear_mag(double s) $/;"	f
C_shear_mag_tomo	magnification.c	/^double C_shear_mag_tomo(double s, int ni, int nj) \/\/shear magnification tomography power spectra$/;"	f
C_shear_shear_IA	IA.c	/^double C_shear_shear_IA(double s, int ni, int nj)$/;"	f
C_shear_shear_IA_tab	IA.c	/^double C_shear_shear_IA_tab(double l, int ni, int nj)  \/\/shear power spectrum of source galaxies in bins ni, nj$/;"	f
C_shear_tomo	cosmo2D_fourier.c	/^double C_shear_tomo(double l, int ni, int nj)  \/\/shear power spectrum of source galaxies in bins ni, nj$/;"	f
C_shear_tomo_nointerp	cosmo2D_fourier.c	/^double C_shear_tomo_nointerp(double l, int ni, int nj) \/\/shear tomography power spectra of source galaxy bins ni, nj$/;"	f
C_shear_tomo_sys	like_fourier.c	/^double C_shear_tomo_sys(double ell, int z1, int z2)$/;"	f
C_shear_tomo_sys	like_fourier_HOD.c	/^double C_shear_tomo_sys(double ell, int z1, int z2)$/;"	f
C_tomo_pointer	cosmo2D_real.c	/^typedef  double (*C_tomo_pointer)(double l, int n1, int n2);$/;"	t	file:
Cluster	structs.c	/^clusterpara Cluster = {.model = "default"};$/;"	v
Cmb	structs.c	/^}Cmb;$/;"	t	typeref:struct:__anon13	file:
DATA_FILE	structs.c	/^  char DATA_FILE[500];$/;"	m	struct:__anon8	file:
DA_ref	GRS.c	/^   double DA_ref[10];$/;"	m	struct:__anon6	file:
DA_ref	structs.c	/^   double DA_ref[10];$/;"	m	struct:__anon24	file:
DIFF_A	structs.c	/^  double DIFF_A; \/\/difference fucntion describing the scale dependent uncertainty in Pdelta for k>0.01$/;"	m	struct:__anon17	file:
DIFF_n	structs.c	/^  double DIFF_n; \/\/difference fucntion describing the constant uncertainty in Pdelta for k>0.01$/;"	m	struct:__anon17	file:
DeltaLin_LD	covariances_3D.c	/^double DeltaLin_LD(double logk, void * params)$/;"	f
Delta_L_wiggle	cosmo3D.c	/^double Delta_L_wiggle(double k)$/;"	f
Delta_NL_Halofit	cosmo3D.c	/^double Delta_NL_Halofit(double k_NL, double a)$/;"	f
Delta_NL_emu	cosmo3D.c	/^double Delta_NL_emu(double k_NL,double a)$/;"	f
Delta_NL_emu_only	cosmo3D.c	/^double Delta_NL_emu_only(double k_NL,double a)$/;"	f
Delta_halofit	cosmo3D.c	/^void Delta_halofit(double **table_P_NL,double logkmin, double logkmax, double dk, double da)$/;"	f
EXIT_MISSING_FILE	basics.c	20;"	d	file:
FMAX	basics.c	25;"	d	file:
FMIN	basics.c	26;"	d	file:
FPT	structs.c	/^FPTpara FPT ={.k_min = 1.e-4, .k_max =1.e+3, .N = 70, .N_per_dec = 10, .N_AB = 6};$/;"	v
FPT_bias_interface	pt.c	/^void FPT_bias_interface(void){$/;"	f
FPT_input	pt.c	/^void FPT_input(double k[FPT.N], double P[FPT.N]){$/;"	f
FPTpara	structs.c	/^}FPTpara;$/;"	t	typeref:struct:__anon19	file:
FREE_ARG	basics.c	17;"	d	file:
G02	HOD.c	/^double G02 (double k, double a, int nz){\/\/needs to be devided by ngal(nz, a)^2$/;"	f
G02_rm	redmagic.c	/^double G02_rm (double k, double a){\/\/needs to be devided by ngal(nz, a)^2$/;"	f
G11	HOD.c	/^double G11 (double k, double a, int nz){ \/\/needs to be devided by ngal(nz, a)$/;"	f
GM02	HOD.c	/^double GM02 (double k, double a, int nz){\/\/needs to be devided by ngal(nz, a)$/;"	f
GM02_rm	redmagic.c	/^double GM02_rm (double k, double a){  \/\/needs to be devided by ngal_rm(nz, a)$/;"	f
GRS	GRS.c	/^GRSpara GRS;$/;"	v
GRS	structs.c	/^  int GRS;$/;"	m	struct:__anon8	file:
GRS_gal	GRS.c	/^GRS_galaxy_para GRS_gal;$/;"	v
GRS_galaxy_para	GRS.c	/^} GRS_galaxy_para;$/;"	t	typeref:struct:__anon7	file:
GRSpara	GRS.c	/^} GRSpara;$/;"	t	typeref:struct:__anon6	file:
GRSpara_mt	structs.c	/^} GRSpara_mt;$/;"	t	typeref:struct:__anon24	file:
H0_Efstathiou14	structs.c	/^  int H0_Efstathiou14;$/;"	m	struct:__anon8	file:
HOD_FILE	structs.c	/^  char HOD_FILE[500];$/;"	m	struct:__anon15	file:
HOD_rm	structs.c	/^  double HOD_rm[5][2];$/;"	m	struct:__anon22	file:
HSV_shear_shear_tomo	covariances_wl.c	/^double HSV_shear_shear_tomo(double l1, double l2,int z1, int z2, int z3, int z4){$/;"	f
H_ref	GRS.c	/^   double H_ref[10];$/;"	m	struct:__anon6	file:
H_ref	structs.c	/^   double H_ref[10];$/;"	m	struct:__anon24	file:
Halofit	cosmo3D.c	/^double Halofit(double k, double amp, double omm, double omv,double w_z, double R_NL, double neff,double Curv, double P_delta_Lin)$/;"	f
I0j	halo.c	/^double I0j (int j, double k1, double k2, double k3, double k4,double a){$/;"	f
I12_SSC	halo.c	/^double I12_SSC (double k,double a){\/\/one-halo term contribution to super sample covariance$/;"	f
I12_SSC_cm	covariances_cluster.c	/^double I12_SSC_cm(double k, double a, int nz, int nN){$/;"	f
I12_SSC_gg	covariances_fourier_HOD.c	/^double I12_SSC_gg (double k,double a){\/\/one-halo term contribution to super sample covariance$/;"	f
I12_SSC_gm	covariances_fourier_HOD.c	/^double I12_SSC_gm (double k,double a){\/\/one-halo term contribution to super sample covariance$/;"	f
I1j	halo.c	/^double I1j (int j, double k1, double k2, double k3,double a){$/;"	f
IA	structs.c	/^  int IA;$/;"	m	struct:__anon8	file:
INV_FILE	structs.c	/^  char INV_FILE[500]; $/;"	m	struct:__anon8	file:
I_11	halo.c	/^double I_11 (double k,double a){\/\/look-up table for I11 integral$/;"	f
K_CH0	pt.c	/^double K_CH0(double k_mpch){$/;"	f
K_MPCH	pt.c	/^double K_MPCH(double k_ch0){$/;"	f
Kcorrect_File	structs.c	/^     char Kcorrect_File[200];$/;"	m	struct:__anon12	file:
LD_term	covariances_3D.c	/^double LD_term(double k)$/;"	f
LF_P	structs.c	/^  double LF_P;$/;"	m	struct:__anon20	file:
LF_P	structs.c	/^  double LF_P[2];$/;"	m	struct:__anon21	file:
LF_Q	structs.c	/^  double LF_Q;$/;"	m	struct:__anon20	file:
LF_Q	structs.c	/^  double LF_Q[2];$/;"	m	struct:__anon21	file:
LF_alpha	structs.c	/^  double LF_alpha;$/;"	m	struct:__anon20	file:
LF_alpha	structs.c	/^  double LF_alpha[2];$/;"	m	struct:__anon21	file:
LF_red_P	structs.c	/^  double LF_red_P;$/;"	m	struct:__anon20	file:
LF_red_P	structs.c	/^  double LF_red_P[2];$/;"	m	struct:__anon21	file:
LF_red_Q	structs.c	/^  double LF_red_Q;$/;"	m	struct:__anon20	file:
LF_red_Q	structs.c	/^  double LF_red_Q[2];$/;"	m	struct:__anon21	file:
LF_red_alpha	structs.c	/^  double LF_red_alpha;$/;"	m	struct:__anon20	file:
LF_red_alpha	structs.c	/^  double LF_red_alpha[2];$/;"	m	struct:__anon21	file:
MASK_FILE	structs.c	/^  char MASK_FILE[500]; $/;"	m	struct:__anon8	file:
MGSigma	structs.c	/^     double MGSigma;$/;"	m	struct:__anon9	file:
MGSigma	structs.c	/^    double MGSigma;$/;"	m	struct:input_cosmo_params	file:
MGSigma	structs.c	/^    double MGSigma;$/;"	m	struct:input_cosmo_params_mpp	file:
MG_Sigma	cosmo2D_fourier.c	/^double MG_Sigma(double a)$/;"	f
MGmu	structs.c	/^     double MGmu;$/;"	m	struct:__anon9	file:
MGmu	structs.c	/^    double MGmu;$/;"	m	struct:input_cosmo_params	file:
MGmu	structs.c	/^    double MGmu;$/;"	m	struct:input_cosmo_params_mpp	file:
MOR	structs.c	/^    double  MOR[10];$/;"	m	struct:input_nuisance_params_mpp	file:
M_abs	IA.c	/^double M_abs(double mag, double a){ \/\/in h = 1 units, incl. Poggianti 1997 k+e-corrections$/;"	f
M_max	basics.c	/^     double M_max;$/;"	m	struct:__anon4	file:
M_min	basics.c	/^     double M_min;$/;"	m	struct:__anon4	file:
M_nu	structs.c	/^     double M_nu;$/;"	m	struct:__anon9	file:
N	BAO.c	/^  int N;$/;"	m	struct:__anon1	file:
N	structs.c	/^  int N;$/;"	m	struct:__anon19	file:
N200_Nbin	structs.c	/^  int  N200_Nbin;$/;"	m	struct:__anon16	file:
N200_completeness	cluster.c	/^double N200_completeness(int nz, int nN){$/;"	f
N200_completeness	clusters_DES.c	/^double N200_completeness(int nz, int nN){$/;"	f
N200_max	structs.c	/^  double N200_max;$/;"	m	struct:__anon16	file:
N200_min	structs.c	/^  double N200_min;$/;"	m	struct:__anon16	file:
NG	run_covariances_real.c	/^int NG = 1;$/;"	v
NR_END	basics.c	16;"	d	file:
N_AB	structs.c	/^  int N_AB;$/;"	m	struct:__anon19	file:
N_DS	basics.c	/^     int N_DS;$/;"	m	struct:__anon5	file:
N_IA	structs.c	/^  int N_IA;$/;"	m	struct:__anon19	file:
N_N200	cluster.c	/^double N_N200(int nz, int nN){$/;"	f
N_N200	clusters_DES.c	/^double N_N200(int nz, int nN){$/;"	f
N_S2	basics.c	/^     int N_S2;$/;"	m	struct:__anon5	file:
N_a	basics.c	/^     int N_a ;$/;"	m	struct:__anon5	file:
N_a_halo	basics.c	/^     int N_a_halo;$/;"	m	struct:__anon5	file:
N_cgl	redshift.c	/^int N_cgl(int zc, int zs){$/;"	f
N_cgl	redshift_spline.c	/^int N_cgl(int zc, int zs){$/;"	f
N_cluster_MOR	structs.c	/^  int N_cluster_MOR;$/;"	m	struct:__anon20	file:
N_ell	basics.c	/^     int N_ell;$/;"	m	struct:__anon5	file:
N_ggl	redshift.c	/^int N_ggl(int zl, int zs){$/;"	f
N_ggl	redshift_spline.c	/^int N_ggl(int zl, int zs){$/;"	f
N_k	GRS.c	/^   int N_k;$/;"	m	struct:__anon6	file:
N_k	structs.c	/^   int N_k;$/;"	m	struct:__anon24	file:
N_k_3d	basics.c	/^     int N_k_3d;$/;"	m	struct:__anon5	file:
N_k_lin	basics.c	/^     int N_k_lin;$/;"	m	struct:__anon5	file:
N_k_nlin	basics.c	/^     int N_k_nlin;$/;"	m	struct:__anon5	file:
N_max	structs.c	/^  double N_max[10];$/;"	m	struct:__anon16	file:
N_min	structs.c	/^  double N_min[10];$/;"	m	struct:__anon16	file:
N_mu	GRS.c	/^   int N_mu;$/;"	m	struct:__anon6	file:
N_mu	structs.c	/^   int N_mu;$/;"	m	struct:__anon24	file:
N_norm	basics.c	/^     int N_norm;$/;"	m	struct:__anon5	file:
N_per_dec	structs.c	/^  int N_per_dec;$/;"	m	struct:__anon19	file:
N_r_3d	basics.c	/^     int N_r_3d;$/;"	m	struct:__anon5	file:
N_shear	redshift.c	/^int N_shear (int z1, int z2){ \/\/find shear tomography bin number N_shear of tomography combination (z1,z2)$/;"	f
N_shear	redshift_spline.c	/^int N_shear (int z1, int z2){ \/\/find shear tomography bin number N_shear of tomography combination (z1,z2)$/;"	f
N_t	structs.c	/^   int N_t;$/;"	m	struct:__anon24	file:
N_theta	basics.c	/^     int N_theta;$/;"	m	struct:__anon5	file:
N_thetaH	basics.c	/^     int N_thetaH;$/;"	m	struct:__anon5	file:
N_z	GRS.c	/^   int N_z;$/;"	m	struct:__anon6	file:
N_z	structs.c	/^   int N_z;$/;"	m	struct:__anon24	file:
Ncl	structs.c	/^  int Ncl;$/;"	m	struct:__anon8	file:
Ncos	structs.c	/^  int Ncos;$/;"	m	struct:__anon8	file:
Ndata	structs.c	/^  int Ndata;$/;"	m	struct:__anon8	file:
Ntab	basics.c	/^}Ntab;$/;"	t	typeref:struct:__anon5	file:
Ntable	basics.c	/^Ntab Ntable = {$/;"	v
Ntheta	structs.c	/^  int Ntheta;$/;"	m	struct:__anon8	file:
ORDER	basics.c	/^     int ORDER ;$/;"	m	struct:cos	file:
Omega_m	structs.c	/^     double Omega_m;  \/* matter density parameter                       *\/$/;"	m	struct:__anon9	file:
Omega_nu	structs.c	/^     double Omega_nu; \/\/density parameter of massive neutrinos; Omega_m = Omega_cdm+ Omega_nu + omb$/;"	m	struct:__anon9	file:
Omega_v	structs.c	/^     double Omega_v;  \/* cosmogical constant parameter                  *\/$/;"	m	struct:__anon9	file:
POW4	basics.c	35;"	d	file:
PT_d1d2	pt.c	/^double PT_d1d2(double k_coverH0){ \/\/interpolate FPT.tab_AB[0] - Pd1d2$/;"	f
PT_d1d2	pt.c	/^double PT_d1d2(double k_coverH0){ \/\/interpolate PT_AB[0] - Pd1d2$/;"	f
PT_d1s2	pt.c	/^double PT_d1s2(double k_coverH0){ \/\/interpolate FPT.tab_AB[2]$/;"	f
PT_d1s2	pt.c	/^double PT_d1s2(double k_coverH0){ \/\/interpolate PT_AB[2]$/;"	f
PT_d2d2	pt.c	/^double PT_d2d2(double k_coverH0){ \/\/interpolate FPT.tab_AB[1]$/;"	f
PT_d2d2	pt.c	/^double PT_d2d2(double k_coverH0){ \/\/interpolate PT_AB[1]$/;"	f
PT_d2s2	pt.c	/^double PT_d2s2(double k_coverH0){ \/\/interpolate FPT.tab_AB[3]$/;"	f
PT_d2s2	pt.c	/^double PT_d2s2(double k_coverH0){ \/\/interpolate PT_AB[3]$/;"	f
PT_s2s2	pt.c	/^double PT_s2s2(double k_coverH0){ \/\/interpolate FPT.tab_AB[4]$/;"	f
PT_s2s2	pt.c	/^double PT_s2s2(double k_coverH0){ \/\/interpolate PT_AB[4]$/;"	f
PT_sigma4	pt.c	/^double PT_sigma4(double k_coverH0){$/;"	f
P_2_s_max	basics.c	/^     double P_2_s_max;$/;"	m	struct:__anon4	file:
P_2_s_min	basics.c	/^     double P_2_s_min;$/;"	m	struct:__anon4	file:
P_DW	GRS.c	/^double P_DW(double k, double mu, double a){$/;"	f
P_II	IA.c	/^double P_II (double k, double a){$/;"	f
P_II_JB	IA.c	/^double P_II_JB(double k, double a){$/;"	f
P_II_lin	IA.c	/^double P_II_lin (double k, double a){$/;"	f
P_cm	cluster.c	/^double P_cm(double k,double a,int nz,int nN){$/;"	f
P_cm	clusters_DES.c	/^double P_cm(double k,double a,int nz,int nN){$/;"	f
P_cm_1h	cluster.c	/^double P_cm_1h(double k, double a,int nz, int nN){ $/;"	f
P_cm_1h	clusters_DES.c	/^double P_cm_1h(double k, double a,int nz, int nN){ $/;"	f
P_cm_offcentering	cluster.c	/^double P_cm_offcentering(double k, double M, double a){$/;"	f
P_cm_offcentering	clusters_DES.c	/^double P_cm_offcentering(double k, double M, double a){$/;"	f
P_dI	IA.c	/^double P_dI (double k, double a){$/;"	f
P_dI_JB	IA.c	/^double P_dI_JB(double k, double a){$/;"	f
P_dI_lin	IA.c	/^double P_dI_lin (double k, double a){$/;"	f
P_g	GRS.c	/^double P_g(double k, double mu, int nz){$/;"	f
P_g_mt	GRS.c	/^double P_g_mt(double k, double mu, int nz, GRSpara_mt  G, int i, int j){$/;"	f
P_gg	HOD.c	/^double P_gg (double k, double a,int nz){ \/\/galaxy-galaxy power spectrum based on HOD model in bin nz$/;"	f
P_gg_2h_excl_old	redmagic_real.c	/^double P_gg_2h_excl_old(double k,double r, double a){$/;"	f
P_gg_rm	redmagic.c	/^double P_gg_rm(double k,double a)$/;"	f
P_gg_rm_1h	redmagic_real.c	/^double P_gg_rm_1h(double k,double a)$/;"	f
P_gm	HOD.c	/^double P_gm (double k, double a,int nz){\/\/galaxy-matter power spectrum based on HOD model in bin nz$/;"	f
P_gm_rm	redmagic.c	/^double P_gm_rm(double k,double a)$/;"	f
P_obs	GRS.c	/^double P_obs(double k_ref, double mu_ref, int nz){$/;"	f
P_obs_mt	GRS.c	/^double P_obs_mt(double k_ref, double mu_ref, int nz, GRSpara_mt  G, int i, int j){$/;"	f
P_shot	GRS.c	/^	double P_shot[10]; \/\/ in (Mpc\/h)^3$/;"	m	struct:__anon7	file:
Pdelta	cosmo3D.c	/^double Pdelta(double k_NL,double a)$/;"	f
Pdelta_halo	halo.c	/^double Pdelta_halo(double k,double a)$/;"	f
Planck	structs.c	/^  int Planck;$/;"	m	struct:__anon8	file:
Planck15	structs.c	/^  int Planck15;$/;"	m	struct:__anon8	file:
Planck15_BAO_H070p6_JLA_w0wa	structs.c	/^  int Planck15_BAO_H070p6_JLA_w0wa;$/;"	m	struct:__anon8	file:
Planck15_BAO_w0wa	structs.c	/^  int Planck15_BAO_w0wa; \/\/CH$/;"	m	struct:__anon8	file:
Plin_FILE	structs.c	/^  char Plin_FILE[200];$/;"	m	struct:__anon19	file:
Psi_RSD	cosmo2D_exact.c	/^double Psi_RSD(double k, int l,int ni){$/;"	f
Psi_RSD_z	cosmo2D_exact.c	/^double Psi_RSD_z(double z,void *params){$/;"	f
Psi_cl	cosmo2D_exact.c	/^double Psi_cl(double k, int l,int ni){$/;"	f
Rmin_bias	structs.c	/^  double Rmin_bias;$/;"	m	struct:__anon8	file:
Rmin_shear	structs.c	/^  double Rmin_shear;$/;"	m	struct:__anon8	file:
SN	structs.c	/^  int SN;$/;"	m	struct:__anon8	file:
SQR	basics.c	31;"	d	file:
SRD_SL_Y1	structs.c	/^  int SRD_SL_Y1;$/;"	m	struct:__anon8	file:
SRD_SL_Y10	structs.c	/^  int SRD_SL_Y10;$/;"	m	struct:__anon8	file:
SRD_SN_Y1	structs.c	/^  int SRD_SN_Y1;$/;"	m	struct:__anon8	file:
SRD_SN_Y10	structs.c	/^  int SRD_SN_Y10;$/;"	m	struct:__anon8	file:
SVD_inversion	basics.c	/^void SVD_inversion(gsl_matrix *cov, gsl_matrix *inverseSVD,int Nmatrix)$/;"	f
T_lin_minus_COSEBIS	EBfunctions.c	/^double T_lin_minus_COSEBIS(double theta,int ORDER,double vt_max,double vt_min)$/;"	f
T_lin_minus_COSEBIS	coefficients.c	/^double T_lin_minus_COSEBIS(double theta,int ORDER,double vt_max,double vt_min)$/;"	f
T_lin_minus_integrand_COSEBIS	EBfunctions.c	/^double T_lin_minus_integrand_COSEBIS(double t, void *params)$/;"	f
T_lin_minus_integrand_COSEBIS	coefficients.c	/^double T_lin_minus_integrand_COSEBIS(double t, void *params)$/;"	f
T_lin_plus_COSEBIS	EBfunctions.c	/^double T_lin_plus_COSEBIS(double vartheta,int ORDER,double vt_max,double vt_min)$/;"	f
T_lin_plus_COSEBIS	coefficients.c	/^double T_lin_plus_COSEBIS(double vartheta,int ORDER,double vt_max,double vt_min)$/;"	f
T_log_minus_COSEBIS	EBfunctions.c	/^double T_log_minus_COSEBIS(double vartheta,int ORDER,double vt_max,double vt_min)$/;"	f
T_log_minus_COSEBIS	coefficients.c	/^double T_log_minus_COSEBIS(double vartheta,int ORDER,double vt_max,double vt_min)$/;"	f
T_log_minus_integrand_COSEBIS	EBfunctions.c	/^double T_log_minus_integrand_COSEBIS(double theta, void *params)$/;"	f
T_log_minus_integrand_COSEBIS	coefficients.c	/^double T_log_minus_integrand_COSEBIS(double theta, void *params)$/;"	f
T_log_plus_COSEBIS	EBfunctions.c	/^double T_log_plus_COSEBIS(double vartheta,int ORDER,double vt_max,double vt_min)$/;"	f
T_log_plus_COSEBIS	coefficients.c	/^double T_log_plus_COSEBIS(double vartheta,int ORDER,double vt_max,double vt_min)$/;"	f
T_minus_MAP	EBfunctions.c	/^double T_minus_MAP(double x)$/;"	f
T_plus_MAP	EBfunctions.c	/^double T_plus_MAP(double x)$/;"	f
Tsqr_EH_no_wiggle	GRS.c	/^double Tsqr_EH_no_wiggle(double khoverMPC)$/;"	f
Tsqr_EH_wiggle	cosmo3D.c	/^double Tsqr_EH_wiggle(double khoverMPC)$/;"	f
V_z	GRS.c	/^   double V_z[10]; \/\/ in (Mpc\/h)^3$/;"	m	struct:__anon6	file:
V_z	structs.c	/^   double V_z[10]; \/\/ in (Mpc\/h)^3$/;"	m	struct:__anon24	file:
W1	EBfunctions.c	/^double W1(double theta_1, double zeta_1, double zeta_2)$/;"	f
W2	EBfunctions.c	/^double W2(double theta_2, double zeta_3, double zeta_4)$/;"	f
W_HOD	cosmo2D_fourier.c	/^double W_HOD(double a, double nz){$/;"	f
W_calc_j0	EBfunctions.c	/^double W_calc_j0(double ell,int ORDER,double max,double min)$/;"	f
W_calc_j2	EBfunctions.c	/^double W_calc_j2(double ell,int ORDER,double max,double min)$/;"	f
W_cluster	cluster.c	/^double W_cluster(double a, double nz,double nN){$/;"	f
W_cluster	clusters_DES.c	/^double W_cluster(double a, double nz,double nN){$/;"	f
W_gal	cosmo2D_fourier.c	/^double W_gal(double a, double nz){$/;"	f
W_k	CMBxLSS.c	/^double W_k(double a, double fK){$/;"	f
W_kappa	cosmo2D_fourier.c	/^double W_kappa(double a, double fK, double nz){$/;"	f
W_rm	covariances_fourier_HOD.c	/^double W_rm(double a, double nz){$/;"	f
W_source	IA.c	/^double W_source(double a, double nz){$/;"	f
Y_minus	EBfunctions.c	/^void Y_minus(double x, double eta, double *ym)$/;"	f
Y_plus	EBfunctions.c	/^void Y_plus(double x, double eta, double *yp)$/;"	f
Z1	redshift.c	/^int Z1(int Nbin){\/\/ find z1 of tomography combination (z1,z2) constituting shear tomography bin Nbin$/;"	f
Z1	redshift_spline.c	/^int Z1(int Nbin){\/\/ find z1 of tomography combination (z1,z2) constituting shear tomography bin Nbin$/;"	f
Z2	redshift.c	/^int Z2(int Nbin){ \/\/ find z2 of tomography combination (z1,z2) constituting shear tomography bin Nbin$/;"	f
Z2	redshift_spline.c	/^int Z2(int Nbin){ \/\/ find z2 of tomography combination (z1,z2) constituting shear tomography bin Nbin$/;"	f
ZC	redshift.c	/^int ZC(int Nbin){$/;"	f
ZC	redshift_spline.c	/^int ZC(int Nbin){$/;"	f
ZL	redshift.c	/^int ZL(int Nbin){$/;"	f
ZL	redshift_spline.c	/^int ZL(int Nbin){$/;"	f
ZS	redshift.c	/^int ZS(int Nbin){$/;"	f
ZS	redshift_spline.c	/^int ZS(int Nbin){$/;"	f
ZSC	redshift.c	/^int ZSC(int Nbin){$/;"	f
ZSC	redshift_spline.c	/^int ZSC(int Nbin){$/;"	f
Z_SPLINE_TYPE	redshift_spline.c	2;"	d	file:
Z_minus	EBfunctions.c	/^double Z_minus(double vartheta,double *array)$/;"	f
Z_plus	EBfunctions.c	/^double Z_plus(double vartheta, double *array)$/;"	f
a_max_emu	cosmo3D.c	14;"	d	file:
a_min	basics.c	/^     double a_min;$/;"	m	struct:__anon4	file:
a_min_emu	cosmo3D.c	15;"	d	file:
aglob	structs.c	/^  double aglob;$/;"	m	struct:__anon18	file:
alpha_c	covariances_3D.c	/^double alpha_c(double k1x,double k1y,double k2x,double k2y)    {$/;"	f
alpha_s	structs.c	/^     double alpha_s;   \/* running of spectral index of initial power spectrum       *\/$/;"	m	struct:__anon9	file:
amax_lens	redshift.c	/^double amax_lens(int i){$/;"	f
amax_lens	redshift_spline.c	/^double amax_lens(int i){$/;"	f
amax_source	redshift.c	/^double amax_source(int i){$/;"	f
amax_source	redshift_spline.c	/^double amax_source(int i){$/;"	f
amax_source_IA	redshift.c	/^double amax_source_IA(int i){$/;"	f
amax_source_IA	redshift_spline.c	/^double amax_source_IA(int i){$/;"	f
amin_lens	redshift.c	/^double amin_lens(int i){$/;"	f
amin_lens	redshift_spline.c	/^double amin_lens(int i){$/;"	f
amin_source	redshift.c	/^double amin_source(int i){$/;"	f
amin_source	redshift_spline.c	/^double amin_source(int i){$/;"	f
arcmin	basics.c	/^     double arcmin;$/;"	m	struct:__anon2	file:
area	structs.c	/^     double area;\/* survey_area in deg^2. *\/$/;"	m	struct:__anon12	file:
area_conversion_factor	structs.c	/^     double area_conversion_factor; \/*factor from deg^2 to radian^2: 60*60*constants.arcmin*constants.arcmin *\/$/;"	m	struct:__anon12	file:
arrayFromDoublePointer	pt.c	/^PyObject * arrayFromDoublePointer(int n, double *x)$/;"	f
b	structs.c	/^  double b[10]; \/* linear galaxy bias paramter in clustering bin i*\/$/;"	m	struct:__anon14	file:
b1_function	structs.c	/^  B1_model b1_function;$/;"	m	struct:__anon14	file:
b1_growth_scaling	HOD.c	/^double b1_growth_scaling(double z, int ni){$/;"	f
b1_per_bin	HOD.c	/^double b1_per_bin(double z, int ni){$/;"	f
b1_per_bin_evolv	HOD.c	/^double b1_per_bin_evolv(double z, int ni){$/;"	f
b1_per_bin_pass_evolv	HOD.c	/^double b1_per_bin_pass_evolv(double z, int ni){$/;"	f
b1_powerlaw	HOD.c	/^double b1_powerlaw(double z, int ni){$/;"	f
b2	structs.c	/^  double b2[10]; \/* quadratic bias parameter for redshift bin i *\/$/;"	m	struct:__anon14	file:
b_a	structs.c	/^  double b_a; \/\/assembly bias$/;"	m	struct:__anon15	file:
b_cluster	cluster.c	/^double b_cluster (int nz, int nN){ \/\/mean bias of clusters in redshift bin nz, richness bin nN, evaluated at center of redshift bin$/;"	f
b_cluster	clusters_DES.c	/^double b_cluster (int nz, int nN){ \/\/mean bias of clusters in redshift bin nz, richness bin nN, evaluated at center of redshift bin$/;"	f
b_g	GRS.c	/^	double b_g[10];$/;"	m	struct:__anon7	file:
b_lin	covariances_3D.c	/^double b_lin (double k1x, double k1y, double k2x, double k2y, double a)$/;"	f
b_lin_cov	covariances_3D.c	/^double b_lin_cov(double k1, double k2, double a){ \/\/linear bispectrum, averaged over angle between k1 and k2$/;"	f
b_lin_cov_mu	covariances_3D.c	/^double b_lin_cov_mu(double k1, double k2, double a){ \/\/linear bispectrum, averaged over angle between k1 and k2$/;"	f
b_lin_mu	covariances_3D.c	/^double b_lin_mu(double k1,double k2, double m, double a){$/;"	f
b_mt	structs.c	/^   double b_mt[10][2];$/;"	m	struct:__anon24	file:
b_ngmatched	halo.c	/^double b_ngmatched(double a, double n_cmv){$/;"	f
b_source	halo.c	/^double b_source(double a){ \/\/lookup table for b1 of source galaxies$/;"	f
baopara	BAO.c	/^}baopara;$/;"	t	typeref:struct:__anon1	file:
baryons	structs.c	/^  char baryons[300];$/;"	m	struct:__anon17	file:
baryons	structs.c	/^  int baryons;$/;"	m	struct:__anon8	file:
beam_SPT	CMBxLSS.c	/^double beam_SPT(double l){$/;"	f
beta_c	covariances_3D.c	/^double beta_c(double k1x,double k1y,double k2x,double k2y)$/;"	f
beta_ia	structs.c	/^    double beta_ia;$/;"	m	struct:input_nuisance_params	file:
beta_ia	structs.c	/^  double beta_ia; \/\/beta IA see Joachimi2012$/;"	m	struct:__anon20	file:
beta_ia	structs.c	/^  double beta_ia[2]; \/\/beta IA see Joachimi2012$/;"	m	struct:__anon21	file:
bgal	HOD.c	/^double bgal(int nz,double a){$/;"	f
bgal_a	covariances_fourier.c	/^double bgal_a(double a, double nz){$/;"	f
bgal_rm	redmagic.c	/^double bgal_rm(double a){$/;"	f
bgal_z	HOD.c	/^double bgal_z(double z, int ni){ \/\/bias evolution within redshift bin, used by clustering\/G-G-lensing routines without HOD modeling$/;"	f
bi_1h	covariances_3D.c	/^double bi_1h(double k1,double k2, double k3, double a)$/;"	f
bias	structs.c	/^    double bias[10];$/;"	m	struct:input_nuisance_params	file:
bias	structs.c	/^    double bias[10];$/;"	m	struct:input_nuisance_params_mpp	file:
bias	structs.c	/^  int bias;$/;"	m	struct:__anon8	file:
bias2	structs.c	/^    double bias2[10];$/;"	m	struct:input_nuisance_params_mpp	file:
bias_norm	halo.c	/^double bias_norm(double a)$/;"	f
bias_norm_integrand	halo.c	/^double bias_norm_integrand (double n,void * params){$/;"	f
bias_zphot_clustering	redshift.c	/^double bias_zphot_clustering (double z, int nz){$/;"	f
bias_zphot_clustering	redshift_spline.c	/^double bias_zphot_clustering (double z, int nz){$/;"	f
bias_zphot_clustering	structs.c	/^  double bias_zphot_clustering[10];$/;"	m	struct:__anon20	file:
bias_zphot_clustering	structs.c	/^  double bias_zphot_clustering[10][2];$/;"	m	struct:__anon21	file:
bias_zphot_magnification	structs.c	/^  double bias_zphot_magnification[10];$/;"	m	struct:__anon20	file:
bias_zphot_magnification	structs.c	/^  double bias_zphot_magnification[10][2];$/;"	m	struct:__anon21	file:
bias_zphot_shear	redshift.c	/^double bias_zphot_shear (double z, int nz){$/;"	f
bias_zphot_shear	redshift_spline.c	/^double bias_zphot_shear (double z, int nz){$/;"	f
bias_zphot_shear	structs.c	/^  double bias_zphot_shear[10];$/;"	m	struct:__anon20	file:
bias_zphot_shear	structs.c	/^  double bias_zphot_shear[10][2];$/;"	m	struct:__anon21	file:
bin_cov_NG_cl_cl_tomo	covariances_real.c	/^double bin_cov_NG_cl_cl_tomo(double l1,double l2, int z1, int z2, int z3, int z4){$/;"	f
bin_cov_NG_cl_gl_tomo	covariances_real.c	/^double bin_cov_NG_cl_gl_tomo(double l1,double l2, int z1, int z2, int z3, int z4){$/;"	f
bin_cov_NG_cl_shear_tomo	covariances_real.c	/^double bin_cov_NG_cl_shear_tomo(double l1,double l2, int z1, int z2, int z3, int z4){$/;"	f
bin_cov_NG_gl_gl_tomo	covariances_real.c	/^double bin_cov_NG_gl_gl_tomo(double l1,double l2, int z1, int z2, int z3, int z4){$/;"	f
bin_cov_NG_gl_shear_tomo	covariances_real.c	/^double bin_cov_NG_gl_shear_tomo(double l1,double l2, int z1, int z2, int z3, int z4){$/;"	f
bin_cov_NG_shear_shear_tomo	covariances_real.c	/^double bin_cov_NG_shear_shear_tomo(double l1,double l2, int z1, int z2, int z3, int z4){$/;"	f
bs2	structs.c	/^  double bs2[10]; \/* leading order tidal bias for redshift bin i *\/$/;"	m	struct:__anon14	file:
c1rhocrit_ia	structs.c	/^  double c1rhocrit_ia;$/;"	m	struct:__anon20	file:
cdgamma	basics.c	/^void cdgamma(fftw_complex x, fftw_complex *res)$/;"	f
cg	structs.c	/^  double cg; \/\/galaxy concentration$/;"	m	struct:__anon15	file:
cg	structs.c	/^  double cg[10];$/;"	m	struct:__anon14	file:
cg_rm	structs.c	/^  double cg_rm[2];$/;"	m	struct:__anon22	file:
cgl_Npowerspectra	structs.c	/^  int cgl_Npowerspectra;\/\/ number of cluster-lensing tomography combinations$/;"	m	struct:__anon10	file:
check_LF	IA.c	/^int check_LF(void){ \/\/return 1 if combination of all + red galaxy LF parameters is unphysical, i.e. if f_red > 1 for some z < redshift.shear_zdistrpar_zmax$/;"	f
chi	cosmo3D.c	/^double chi(double a)$/;"	f
clphotoz	structs.c	/^  int clphotoz;$/;"	m	struct:__anon8	file:
clusterMobs	structs.c	/^  int clusterMobs;$/;"	m	struct:__anon8	file:
clusterN	structs.c	/^  int clusterN;$/;"	m	struct:__anon8	file:
clusterWL	structs.c	/^  int clusterWL;$/;"	m	struct:__anon8	file:
cluster_MOR	structs.c	/^  double cluster_MOR[10];$/;"	m	struct:__anon20	file:
cluster_Mobs_N_pivot	structs.c	/^  double cluster_Mobs_N_pivot;$/;"	m	struct:__anon20	file:
cluster_Mobs_N_pivot	structs.c	/^  double cluster_Mobs_N_pivot[2];$/;"	m	struct:__anon21	file:
cluster_Mobs_alpha	structs.c	/^  double cluster_Mobs_alpha;$/;"	m	struct:__anon20	file:
cluster_Mobs_alpha	structs.c	/^  double cluster_Mobs_alpha[2];$/;"	m	struct:__anon21	file:
cluster_Mobs_beta	structs.c	/^  double cluster_Mobs_beta;$/;"	m	struct:__anon20	file:
cluster_Mobs_beta	structs.c	/^  double cluster_Mobs_beta[2];$/;"	m	struct:__anon21	file:
cluster_Mobs_lgM0	structs.c	/^  double cluster_Mobs_lgM0;$/;"	m	struct:__anon20	file:
cluster_Mobs_lgM0	structs.c	/^  double cluster_Mobs_lgM0[2];$/;"	m	struct:__anon21	file:
cluster_Mobs_lgN0	structs.c	/^  double cluster_Mobs_lgN0;$/;"	m	struct:__anon20	file:
cluster_Mobs_lgN0	structs.c	/^  double cluster_Mobs_lgN0[2];$/;"	m	struct:__anon21	file:
cluster_Mobs_sigma	structs.c	/^  double cluster_Mobs_sigma;$/;"	m	struct:__anon20	file:
cluster_Mobs_sigma	structs.c	/^  double cluster_Mobs_sigma[2];$/;"	m	struct:__anon21	file:
cluster_Mobs_sigma0	structs.c	/^  double cluster_Mobs_sigma0;$/;"	m	struct:__anon20	file:
cluster_Mobs_sigma0	structs.c	/^  double cluster_Mobs_sigma0[2];$/;"	m	struct:__anon21	file:
cluster_Mobs_sigma_qm	structs.c	/^  double cluster_Mobs_sigma_qm;$/;"	m	struct:__anon20	file:
cluster_Mobs_sigma_qm	structs.c	/^  double cluster_Mobs_sigma_qm[2];$/;"	m	struct:__anon21	file:
cluster_Mobs_sigma_qz	structs.c	/^  double cluster_Mobs_sigma_qz;$/;"	m	struct:__anon20	file:
cluster_Mobs_sigma_qz	structs.c	/^  double cluster_Mobs_sigma_qz[2];$/;"	m	struct:__anon21	file:
cluster_Nbin	structs.c	/^  int cluster_Nbin; \/\/ number of cluster redshift bins$/;"	m	struct:__anon10	file:
cluster_c	structs.c	/^    double cluster_c[4];$/;"	m	struct:input_nuisance_params	file:
cluster_centering_M_pivot	structs.c	/^  double cluster_centering_M_pivot;$/;"	m	struct:__anon20	file:
cluster_centering_M_pivot	structs.c	/^  double cluster_centering_M_pivot[2];$/;"	m	struct:__anon21	file:
cluster_centering_alpha	structs.c	/^  double cluster_centering_alpha;$/;"	m	struct:__anon20	file:
cluster_centering_alpha	structs.c	/^  double cluster_centering_alpha[2];$/;"	m	struct:__anon21	file:
cluster_centering_f0	structs.c	/^  double cluster_centering_f0;$/;"	m	struct:__anon20	file:
cluster_centering_f0	structs.c	/^  double cluster_centering_f0[2];$/;"	m	struct:__anon21	file:
cluster_centering_sigma	structs.c	/^  double cluster_centering_sigma;$/;"	m	struct:__anon20	file:
cluster_centering_sigma	structs.c	/^  double cluster_centering_sigma[2];$/;"	m	struct:__anon21	file:
cluster_completeness	structs.c	/^  double cluster_completeness[10];$/;"	m	struct:__anon20	file:
cluster_completeness	structs.c	/^  double cluster_completeness[2];$/;"	m	struct:__anon21	file:
cluster_zmax	structs.c	/^  double cluster_zmax[10];$/;"	m	struct:__anon10	file:
cluster_zmin	structs.c	/^  double cluster_zmin[10];$/;"	m	struct:__anon10	file:
clustering_Nbin	structs.c	/^  int clustering_Nbin; \/\/ number of tomography bins$/;"	m	struct:__anon10	file:
clustering_Npowerspectra	structs.c	/^  int clustering_Npowerspectra;\/\/ number of tomography power spectra+2+3+...+Nbin$/;"	m	struct:__anon10	file:
clustering_REDSHIFT_FILE	structs.c	/^  char clustering_REDSHIFT_FILE[200];$/;"	m	struct:__anon11	file:
clustering_histogram_zbins	structs.c	/^  int clustering_histogram_zbins;$/;"	m	struct:__anon11	file:
clustering_photoz	structs.c	/^  int clustering_photoz;$/;"	m	struct:__anon11	file:
clustering_zdistrpar_zmax	structs.c	/^  double clustering_zdistrpar_zmax;$/;"	m	struct:__anon11	file:
clustering_zdistrpar_zmin	structs.c	/^  double clustering_zdistrpar_zmin;$/;"	m	struct:__anon11	file:
clustering_zmax	structs.c	/^  double clustering_zmax[10]; $/;"	m	struct:__anon10	file:
clustering_zmin	structs.c	/^  double clustering_zmin[10];$/;"	m	struct:__anon10	file:
clusterpara	structs.c	/^} clusterpara;$/;"	t	typeref:struct:__anon16	file:
cmb	structs.c	/^Cmb cmb;$/;"	v
compute_data_vector	like_fourier.c	/^void compute_data_vector(char *details,double OMM, double S8, double NS, double W0,double WA, double OMB, double H0, double MGSigma, double MGmu, double B1, double B2, double B3, double B4, double B5, double B6, double B7, double B8, double B9, double B10, double SP1, double SP2, double SP3, double SP4, double SP5, double SP6, double SP7, double SP8, double SP9, double SP10, double SPS1, double CP1, double CP2, double CP3, double CP4, double CP5, double CP6, double CP7, double CP8, double CP9, double CP10, double CPS1, double M1, double M2, double M3, double M4, double M5, double M6, double M7, double M8, double M9, double M10, double A_ia, double beta_ia, double eta_ia, double eta_ia_highz, double LF_alpha, double LF_P, double LF_Q, double LF_red_alpha, double LF_red_P, double LF_red_Q, double mass_obs_norm, double mass_obs_slope, double mass_z_slope, double mass_obs_scatter, double c1, double c2, double c3, double c4)$/;"	f
compute_data_vector	like_fourier_HOD.c	/^void compute_data_vector(char *details,double OMM, double S8, double NS, double W0,double WA, double OMB, double H0, double HOD_Mc, double HOD_sigmaM,double HOD_M1,double HOD_M0, double HOD_alpha,double HOD_fc, double SP1, double SP2, double SP3, double SP4, double SP5, double SP6, double SP7, double SP8, double SP9, double SP10, double SPS1, double CP1, double CP2, double CP3, double CP4, double CP5, double CP6, double CP7, double CP8, double CP9, double CP10, double CPS1, double M1, double M2, double M3, double M4, double M5, double M6, double M7, double M8, double M9, double M10, double A_ia, double beta_ia, double eta_ia, double eta_ia_highz, double LF_alpha, double LF_P, double LF_Q, double LF_red_alpha, double LF_red_P, double LF_red_Q, double mass_obs_norm, double mass_obs_slope, double mass_z_slope, double mass_obs_scatter, double c1, double c2, double c3, double c4)$/;"	f
con	basics.c	/^}con;$/;"	t	typeref:struct:__anon2	file:
conc	halo.c	/^double conc(double m, double a)$/;"	f
constants	basics.c	/^con constants = {$/;"	v
cos	basics.c	/^struct cos{$/;"	s	file:
cosmax	structs.c	/^  double cosmax;$/;"	m	struct:__anon8	file:
cosmology	structs.c	/^cosmopara cosmology = {.A_s = 0., .alpha_s =0.0, .M_nu =0., .Omega_nu =0.,.coverH0= 2997.92458, .rho_crit = 7.4775e+21,.MGSigma=0.0,.MGmu=0.0};$/;"	v
cosmopara	structs.c	/^}cosmopara;$/;"	t	typeref:struct:__anon9	file:
count_rows	init.c	/^int count_rows(char* filename,const char delimiter){$/;"	f
count_rows	init_basic.c	/^int count_rows(char* filename,const char delimiter){$/;"	f
cov_G_cgl_cgl	covariances_cluster.c	/^double cov_G_cgl_cgl(double l, double delta_l,int nzc1,int nN1, int nzs1, int nzc2, int nN2, int nzs2){$/;"	f
cov_G_cl_cgl	covariances_cluster.c	/^double cov_G_cl_cgl (double l, double delta_l,int nzl1,int nzl2, int nzc, int nN,int nzs){$/;"	f
cov_G_cl_cgl_HOD	covariances_fourier_HOD.c	/^double cov_G_cl_cgl_HOD (double l, double delta_l,int nzl1,int nzl2, int nzc, int nN,int nzs){$/;"	f
cov_G_cl_cl_real	covariances_real.c	/^double cov_G_cl_cl_real(double theta1, double theta2, double Dtheta, int z1,int z2, int z3, int z4){$/;"	f
cov_G_cl_cl_real_nonoise	covariances_real.c	/^double cov_G_cl_cl_real_nonoise(double theta1, double theta2, double Dtheta, int z1,int z2, int z3, int z4){$/;"	f
cov_G_cl_cl_real_rebin	covariances_real.c	/^double cov_G_cl_cl_real_rebin(double thetamin_i, double thetamax_i,double thetamin_j, double thetamax_j, int z1,int z2, int z3, int z4){$/;"	f
cov_G_cl_cl_tomo	covariances_fourier.c	/^double cov_G_cl_cl_tomo(double l, double delta_l, int z1, int z2, int z3, int z4){$/;"	f
cov_G_cl_cl_tomo_HOD	covariances_fourier_HOD.c	/^double cov_G_cl_cl_tomo_HOD(double l, double delta_l, int z1, int z2, int z3, int z4){$/;"	f
cov_G_cl_gl_real	covariances_real.c	/^double cov_G_cl_gl_real(double theta1, double theta2, double Dtheta, int z1,int z2, int z3, int z4){$/;"	f
cov_G_cl_gl_real_rebin	covariances_real.c	/^double cov_G_cl_gl_real_rebin(double thetamin_i, double thetamax_i,double thetamin_j, double thetamax_j, int z1,int z2, int z3, int z4){$/;"	f
cov_G_cl_gl_tomo	covariances_fourier.c	/^double cov_G_cl_gl_tomo(double l, double delta_l, int z1, int z2, int zl, int zs){$/;"	f
cov_G_cl_gl_tomo_HOD	covariances_fourier_HOD.c	/^double cov_G_cl_gl_tomo_HOD(double l, double delta_l, int z1, int z2, int zl, int zs){$/;"	f
cov_G_cl_shear_real	covariances_real.c	/^double cov_G_cl_shear_real(double theta1, double theta2, double Dtheta, int z1,int z2, int z3, int z4, int pm){$/;"	f
cov_G_cl_shear_real_rebin	covariances_real.c	/^double cov_G_cl_shear_real_rebin(double thetamin_i, double thetamax_i,double thetamin_j, double thetamax_j, int z1,int z2, int z3, int z4, int pm){$/;"	f
cov_G_cl_shear_tomo	covariances_fourier.c	/^double cov_G_cl_shear_tomo(double l, double delta_l, int z1, int z2, int z3, int z4){$/;"	f
cov_G_cl_shear_tomo_HOD	covariances_fourier_HOD.c	/^double cov_G_cl_shear_tomo_HOD(double l, double delta_l, int z1, int z2, int z3, int z4){$/;"	f
cov_G_gg_gk	covariances_CMBxLSS_fourier.c	/^double cov_G_gg_gk(double l, double delta_l, int n1, int n2, int n3){$/;"	f
cov_G_gg_kk	covariances_CMBxLSS_fourier.c	/^double cov_G_gg_kk(double l, double delta_l, int n1, int n2){$/;"	f
cov_G_gg_ks	covariances_CMBxLSS_fourier.c	/^double cov_G_gg_ks(double l, double delta_l, int n1, int n2, int zs){$/;"	f
cov_G_ggl_cgl	covariances_cluster.c	/^double cov_G_ggl_cgl (double l, double delta_l,int nzl,int nzs1, int nzc, int nN,int nzs2){$/;"	f
cov_G_ggl_cgl_HOD	covariances_fourier_HOD.c	/^double cov_G_ggl_cgl_HOD (double l, double delta_l,int nzl,int nzs1, int nzc, int nN,int nzs2){$/;"	f
cov_G_ggl_no_shot_noise	covariances_real.c	/^double cov_G_ggl_no_shot_noise(double theta1, double theta2, double Dtheta, int z1l,int z1s, int z2l, int z2s){$/;"	f
cov_G_gk_gk	covariances_CMBxLSS_fourier.c	/^double cov_G_gk_gk(double l, double delta_l, int n1, int n3){$/;"	f
cov_G_gk_gs	covariances_CMBxLSS_fourier.c	/^double cov_G_gk_gs(double l, double delta_l, int zl1, int zl2, int zs){$/;"	f
cov_G_gk_kk	covariances_CMBxLSS_fourier.c	/^double cov_G_gk_kk(double l, double delta_l, int zl){$/;"	f
cov_G_gk_ks	covariances_CMBxLSS_fourier.c	/^double cov_G_gk_ks(double l, double delta_l, int zl, int zs){$/;"	f
cov_G_gk_ss	covariances_CMBxLSS_fourier.c	/^double cov_G_gk_ss(double l, double delta_l, int zl, int zs1, int zs2){$/;"	f
cov_G_gl_gl_real	covariances_real.c	/^double cov_G_gl_gl_real(double theta1, double theta2, double Dtheta, int z1l,int z1s, int z2l, int z2s){$/;"	f
cov_G_gl_gl_real_rebin	covariances_real.c	/^double cov_G_gl_gl_real_rebin(double thetamin_i, double thetamax_i,double thetamin_j, double thetamax_j, int z1l,int z1s, int z2l, int z2s){$/;"	f
cov_G_gl_gl_tomo	covariances_fourier.c	/^double cov_G_gl_gl_tomo(double l, double delta_l, int z1, int z2, int z3, int z4){$/;"	f
cov_G_gl_gl_tomo_HOD	covariances_fourier_HOD.c	/^double cov_G_gl_gl_tomo_HOD(double l, double delta_l, int z1, int z2, int z3, int z4){$/;"	f
cov_G_gl_shear_real	covariances_real.c	/^double cov_G_gl_shear_real(double theta1, double theta2, double Dtheta, int z1l,int z1s, int z3, int z4, int pm){$/;"	f
cov_G_gl_shear_real_rebin	covariances_real.c	/^double cov_G_gl_shear_real_rebin(double thetamin_i, double thetamax_i,double thetamin_j, double thetamax_j, int zl,int zs, int z3, int z4, int pm){$/;"	f
cov_G_gl_shear_tomo	covariances_fourier.c	/^double cov_G_gl_shear_tomo(double l, double delta_l, int zl, int zs, int z3, int z4){$/;"	f
cov_G_gl_shear_tomo_HOD	covariances_fourier_HOD.c	/^double cov_G_gl_shear_tomo_HOD(double l, double delta_l, int zl, int zs, int z3, int z4){$/;"	f
cov_G_gs_kk	covariances_CMBxLSS_fourier.c	/^double cov_G_gs_kk(double l, double delta_l, int zl, int zs){$/;"	f
cov_G_gs_ks	covariances_CMBxLSS_fourier.c	/^double cov_G_gs_ks(double l, double delta_l, int zl, int zs1, int zs2){$/;"	f
cov_G_kk_kk	covariances_CMBxLSS_fourier.c	/^double cov_G_kk_kk(double l, double delta_l){$/;"	f
cov_G_kk_ks	covariances_CMBxLSS_fourier.c	/^double cov_G_kk_ks(double l, double delta_l, int zs){$/;"	f
cov_G_kk_ss	covariances_CMBxLSS_fourier.c	/^double cov_G_kk_ss(double l, double delta_l, int z1, int z2){$/;"	f
cov_G_ks_ks	covariances_CMBxLSS_fourier.c	/^double cov_G_ks_ks(double l, double delta_l, int z1, int z3){$/;"	f
cov_G_ks_ss	covariances_CMBxLSS_fourier.c	/^double cov_G_ks_ss(double l, double delta_l, int z1, int z2, int z3){$/;"	f
cov_G_shear_cgl	covariances_cluster.c	/^double cov_G_shear_cgl (double l, double delta_l,int nzs1,int nzs2, int nzc, int nN, int nzs3){$/;"	f
cov_G_shear_no_shot_noise	covariances_real.c	/^double cov_G_shear_no_shot_noise(double theta1, double theta2, double Dtheta, int z1,int z2, int z3, int z4, int pm1, int pm2){$/;"	f
cov_G_shear_rebin	covariances_real.c	/^double cov_G_shear_rebin(double thetamin_i, double thetamax_i,double thetamin_j,double thetamax_j, int z1,int z2,int z3,int z4,int pm1,int pm2){ \/\/now without shotnoise!$/;"	f
cov_G_shear_shear_real	covariances_real.c	/^double cov_G_shear_shear_real(double theta1, double theta2, double Dtheta, int z1,int z2, int z3, int z4, int pm1, int pm2){$/;"	f
cov_G_shear_shear_tomo	covariances_fourier.c	/^double cov_G_shear_shear_tomo(double l, double delta_l, int z1, int z2, int z3, int z4){$/;"	f
cov_G_shear_shotnoise	covariances_real.c	/^double cov_G_shear_shotnoise(double thetamin_i, double thetamax_i,double thetamin_j,double thetamax_j, int z1,int z2,int z3,int z4,int pm1,int pm2){$/;"	f
cov_NG_cgl_cgl	covariances_cluster.c	/^double cov_NG_cgl_cgl(double l1,double l2,int nzc1,int nN1, int nzs1, int nzc2, int nN2, int nzs2){$/;"	f
cov_NG_cl_cgl	covariances_cluster.c	/^double cov_NG_cl_cgl (double l1,double l2, int nzl1,int nzl2, int nzc, int nN,int nzs){$/;"	f
cov_NG_cl_cgl_HOD	covariances_fourier_HOD.c	/^double cov_NG_cl_cgl_HOD (double l1,double l2, int nzl1,int nzl2, int nzc, int nN,int nzs){$/;"	f
cov_NG_cl_cl_real	covariances_real.c	/^double cov_NG_cl_cl_real(double theta1, double theta2, int z1,int z2, int z3, int z4){$/;"	f
cov_NG_cl_cl_tomo	covariances_fourier.c	/^double cov_NG_cl_cl_tomo(double l1,double l2, int z1, int z2, int z3, int z4){$/;"	f
cov_NG_cl_cl_tomo_HOD	covariances_fourier_HOD.c	/^double cov_NG_cl_cl_tomo_HOD(double l1,double l2, int z1, int z2, int z3, int z4){$/;"	f
cov_NG_cl_gl_real	covariances_real.c	/^double cov_NG_cl_gl_real(double theta1, double theta2, int z1,int z2, int z3, int z4){$/;"	f
cov_NG_cl_gl_tomo	covariances_fourier.c	/^double cov_NG_cl_gl_tomo(double l1,double l2, int z1, int z2, int zl, int zs){ \/\/z1,z2 clustering bins; zl,zs g-g lensing bins$/;"	f
cov_NG_cl_gl_tomo_HOD	covariances_fourier_HOD.c	/^double cov_NG_cl_gl_tomo_HOD(double l1,double l2, int z1, int z2, int zl, int zs){ \/\/z1,z2 clustering bins; zl,zs g-g lensing bins$/;"	f
cov_NG_cl_shear_real	covariances_real.c	/^double cov_NG_cl_shear_real(double theta1, double theta2, int z1,int z2, int z3, int z4, int pm){$/;"	f
cov_NG_cl_shear_tomo	covariances_fourier.c	/^double cov_NG_cl_shear_tomo(double l1,double l2, int z1, int z2, int z3, int z4){ \/\/z1,z2 clustering bins; z3,z4 shear bins$/;"	f
cov_NG_cl_shear_tomo_HOD	covariances_fourier_HOD.c	/^double cov_NG_cl_shear_tomo_HOD(double l1,double l2, int z1, int z2, int z3, int z4){ \/\/z1,z2 clustering bins; z3,z4 shear bins$/;"	f
cov_NG_gg_gk	covariances_CMBxLSS_fourier.c	/^double cov_NG_gg_gk(double l1, double l2, int n1, int n2, int n3){$/;"	f
cov_NG_gg_kk	covariances_CMBxLSS_fourier.c	/^double cov_NG_gg_kk(double l1,double l2, int n1, int n2){$/;"	f
cov_NG_gg_ks	covariances_CMBxLSS_fourier.c	/^double cov_NG_gg_ks(double l1,double l2, int n1, int n2, int zs){$/;"	f
cov_NG_ggl_cgl	covariances_cluster.c	/^double cov_NG_ggl_cgl (double l1,double l2,int nzl,int nzs1, int nzc, int nN,int nzs2){$/;"	f
cov_NG_ggl_cgl_HOD	covariances_fourier_HOD.c	/^double cov_NG_ggl_cgl_HOD (double l1,double l2,int nzl,int nzs1, int nzc, int nN,int nzs2){$/;"	f
cov_NG_gk_gk	covariances_CMBxLSS_fourier.c	/^double cov_NG_gk_gk(double l1,double l2, int n1, int n2){$/;"	f
cov_NG_gk_gs	covariances_CMBxLSS_fourier.c	/^double cov_NG_gk_gs(double l1,double l2, int zl1, int zl2, int zs){$/;"	f
cov_NG_gk_kk	covariances_CMBxLSS_fourier.c	/^double cov_NG_gk_kk(double l1,double l2, int zl){$/;"	f
cov_NG_gk_ks	covariances_CMBxLSS_fourier.c	/^double cov_NG_gk_ks(double l1,double l2, int zl, int zs){$/;"	f
cov_NG_gk_ss	covariances_CMBxLSS_fourier.c	/^double cov_NG_gk_ss(double l1,double l2, int zl, int zs1, int zs2){$/;"	f
cov_NG_gl_gl_real	covariances_real.c	/^double cov_NG_gl_gl_real(double theta1, double theta2, int z1l,int z1s, int z2l, int z2s){$/;"	f
cov_NG_gl_gl_tomo	covariances_fourier.c	/^double cov_NG_gl_gl_tomo(double l1,double l2, int z1l, int z1s, int z2l, int z2s){$/;"	f
cov_NG_gl_gl_tomo_HOD	covariances_fourier_HOD.c	/^double cov_NG_gl_gl_tomo_HOD(double l1,double l2, int z1l, int z1s, int z2l, int z2s){$/;"	f
cov_NG_gl_shear_real	covariances_real.c	/^double cov_NG_gl_shear_real(double theta1, double theta2, int z1l,int z1s, int z3, int z4, int pm){$/;"	f
cov_NG_gl_shear_tomo	covariances_fourier.c	/^double cov_NG_gl_shear_tomo(double l1,double l2, int zl, int zs, int z3, int z4){ \/\/zl,zs g-g lensing bins; z3,z4 shear bins$/;"	f
cov_NG_gl_shear_tomo_HOD	covariances_fourier_HOD.c	/^double cov_NG_gl_shear_tomo_HOD(double l1,double l2, int zl, int zs, int z3, int z4){ \/\/zl,zs g-g lensing bins; z3,z4 shear bins$/;"	f
cov_NG_gs_kk	covariances_CMBxLSS_fourier.c	/^double cov_NG_gs_kk(double l1,double l2, int zl, int zs){$/;"	f
cov_NG_gs_ks	covariances_CMBxLSS_fourier.c	/^double cov_NG_gs_ks(double l1,double l2, int zl, int zs1, int zs2){$/;"	f
cov_NG_kk_kk	covariances_CMBxLSS_fourier.c	/^double cov_NG_kk_kk(double l1,double l2){$/;"	f
cov_NG_kk_ks	covariances_CMBxLSS_fourier.c	/^double cov_NG_kk_ks(double l1,double l2, int zs){$/;"	f
cov_NG_kk_ss	covariances_CMBxLSS_fourier.c	/^double cov_NG_kk_ss(double l1,double l2, int z1, int z2){$/;"	f
cov_NG_ks_ks	covariances_CMBxLSS_fourier.c	/^double cov_NG_ks_ks(double l1,double l2, int z1, int z2){$/;"	f
cov_NG_ks_ss	covariances_CMBxLSS_fourier.c	/^double cov_NG_ks_ss(double l1,double l2, int z1, int z2, int z3){$/;"	f
cov_NG_shear_cgl	covariances_cluster.c	/^double cov_NG_shear_cgl (double l1,double l2,int nzs1,int nzs2, int nzc, int nN, int nzs3){$/;"	f
cov_NG_shear_rebin	covariances_real.c	/^double cov_NG_shear_rebin(double thetamin_i, double thetamax_i,double thetamin_j,double thetamax_j, int z1,int z2,int z3,int z4,int pm1,int pm2){$/;"	f
cov_NG_shear_shear_real	covariances_real.c	/^double cov_NG_shear_shear_real(double theta1, double theta2, int z1,int z2, int z3, int z4, int pm1, int pm2){ \/\/pm1 = pm2 = 1 for C++, pm1=pm2 = 0 for C--, pm1 = 1, pm2 = 0 for C+-$/;"	f
cov_NG_shear_shear_tomo	covariances_fourier.c	/^double cov_NG_shear_shear_tomo(double l1,double l2, int z1, int z2, int z3, int z4){$/;"	f
cov_N_N	covariances_cluster.c	/^double cov_N_N(int nzc1,int nN1, int nzc2, int nN2){$/;"	f
cov_cgl_N	covariances_cluster.c	/^double cov_cgl_N(double l,int nzc1,int nN1, int nzs,int nzc2, int nN2){$/;"	f
cov_cl_N	covariances_cluster.c	/^double cov_cl_N(double l,int nl1,int nl2, int nzc, int nN){$/;"	f
cov_cl_N_HOD	covariances_fourier_HOD.c	/^double cov_cl_N_HOD(double l,int nl1,int nl2, int nzc, int nN){$/;"	f
cov_ggl_N	covariances_cluster.c	/^double cov_ggl_N(double l,int nzl,int nzs, int nzc, int nN){$/;"	f
cov_ggl_N_HOD	covariances_fourier_HOD.c	/^double cov_ggl_N_HOD(double l,int nzl,int nzs, int nzc, int nN){$/;"	f
cov_shear_N	covariances_cluster.c	/^double cov_shear_N(double l,int ns1,int ns2, int nzc, int nN){$/;"	f
coverH0	structs.c	/^     double coverH0; \/\/units for comoving distances - speeds up code$/;"	m	struct:__anon9	file:
covpar	structs.c	/^} covpar;$/;"	t	typeref:struct:__anon23	file:
covparams	structs.c	/^covpar covparams;$/;"	v
create_Tm_COSEBIs_table	EBfunctions.c	/^void create_Tm_COSEBIs_table(double vt_max,double vt_min,char *filename2,int table_Tm_COSEBIs,int N_ORDER)$/;"	f
create_Ztable_lin	EBfunctions.c	/^void create_Ztable_lin(double vt_max,double vt_min,double thetarad,char *filename,int table_Nring_z)$/;"	f
create_Ztable_log	EBfunctions.c	/^void create_Ztable_log(double vt_max,double vt_min,double thetarad,char *filename,int table_Nring_z)$/;"	f
create_double_matrix	basics.c	/^double **create_double_matrix(long nrl, long nrh, long ncl, long nch)$/;"	f
create_double_vector	basics.c	/^double *create_double_vector(long nl, long nh)$/;"	f
cubearg	basics.c	/^static double cubearg;$/;"	v	file:
dN200_dchi	cluster.c	/^double dN200_dchi (double a, int nN){$/;"	f
dN200_dchi	clusters_DES.c	/^double dN200_dchi (double a, int nN){$/;"	f
dV_cluster	cluster.c	/^double dV_cluster(double z, void* params){ \/\/placeholder routine, factor in selection function for actual analaysis$/;"	f
dV_cluster	clusters_DES.c	/^double dV_cluster(double z, void* params){ \/\/placeholder routine, factor in selection function for actual analaysis$/;"	f
darg	basics.c	/^static double darg __attribute__((unused)),maxarg1 __attribute__((unused)), maxarg2 __attribute__((unused));$/;"	v	file:
data	BAO.c	/^  double data[10];$/;"	m	struct:__anon1	file:
data_read	init.c	/^double data_read(int READ, int ci)$/;"	f
data_read	init_basic.c	/^double data_read(int READ, int ci)$/;"	f
datav	GRS.c	/^   double* datav;$/;"	m	struct:__anon6	file:
datav	structs.c	/^   double** datav;$/;"	m	struct:__anon24	file:
dchi_da	cosmo2D_fourier.c	/^double dchi_da(double a){$/;"	f
delP_SSC	covariances_3D.c	/^double delP_SSC(double k, double a){$/;"	f
delP_SSC_cm	covariances_cluster.c	/^double delP_SSC_cm(double k, double a, double nz, double nN){$/;"	f
delPgg_SSC	covariances_fourier_HOD.c	/^double delPgg_SSC(double k, double a){$/;"	f
delPgm_SSC	covariances_fourier_HOD.c	/^double delPgm_SSC(double k, double a){$/;"	f
delPlin_SSC	covariances_3D.c	/^double delPlin_SSC(double k, double a){$/;"	f
delta_Delta	halo.c	/^double delta_Delta(double a)$/;"	f
delta_c	halo.c	/^double delta_c(double a) \/*set to 1.686 for consistency with Tinker mass & bias definition *\/$/;"	f
determine_emu_cosmo_calib	cosmo3D.c	/^void determine_emu_cosmo_calib(double *COSMO_emu, int *calibflag)$/;"	f
dist_BAO	BAO.c	/^double dist_BAO(double z){$/;"	f
dlognudlogm	halo.c	/^double dlognudlogm(double m)$/;"	f
do_matrix_mult_invcov	external_prior.c	/^double do_matrix_mult_invcov(int n_param, double invcov[n_param][n_param], double param_diff[n_param]) $/;"	f
error	basics.c	/^void error(char *s)$/;"	f
eta_ia	structs.c	/^    double eta_ia;$/;"	m	struct:input_nuisance_params	file:
eta_ia	structs.c	/^  double eta_ia; \/\/eta_other IA see Joachimi2012$/;"	m	struct:__anon20	file:
eta_ia	structs.c	/^  double eta_ia[2]; \/\/eta_other IA see Joachimi2012$/;"	m	struct:__anon21	file:
eta_ia_highz	structs.c	/^    double eta_ia_highz;$/;"	m	struct:input_nuisance_params	file:
eta_ia_highz	structs.c	/^  double eta_ia_highz; \/\/uncertainty in high z evolution$/;"	m	struct:__anon20	file:
eta_ia_highz	structs.c	/^  double eta_ia_highz[2]; \/\/additional uncertainty at high z$/;"	m	struct:__anon21	file:
example_Cl	examples.c	/^void example_Cl (){$/;"	f
example_Cov	examples.c	/^void example_Cov(){$/;"	f
example_pdelta	examples.c	/^void example_pdelta(){$/;"	f
example_w_HOD	examples.c	/^void example_w_HOD(){ \/\/examples for angular correlation functions using HOD model$/;"	f
example_wtheta	examples.c	/^void example_wtheta(){ \/\/angular 2PT functions using linear bias + non-linear matter power spectrum$/;"	f
fA_blue	structs.c	/^  double fA_blue; \/\/fractional IA amplitude of blue galaxies compared to red $/;"	m	struct:__anon20	file:
f_K	cosmo3D.c	/^double f_K(double chi)$/;"	f
f_NL	structs.c	/^     double f_NL; $/;"	m	struct:__anon9	file:
f_a	GRS.c	/^double f_a(double a){$/;"	f
f_growth	cosmo2D_exact.c	/^double f_growth(double z){$/;"	f
f_red_LF	IA.c	/^double f_red_LF(double mag, double a){$/;"	f
f_sky	GRS.c	/^   double f_sky; $/;"	m	struct:__anon6	file:
f_sky	structs.c	/^   double f_sky; $/;"	m	struct:__anon24	file:
f_tinker	halo.c	/^double f_tinker(double n, double a_in)$/;"	f
fc	structs.c	/^  double fc; \/\/central occupation$/;"	m	struct:__anon15	file:
fc_rm	structs.c	/^  double fc_rm[2];$/;"	m	struct:__anon22	file:
filename	structs.c	/^    char filename[200]; \/* output file name prefix *\/$/;"	m	struct:__anon23	file:
fill_class_parameters	cosmo3D.c	/^  int fill_class_parameters(struct file_content * fc,int parser_length){$/;"	f
flat_prior	structs.c	/^flat_priorpara flat_prior;$/;"	v
flat_priorpara	structs.c	/^}flat_priorpara;$/;"	t	typeref:struct:__anon22	file:
fnu_tinker	halo.c	/^double fnu_tinker(double n, double a)$/;"	f
fraction_Pdelta_baryon_from_sims_DES	baryons.c	/^double fraction_Pdelta_baryon_from_sims_DES(double k,double z)$/;"	f
fred	structs.c	/^  double fred[10];$/;"	m	struct:__anon20	file:
free_class_structs	cosmo3D.c	/^void free_class_structs(               $/;"	f
free_double_matrix	basics.c	/^void free_double_matrix(double **m, long nrl, long nrh, long ncl, long nch)$/;"	f
free_double_vector	basics.c	/^void free_double_vector(double *v, long nl, long nh)$/;"	f
fs_2	covariances_3D.c	/^double fs_2(double k1x, double k1y, double k2x, double k2y)$/;"	f
fs_3	covariances_3D.c	/^double fs_3(double k1x, double k1y, double k2x, double k2y, double k3x, double k3y)$/;"	f
fsat	HOD.c	/^double fsat(int nz,double a){$/;"	f
fsat_rm	redmagic.c	/^double fsat_rm(double a){$/;"	f
func_for_growfac	cosmo3D.c	/^int func_for_growfac(double a,const double y[],double f[],void *params)$/;"	f
fwhm	structs.c	/^   double fwhm;   \/\/ beam fwhm in rad$/;"	m	struct:__anon13	file:
g_bg	redshift.c	/^double g_bg (double a, int nzlens){$/;"	f
g_bg	redshift_spline.c	/^double g_bg (double a, int nzlens){$/;"	f
g_cmb	redshift.c	/^double g_cmb (double a){$/;"	f
g_cmb	redshift_spline.c	/^double g_cmb (double a){$/;"	f
g_tomo	redshift.c	/^double g_tomo(double a, int zbin) \/\/ for tomography bin zbin$/;"	f
g_tomo	redshift_spline.c	/^double g_tomo(double a, int zbin) \/\/ for tomography bin zbin$/;"	f
galpara	structs.c	/^}galpara;$/;"	t	typeref:struct:__anon14	file:
galsample	structs.c	/^     char galsample[256];$/;"	m	struct:__anon12	file:
gbias	structs.c	/^galpara gbias ={.b2 ={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},.bs2 ={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},.b1_function = &bgal_z}; \/\/default: point to old bgal_z routin$/;"	v
get_FPT_bias	pt.c	/^void get_FPT_bias(void){$/;"	f
get_FPT_bias_command_line	pt.c	/^void get_FPT_bias_command_line(void){$/;"	f
get_N_ell	like_fourier.c	/^int get_N_ell(void){$/;"	f
get_N_ggl	like_fourier.c	/^int get_N_ggl(void){$/;"	f
get_N_tomo_clustering	like_fourier.c	/^int get_N_tomo_clustering(void){$/;"	f
get_N_tomo_shear	like_fourier.c	/^int get_N_tomo_shear(void){$/;"	f
get_class_As	cosmo3D.c	/^  double get_class_As(struct file_content *fc, int position_As,double sigma8, int *status){$/;"	f
get_class_s8	cosmo3D.c	/^double get_class_s8(struct file_content *fc, int *status){$/;"	f
ggl_Npowerspectra	structs.c	/^  int ggl_Npowerspectra;\/\/ number of ggl tomography combinations$/;"	m	struct:__anon10	file:
ggl_efficiency	redshift.c	/^double ggl_efficiency(int zl, int zs){$/;"	f
ggl_efficiency	redshift_spline.c	/^double ggl_efficiency(int zl, int zs){$/;"	f
ggl_overlap_cut	structs.c	/^     double ggl_overlap_cut;$/;"	m	struct:__anon12	file:
gk	structs.c	/^   int gk;$/;"	m	struct:__anon8	file:
global	structs.c	/^globalpara global;$/;"	v
globalpara	structs.c	/^}globalpara;$/;"	t	typeref:struct:__anon18	file:
growfac	cosmo3D.c	/^double growfac(double a)$/;"	f
gs_2	covariances_3D.c	/^double gs_2(double k1x, double k1y,double k2x, double k2y)$/;"	f
h0	structs.c	/^     double h0; \/\/Hubble constant$/;"	m	struct:__anon9	file:
h0	structs.c	/^    double h0;$/;"	m	struct:input_cosmo_params	file:
h0	structs.c	/^    double h0;$/;"	m	struct:input_cosmo_params_mpp	file:
h0_max_emu	cosmo3D.c	23;"	d	file:
h0_min_emu	cosmo3D.c	24;"	d	file:
hankel_kernel_FT	basics.c	/^void hankel_kernel_FT(double x, fftw_complex *res, double *arg, int argc)$/;"	f
high	basics.c	/^     double high;$/;"	m	struct:__anon3	file:
hod	structs.c	/^  double hod[10][6]; \/*HOD[i] contains HOD parameters of galaxies in clustering bin i, following 5 parameter model of Zehavi et al. 2011 + modification of concentration parameter*\/$/;"	m	struct:__anon14	file:
hod	structs.c	/^  double hod[5];$/;"	m	struct:__anon15	file:
hoverh0	cosmo3D.c	/^static inline double hoverh0(double a){$/;"	f	file:
init_BAO_BOSS	BAO.c	/^void init_BAO_BOSS(){$/;"	f
init_BAO_DES	BAO.c	/^void init_BAO_DES(){$/;"	f
init_BAO_LSST	BAO.c	/^void init_BAO_LSST(){$/;"	f
init_BAO_WFIRST	BAO.c	/^void init_BAO_WFIRST(){$/;"	f
init_DES	examples.c	/^void init_DES(){$/;"	f
init_HOD_rm	init.c	/^void init_HOD_rm(){$/;"	f
init_HOD_rm	init_basic.c	/^void init_HOD_rm(){$/;"	f
init_IA	init.c	/^void init_IA(char *model,char *lumfct)$/;"	f
init_IA	init_basic.c	/^void init_IA(char *model,char *lumfct)$/;"	f
init_IA_mpp	init_mpp.c	/^void init_IA_mpp(int N)$/;"	f
init_Pdelta	init.c	/^void init_Pdelta(char *model,double nexp,double A_factor)$/;"	f
init_Pdelta	init_basic.c	/^void init_Pdelta(char *model,double nexp,double A_factor)$/;"	f
init_analysis_choices	init_LSST_SRD.c	/^void init_analysis_choices()$/;"	f
init_baryons	init.c	/^void init_baryons()$/;"	f
init_baryons	init_basic.c	/^void init_baryons()$/;"	f
init_binning_fourier	init.c	/^void init_binning_fourier(int Ncl, double lmin, double lmax, double lmax_shear, double Rmin_bias, int cluster_rich_Nbin, int Ntomo)$/;"	f
init_binning_fourier	init_basic.c	/^void init_binning_fourier(int Ncl, double lmin, double lmax, double lmax_shear, double Rmin_bias, int cluster_rich_Nbin, int Ntomo)$/;"	f
init_binning_mpp	init_mpp.c	/^void init_binning_mpp(int Ntheta,double theta_min_arcmin, double theta_max_arcmin){$/;"	f
init_binning_real	init.c	/^void init_binning_real(int Nt, double min, double max)$/;"	f
init_binning_real	init_basic.c	/^void init_binning_real(int Nt, double min, double max)$/;"	f
init_clphotoz_LSST_gold	init.c	/^void init_clphotoz_LSST_gold()$/;"	f
init_clphotoz_LSST_gold	init_basic.c	/^void init_clphotoz_LSST_gold()$/;"	f
init_clphotoz_benchmark	init.c	/^void init_clphotoz_benchmark()$/;"	f
init_clphotoz_benchmark	init_basic.c	/^void init_clphotoz_benchmark()$/;"	f
init_clphotoz_cmass	init.c	/^void init_clphotoz_cmass()$/;"	f
init_clphotoz_cmass	init_basic.c	/^void init_clphotoz_cmass()$/;"	f
init_clphotoz_redmagic	init.c	/^void init_clphotoz_redmagic()$/;"	f
init_clphotoz_redmagic	init_basic.c	/^void init_clphotoz_redmagic()$/;"	f
init_clphotoz_source	init.c	/^void init_clphotoz_source()$/;"	f
init_clphotoz_source	init_basic.c	/^void init_clphotoz_source()$/;"	f
init_clusters	init.c	/^void init_clusters()$/;"	f
init_clusters	init_basic.c	/^void init_clusters()$/;"	f
init_cmb	init.c	/^void init_cmb(char * cmbName) {$/;"	f
init_cmb	init_basic.c	/^void init_cmb(char * cmbName) {$/;"	f
init_cosmo	init.c	/^void init_cosmo()$/;"	f
init_cosmo	init_basic.c	/^void init_cosmo()$/;"	f
init_cosmo_runmode	init.c	/^void init_cosmo_runmode(char *runmode)$/;"	f
init_cosmo_runmode	init_basic.c	/^void init_cosmo_runmode(char *runmode)$/;"	f
init_data_inv	init.c	/^void init_data_inv(char *INV_FILE, char *DATA_FILE)$/;"	f
init_data_inv	init_basic.c	/^void init_data_inv(char *INV_FILE, char *DATA_FILE)$/;"	f
init_data_real	init.c	/^void init_data_real(char *COV_FILE, char *MASK_FILE, char *DATA_FILE)$/;"	f
init_data_real	init_basic.c	/^void init_data_real(char *COV_FILE, char *MASK_FILE, char *DATA_FILE)$/;"	f
init_galaxies	init.c	/^void init_galaxies(char *SOURCE_ZFILE, char *LENS_ZFILE, char *lensphotoz, char *sourcephotoz, char *galsample)$/;"	f
init_galaxies	init_basic.c	/^void init_galaxies(char *SOURCE_ZFILE, char *LENS_ZFILE, char *lensphotoz, char *sourcephotoz, char *galsample)$/;"	f
init_ggl_tomo	init_mpp.c	/^void init_ggl_tomo(){$/;"	f
init_lens_sample	init.c	/^void init_lens_sample(char *lensphotoz, char *galsample)$/;"	f
init_lens_sample	init_LSST_SRD.c	/^void init_lens_sample(char *lensphotoz)$/;"	f
init_lens_sample	init_basic.c	/^void init_lens_sample(char *lensphotoz, char *galsample)$/;"	f
init_lens_sample_	init.c	/^void init_lens_sample_()$/;"	f
init_lens_sample_	init_basic.c	/^void init_lens_sample_()$/;"	f
init_lens_sample_mpp	init_mpp.c	/^void init_lens_sample_mpp(char *multihisto_file, int Ntomo, double *b1, double *b2, double ggl_cut)$/;"	f
init_priors	init.c	/^void init_priors(char *cosmoPrior1, char *cosmoPrior2, char *cosmoPrior3, char *cosmoPrior4)$/;"	f
init_priors	init_basic.c	/^void init_priors(char *cosmoPrior1, char *cosmoPrior2, char *cosmoPrior3, char *cosmoPrior4)$/;"	f
init_probes	init.c	/^void init_probes(char *probes)$/;"	f
init_probes	init_basic.c	/^void init_probes(char *probes)$/;"	f
init_probes_5x2pt	init_mpp.c	/^void init_probes_5x2pt(char *probes)$/;"	f
init_probes_real	init.c	/^void init_probes_real(char *probes)$/;"	f
init_probes_real	init_basic.c	/^void init_probes_real(char *probes)$/;"	f
init_probes_real_mpp	init_mpp.c	/^void init_probes_real_mpp(char *probes)$/;"	f
init_source_sample	init.c	/^void init_source_sample(char *sourcephotoz)$/;"	f
init_source_sample	init_LSST_SRD.c	/^void init_source_sample(char *sourcephotoz)$/;"	f
init_source_sample	init_basic.c	/^void init_source_sample(char *sourcephotoz)$/;"	f
init_source_sample_	init.c	/^void init_source_sample_()$/;"	f
init_source_sample_	init_basic.c	/^void init_source_sample_()$/;"	f
init_source_sample_mpp	init_mpp.c	/^void init_source_sample_mpp(char *multihisto_file, int Ntomo)$/;"	f
init_survey	init.c	/^void init_survey(char *surveyname)$/;"	f
init_survey	init_basic.c	/^void init_survey(char *surveyname)$/;"	f
init_survey_mpp	init_mpp.c	/^void init_survey_mpp(char *surveyname, double area, double sigma_e){$/;"	f
init_wlphotoz_stage3	init.c	/^void init_wlphotoz_stage3()$/;"	f
init_wlphotoz_stage3	init_basic.c	/^void init_wlphotoz_stage3()$/;"	f
init_wlphotoz_stage4	init.c	/^void init_wlphotoz_stage4()$/;"	f
init_wlphotoz_stage4	init_basic.c	/^void init_wlphotoz_stage4()$/;"	f
inner_I0j	halo.c	/^double inner_I0j (double logm, void *para){$/;"	f
inner_I1j	halo.c	/^double inner_I1j (double logm, void *para){$/;"	f
inner_P_bin	covariances_3D.c	/^double inner_P_bin(double theta, void *params){$/;"	f
inner_SSC_gg	covariances_fourier_HOD.c	/^double inner_SSC_gg (double logm, void *para){$/;"	f
inner_SSC_gm	covariances_fourier_HOD.c	/^double inner_SSC_gm (double logm, void *para){$/;"	f
inner_project_tri_1h_cov_shear_shear_tomo	covariances_wl.c	/^double inner_project_tri_1h_cov_shear_shear_tomo(double a, void *params)$/;"	f
inner_project_tri_2h_cov_shear_shear_tomo	covariances_wl.c	/^double inner_project_tri_2h_cov_shear_shear_tomo(double a,void *params)$/;"	f
inner_project_tri_cov_cl_cl_tomo	covariances_fourier.c	/^double inner_project_tri_cov_cl_cl_tomo(double a,void *params)$/;"	f
inner_project_tri_cov_cl_cl_tomo_HOD	covariances_fourier_HOD.c	/^double inner_project_tri_cov_cl_cl_tomo_HOD(double a,void *params)$/;"	f
inner_project_tri_cov_cl_gl_tomo	covariances_fourier.c	/^double inner_project_tri_cov_cl_gl_tomo(double a,void *params)$/;"	f
inner_project_tri_cov_cl_gl_tomo_HOD	covariances_fourier_HOD.c	/^double inner_project_tri_cov_cl_gl_tomo_HOD(double a,void *params)$/;"	f
inner_project_tri_cov_cl_shear_tomo	covariances_fourier.c	/^double inner_project_tri_cov_cl_shear_tomo(double a,void *params)$/;"	f
inner_project_tri_cov_cl_shear_tomo_HOD	covariances_fourier_HOD.c	/^double inner_project_tri_cov_cl_shear_tomo_HOD(double a,void *params)$/;"	f
inner_project_tri_cov_gg_gk	covariances_CMBxLSS_fourier.c	/^double inner_project_tri_cov_gg_gk(double a,void *params)$/;"	f
inner_project_tri_cov_gg_kk	covariances_CMBxLSS_fourier.c	/^double inner_project_tri_cov_gg_kk(double a,void *params)$/;"	f
inner_project_tri_cov_gg_ks	covariances_CMBxLSS_fourier.c	/^double inner_project_tri_cov_gg_ks(double a,void *params)$/;"	f
inner_project_tri_cov_gk_gk	covariances_CMBxLSS_fourier.c	/^double inner_project_tri_cov_gk_gk(double a,void *params)$/;"	f
inner_project_tri_cov_gk_gs	covariances_CMBxLSS_fourier.c	/^double inner_project_tri_cov_gk_gs(double a, void *params)$/;"	f
inner_project_tri_cov_gk_kk	covariances_CMBxLSS_fourier.c	/^double inner_project_tri_cov_gk_kk(double a, void *params)$/;"	f
inner_project_tri_cov_gk_ks	covariances_CMBxLSS_fourier.c	/^double inner_project_tri_cov_gk_ks(double a, void *params)$/;"	f
inner_project_tri_cov_gk_ss	covariances_CMBxLSS_fourier.c	/^double inner_project_tri_cov_gk_ss(double a, void *params)$/;"	f
inner_project_tri_cov_gl_gl_tomo	covariances_fourier.c	/^double inner_project_tri_cov_gl_gl_tomo(double a,void *params)$/;"	f
inner_project_tri_cov_gl_gl_tomo_HOD	covariances_fourier_HOD.c	/^double inner_project_tri_cov_gl_gl_tomo_HOD(double a,void *params)$/;"	f
inner_project_tri_cov_gl_shear_tomo	covariances_fourier.c	/^double inner_project_tri_cov_gl_shear_tomo(double a,void *params)$/;"	f
inner_project_tri_cov_gl_shear_tomo_HOD	covariances_fourier_HOD.c	/^double inner_project_tri_cov_gl_shear_tomo_HOD(double a,void *params)$/;"	f
inner_project_tri_cov_gs_kk	covariances_CMBxLSS_fourier.c	/^double inner_project_tri_cov_gs_kk(double a,void *params)$/;"	f
inner_project_tri_cov_gs_ks	covariances_CMBxLSS_fourier.c	/^double inner_project_tri_cov_gs_ks(double a,void *params)$/;"	f
inner_project_tri_cov_kk_kk	covariances_CMBxLSS_fourier.c	/^double inner_project_tri_cov_kk_kk(double a,void *params)$/;"	f
inner_project_tri_cov_kk_ks	covariances_CMBxLSS_fourier.c	/^double inner_project_tri_cov_kk_ks(double a,void *params)$/;"	f
inner_project_tri_cov_kk_ss	covariances_CMBxLSS_fourier.c	/^double inner_project_tri_cov_kk_ss(double a,void *params)$/;"	f
inner_project_tri_cov_ks_ks	covariances_CMBxLSS_fourier.c	/^double inner_project_tri_cov_ks_ks(double a,void *params)$/;"	f
inner_project_tri_cov_ks_ss	covariances_CMBxLSS_fourier.c	/^double inner_project_tri_cov_ks_ss(double a,void *params)$/;"	f
inner_project_tri_cov_shear_shear_tomo	covariances_fourier.c	/^double inner_project_tri_cov_shear_shear_tomo(double a,void *params)$/;"	f
inner_project_tri_lin_cov_shear_shear_tomo	covariances_wl.c	/^double inner_project_tri_lin_cov_shear_shear_tomo(double a,void *params)$/;"	f
inner_tri_lin_cov	covariances_3D.c	/^double inner_tri_lin_cov(double theta, void *params){$/;"	f
input_cosmo_params	structs.c	/^typedef struct input_cosmo_params {$/;"	s	file:
input_cosmo_params	structs.c	/^} input_cosmo_params;$/;"	t	typeref:struct:input_cosmo_params	file:
input_cosmo_params_mpp	structs.c	/^typedef struct input_cosmo_params_mpp {$/;"	s	file:
input_cosmo_params_mpp	structs.c	/^} input_cosmo_params_mpp;$/;"	t	typeref:struct:input_cosmo_params_mpp	file:
input_nuisance_params	structs.c	/^typedef struct input_nuisance_params {$/;"	s	file:
input_nuisance_params	structs.c	/^} input_nuisance_params;$/;"	t	typeref:struct:input_nuisance_params	file:
input_nuisance_params_mpp	structs.c	/^typedef struct input_nuisance_params_mpp {$/;"	s	file:
input_nuisance_params_mpp	structs.c	/^} input_nuisance_params_mpp;$/;"	t	typeref:struct:input_nuisance_params_mpp	file:
insane	basics.c	/^     double insane;$/;"	m	struct:__anon3	file:
int2_for_cov_NG_cl_cl	covariances_real.c	/^double int2_for_cov_NG_cl_cl(double l2,void *params){$/;"	f
int2_for_cov_NG_cl_gl	covariances_real.c	/^double int2_for_cov_NG_cl_gl(double l2,void *params){$/;"	f
int2_for_cov_NG_cl_shear	covariances_real.c	/^double int2_for_cov_NG_cl_shear(double l2,void *params){$/;"	f
int2_for_cov_NG_gl_gl	covariances_real.c	/^double int2_for_cov_NG_gl_gl(double l2,void *params){$/;"	f
int2_for_cov_NG_gl_shear	covariances_real.c	/^double int2_for_cov_NG_gl_shear(double l2,void *params){$/;"	f
int2_for_cov_NG_shear	covariances_real.c	/^double int2_for_cov_NG_shear(double l2,void *params){$/;"	f
int2_for_wreal	redmagic_real.c	/^double int2_for_wreal(double z2,void *params)$/;"	f
int_G11	HOD.c	/^double int_G11 (double logm, void *para){$/;"	f
int_GM02	HOD.c	/^double int_GM02 (double logm, void *para){$/;"	f
int_GM02_rm	redmagic.c	/^double int_GM02_rm (double logm, void *para){$/;"	f
int_I04_cmcm	covariances_cluster.c	/^double int_I04_cmcm (double lgM, void *para){$/;"	f
int_I04_mmcm	covariances_cluster.c	/^double int_I04_mmcm (double lgM, void *para){$/;"	f
int_I12_cm	covariances_cluster.c	/^double int_I12_cm (double lgM, void *para){$/;"	f
int_M_Mobs	cluster.c	/^double int_M_Mobs(double lgM, void* params){$/;"	f
int_M_Mobs	clusters_DES.c	/^double int_M_Mobs(double lgM, void* params){$/;"	f
int_P_cm_1h	cluster.c	/^double int_P_cm_1h(double lgM, void *params){$/;"	f
int_P_cm_1h	clusters_DES.c	/^double int_P_cm_1h(double lgM, void *params){$/;"	f
int_P_gg_2h_excl	redmagic_real.c	/^double int_P_gg_2h_excl(double lgM, void *para){$/;"	f
int_b_Mobs	cluster.c	/^double int_b_Mobs(double lgM, void* params){$/;"	f
int_b_Mobs	clusters_DES.c	/^double int_b_Mobs(double lgM, void* params){$/;"	f
int_b_lin	covariances_3D.c	/^double int_b_lin(double theta, void *params){$/;"	f
int_b_lin_mu	covariances_3D.c	/^double int_b_lin_mu(double m, void *params){$/;"	f
int_bgal	HOD.c	/^double int_bgal (double m, void *params){$/;"	f
int_bgal_rm	redmagic.c	/^double int_bgal_rm (double m, void *params){$/;"	f
int_cov_N_N	covariances_cluster.c	/^double int_cov_N_N(double a, void *params)$/;"	f
int_cur	cosmo3D.c	/^double int_cur(double lnk, void *args) \/\/tak12 A5$/;"	f
int_da_n_Mobs	cluster.c	/^double int_da_n_Mobs(double a, void* params){$/;"	f
int_da_n_Mobs	clusters_DES.c	/^double int_da_n_Mobs(double a, void* params){$/;"	f
int_for_C_GI	IA.c	/^double int_for_C_GI(double a, void *params)$/;"	f
int_for_C_GI_JB	IA.c	/^double int_for_C_GI_JB(double a, void *params)$/;"	f
int_for_C_GI_lin	IA.c	/^double int_for_C_GI_lin(double a, void *params)$/;"	f
int_for_C_II	IA.c	/^double int_for_C_II(double a, void *params)$/;"	f
int_for_C_II_JB	IA.c	/^double int_for_C_II_JB(double a, void *params)$/;"	f
int_for_C_II_lin	IA.c	/^double int_for_C_II_lin(double a, void *params)$/;"	f
int_for_C_ccl_tomo	cluster.c	/^double int_for_C_ccl_tomo(double a, void *params){$/;"	f
int_for_C_ccl_tomo	clusters_DES.c	/^double int_for_C_ccl_tomo(double a, void *params){$/;"	f
int_for_C_cgl_tomo	cluster.c	/^double int_for_C_cgl_tomo(double a, void *params)$/;"	f
int_for_C_cgl_tomo	clusters_DES.c	/^double int_for_C_cgl_tomo(double a, void *params)$/;"	f
int_for_C_cl_HOD	cosmo2D_fourier.c	/^double int_for_C_cl_HOD(double a, void *params)$/;"	f
int_for_C_cl_HOD_rm_1h	redmagic_real.c	/^double int_for_C_cl_HOD_rm_1h(double a, void *params)$/;"	f
int_for_C_cl_RSD	cosmo2D_exact.c	/^double int_for_C_cl_RSD (double klog, void *params){$/;"	f
int_for_C_cl_g_rm_tomo	covariances_fourier_HOD.c	/^double int_for_C_cl_g_rm_tomo(double a, void *params){$/;"	f
int_for_C_cl_g_tomo	cluster.c	/^double int_for_C_cl_g_tomo(double a, void *params){$/;"	f
int_for_C_cl_g_tomo	clusters_DES.c	/^double int_for_C_cl_g_tomo(double a, void *params){$/;"	f
int_for_C_cl_lin	cosmo2D_fourier.c	/^double int_for_C_cl_lin(double a, void *params)$/;"	f
int_for_C_cl_nonLimber	cosmo2D_exact.c	/^double int_for_C_cl_nonLimber (double lk, void *params){$/;"	f
int_for_C_cl_nonLimber_tomo	cosmo2D_exact.c	/^double int_for_C_cl_nonLimber_tomo (double k, void *params){$/;"	f
int_for_C_cl_tomo	cosmo2D_fourier.c	/^double int_for_C_cl_tomo(double a, void *params)$/;"	f
int_for_C_cl_tomo_b2	cosmo2D_fourier.c	/^double int_for_C_cl_tomo_b2(double a, void *params)$/;"	f
int_for_C_gI	IA.c	/^double int_for_C_gI(double a, void *params)$/;"	f
int_for_C_gI_JB	IA.c	/^double int_for_C_gI_JB(double a, void *params)$/;"	f
int_for_C_gI_lin	IA.c	/^double int_for_C_gI_lin(double a, void *params)$/;"	f
int_for_C_ggl_IA	IA.c	/^double int_for_C_ggl_IA(double a, void *params)$/;"	f
int_for_C_ggl_IA_Az	IA.c	/^double int_for_C_ggl_IA_Az(double a, void *params)$/;"	f
int_for_C_ggl_IA_Az_b2	IA.c	/^double int_for_C_ggl_IA_Az_b2(double a, void *params)$/;"	f
int_for_C_ggl_IA_mpp	IA.c	/^double int_for_C_ggl_IA_mpp(double a, void *params)$/;"	f
int_for_C_ggl_IA_mpp_b2	IA.c	/^double int_for_C_ggl_IA_mpp_b2(double a, void *params)$/;"	f
int_for_C_gk	CMBxLSS.c	/^double int_for_C_gk(double a, void *params)$/;"	f
int_for_C_gk_b2	CMBxLSS.c	/^double int_for_C_gk_b2(double a, void *params)$/;"	f
int_for_C_gl_HOD_tomo	cosmo2D_fourier.c	/^double int_for_C_gl_HOD_tomo(double a, void *params)$/;"	f
int_for_C_gl_tomo	cosmo2D_fourier.c	/^double int_for_C_gl_tomo(double a, void *params)$/;"	f
int_for_C_gl_tomo_b2	cosmo2D_fourier.c	/^double int_for_C_gl_tomo_b2(double a, void *params)$/;"	f
int_for_C_kk	CMBxLSS.c	/^double int_for_C_kk(double a, void *params){$/;"	f
int_for_C_ks	CMBxLSS.c	/^double int_for_C_ks(double a, void *params)$/;"	f
int_for_C_ks_IA	CMBxLSS.c	/^double int_for_C_ks_IA(double a, void *params)$/;"	f
int_for_C_ks_IA_Az	CMBxLSS.c	/^double int_for_C_ks_IA_Az(double a, void *params)$/;"	f
int_for_C_magnification_magnification	magnification.c	/^double int_for_C_magnification_magnification(double a, void *params)$/;"	f
int_for_C_position_magnification	magnification.c	/^double int_for_C_position_magnification(double a, void *params)$/;"	f
int_for_C_shear_magnification	magnification.c	/^double int_for_C_shear_magnification(double a, void *params)$/;"	f
int_for_C_shear_shear_IA	IA.c	/^double int_for_C_shear_shear_IA(double a, void *params)$/;"	f
int_for_C_shear_shear_IA_Az	IA.c	/^double int_for_C_shear_shear_IA_Az(double a, void *params)$/;"	f
int_for_C_shear_shear_IA_mpp	IA.c	/^double int_for_C_shear_shear_IA_mpp(double a, void *params)$/;"	f
int_for_C_shear_tomo	cosmo2D_fourier.c	/^double int_for_C_shear_tomo(double a, void *params)$/;"	f
int_for_G02	HOD.c	/^double int_for_G02 (double logm, void *para){$/;"	f
int_for_G02_rm	redmagic.c	/^double int_for_G02_rm (double logm, void *para){$/;"	f
int_for_HSV_shear_shear_tomo	covariances_wl.c	/^double int_for_HSV_shear_shear_tomo(double a, void *params){$/;"	f
int_for_Psi_RSD	cosmo2D_exact.c	/^double int_for_Psi_RSD(double z, void *params){$/;"	f
int_for_Psi_cl	cosmo2D_exact.c	/^double int_for_Psi_cl (double z, void *params){$/;"	f
int_for_b_ngmatched	halo.c	/^double int_for_b_ngmatched (double logm, void *para){$/;"	f
int_for_chi	cosmo3D.c	/^double int_for_chi(double a, void * args){$/;"	f
int_for_cov_G_cl_cl	covariances_real.c	/^double int_for_cov_G_cl_cl(double l, void *params){$/;"	f
int_for_cov_G_cl_gl	covariances_real.c	/^double int_for_cov_G_cl_gl(double l, void *params){$/;"	f
int_for_cov_G_cl_shear	covariances_real.c	/^double int_for_cov_G_cl_shear(double l, void *params){$/;"	f
int_for_cov_G_gl_gl	covariances_real.c	/^double int_for_cov_G_gl_gl(double l, void *params){$/;"	f
int_for_cov_G_gl_shear	covariances_real.c	/^double int_for_cov_G_gl_shear(double l, void *params){$/;"	f
int_for_cov_G_shear	covariances_real.c	/^double int_for_cov_G_shear(double l, void *params){$/;"	f
int_for_cov_G_shear_nonoise	covariances_real.c	/^double int_for_cov_G_shear_nonoise(double l, void *params){ \/\/no mixed term!$/;"	f
int_for_cov_NG_cl_cl	covariances_real.c	/^double int_for_cov_NG_cl_cl(double l1, void *params){$/;"	f
int_for_cov_NG_cl_gl	covariances_real.c	/^double int_for_cov_NG_cl_gl(double l1, void *params){$/;"	f
int_for_cov_NG_cl_shear	covariances_real.c	/^double int_for_cov_NG_cl_shear(double l1, void *params){$/;"	f
int_for_cov_NG_gl_gl	covariances_real.c	/^double int_for_cov_NG_gl_gl(double l1, void *params){$/;"	f
int_for_cov_NG_gl_shear	covariances_real.c	/^double int_for_cov_NG_gl_shear(double l1, void *params){$/;"	f
int_for_cov_NG_shear	covariances_real.c	/^double int_for_cov_NG_shear(double l1, void *params){$/;"	f
int_for_g_tomo	redshift.c	/^double int_for_g_tomo(double aprime,void *params)$/;"	f
int_for_g_tomo	redshift_spline.c	/^double int_for_g_tomo(double aprime,void *params)$/;"	f
int_for_ggl_efficiency	redshift.c	/^double int_for_ggl_efficiency(double z, void *params){$/;"	f
int_for_ggl_efficiency	redshift_spline.c	/^double int_for_ggl_efficiency(double z, void *params){$/;"	f
int_for_ngmatched	halo.c	/^double int_for_ngmatched (double logm, void *para){$/;"	f
int_for_sigma_r_sqr	cosmo3D.c	/^double int_for_sigma_r_sqr(double k, void * args)$/;"	f
int_for_variance	covariances_3D.c	/^double int_for_variance (double logk, void *params){$/;"	f
int_for_w	cosmo2D_real.c	/^double int_for_w(double l, void *params){$/;"	f
int_for_wreal	redmagic_real.c	/^double int_for_wreal(double z1,void *params)$/;"	f
int_for_xi_gg	redmagic_real.c	/^double int_for_xi_gg (double k, void *params){$/;"	f
int_for_xi_gg_1h	redmagic_real.c	/^double int_for_xi_gg_1h (double k, void *params){$/;"	f
int_for_xi_nl	redmagic_real.c	/^double int_for_xi_nl (double k, void *params){$/;"	f
int_for_zmean	redshift.c	/^double int_for_zmean(double z, void *params){$/;"	f
int_for_zmean	redshift_spline.c	/^double int_for_zmean(double z, void *params){$/;"	f
int_for_zmean_source	redshift.c	/^double int_for_zmean_source(double z, void *params){$/;"	f
int_for_zmean_source	redshift_spline.c	/^double int_for_zmean_source(double z, void *params){$/;"	f
int_fsat	HOD.c	/^double int_fsat (double m, void *params){$/;"	f
int_fsat_rm	redmagic.c	/^double int_fsat_rm (double m, void *params){$/;"	f
int_gsl_integrate_cov_precision	basics.c	/^double int_gsl_integrate_cov_precision(double (*func)(double, void*),void *arg,double a, double b, double *error, int niter)$/;"	f
int_gsl_integrate_high_precision	basics.c	/^double int_gsl_integrate_high_precision(double (*func)(double, void*),void *arg,double a, double b, double *error, int niter)$/;"	f
int_gsl_integrate_insane_precision	basics.c	/^double int_gsl_integrate_insane_precision(double (*func)(double, void*),void *arg,double a, double b, double *error, int niter)$/;"	f
int_gsl_integrate_low_precision	basics.c	/^double int_gsl_integrate_low_precision(double (*func)(double, void*),void *arg,double a, double b, double *error, int niter)$/;"	f
int_gsl_integrate_medium_precision	basics.c	/^double int_gsl_integrate_medium_precision(double (*func)(double, void*),void *arg,double a, double b, double *error, int niter)$/;"	f
int_mc_rm	redmagic.c	/^double int_mc_rm (double m, void *params){$/;"	f
int_mmean	HOD.c	/^double int_mmean (double m, void *params){$/;"	f
int_mmean_rm	redmagic.c	/^double int_mmean_rm (double m, void *params){$/;"	f
int_n_Mobs	cluster.c	/^double int_n_Mobs(double lgM, void* params){$/;"	f
int_n_Mobs	clusters_DES.c	/^double int_n_Mobs(double lgM, void* params){$/;"	f
int_nc_rm	redmagic.c	/^double int_nc_rm (double m, void *params){$/;"	f
int_neff	cosmo3D.c	/^double int_neff(double lnk, void *args) \/\/tak12 A5$/;"	f
int_ngal	HOD.c	/^double int_ngal (double m, void *params){$/;"	f
int_ngal_rm	redmagic.c	/^double int_ngal_rm (double m, void *params){$/;"	f
int_nlens	redshift.c	/^double int_nlens(double z, void* param){$/;"	f
int_nlens	redshift_spline.c	/^double int_nlens(double z, void* param){$/;"	f
int_nsource	redshift.c	/^double int_nsource(double z, void* param){$/;"	f
int_nsource	redshift_spline.c	/^double int_nsource(double z, void* param){$/;"	f
int_rho_nfw	halo.c	/^double int_rho_nfw(double r, void *params){\/\/Fourier kernel * NFW profile, integrand for u_nfw $/;"	f
int_sig_R_knl	cosmo3D.c	/^double int_sig_R_knl(double lnk, void *args) \/\/ tak12 A4$/;"	f
int_vector	basics.c	/^int *int_vector(long nl, long nh)$/;"	f
integrand1_minus	EBfunctions.c	/^double integrand1_minus(double theta1, void *params)$/;"	f
integrand1_plus	EBfunctions.c	/^double integrand1_plus(double theta1, void *params)$/;"	f
integrand2_minus	EBfunctions.c	/^double integrand2_minus(double theta2, void *params)$/;"	f
integrand2_plus	EBfunctions.c	/^double integrand2_plus(double theta2, void *params)$/;"	f
integrand_Tm_log_shear_shear	EBfunctions.c	/^double integrand_Tm_log_shear_shear(double vartheta, void *p)$/;"	f
integrand_Tp_log_shear_shear	EBfunctions.c	/^double integrand_Tp_log_shear_shear(double vartheta, void *p)$/;"	f
integrand_j0_Tfunc	EBfunctions.c	/^double integrand_j0_Tfunc(double vartheta, void *params)$/;"	f
integrand_j2_Tfunc	EBfunctions.c	/^double integrand_j2_Tfunc(double vartheta, void *params)$/;"	f
interpol	basics.c	/^double interpol(double *f, int n, double a, double b, double dx, double x, double lower, double upper)$/;"	f
interpol2d	basics.c	/^double interpol2d(double **f,$/;"	f
interpol2d_fitslope	basics.c	/^double interpol2d_fitslope(double **f,$/;"	f
interpol_fitslope	basics.c	/^double interpol_fitslope(double *f, int n, double a, double b, double dx, double x, double lower)$/;"	f
invcov_mask	init.c	/^double invcov_mask(int READ, int ci, int cj)$/;"	f
invcov_mask	init_basic.c	/^double invcov_mask(int READ, int ci, int cj)$/;"	f
invcov_read	init.c	/^double invcov_read(int READ, int ci, int cj)$/;"	f
invcov_read	init_basic.c	/^double invcov_read(int READ, int ci, int cj)$/;"	f
invert_matrix_colesky	basics.c	/^void invert_matrix_colesky(gsl_matrix *A)$/;"	f
k	GRS.c	/^   double* k;$/;"	m	struct:__anon6	file:
k	structs.c	/^   double* k;$/;"	m	struct:__anon24	file:
k_max	GRS.c	/^   double k_max; \/\/in h\/Mpc$/;"	m	struct:__anon6	file:
k_max	structs.c	/^   double k_max; \/\/in h\/Mpc$/;"	m	struct:__anon24	file:
k_max	structs.c	/^  double k_max;$/;"	m	struct:__anon19	file:
k_max_cH0	basics.c	/^     double k_max_cH0;$/;"	m	struct:__anon4	file:
k_max_mpc	basics.c	/^     double k_max_mpc;$/;"	m	struct:__anon4	file:
k_max_mpc_class	basics.c	/^     double k_max_mpc_class;$/;"	m	struct:__anon4	file:
k_min	GRS.c	/^   double k_min; \/\/ in h\/Mpc$/;"	m	struct:__anon6	file:
k_min	structs.c	/^   double k_min; \/\/ in h\/Mpc$/;"	m	struct:__anon24	file:
k_min	structs.c	/^  double k_min;$/;"	m	struct:__anon19	file:
k_min_cH0	basics.c	/^     double k_min_cH0;$/;"	m	struct:__anon4	file:
k_min_mpc	basics.c	/^     double k_min_mpc;$/;"	m	struct:__anon4	file:
k_star	GRS.c	/^   double k_star; \/\/in h\/Mpc$/;"	m	struct:__anon6	file:
k_star	structs.c	/^   double k_star; \/\/in h\/Mpc$/;"	m	struct:__anon24	file:
kappa_reconstruction_noise	covariances_CMBxLSS_fourier.c	/^double kappa_reconstruction_noise(double l){$/;"	f
kk	structs.c	/^   int kk;$/;"	m	struct:__anon8	file:
ks	structs.c	/^   int ks;$/;"	m	struct:__anon8	file:
l_max	structs.c	/^  double l_max;$/;"	m	struct:__anon16	file:
l_min	structs.c	/^  double l_min;$/;"	m	struct:__anon16	file:
lbin	structs.c	/^  int lbin;$/;"	m	struct:__anon16	file:
lens_z_bias	structs.c	/^    double lens_z_bias[10];$/;"	m	struct:input_nuisance_params	file:
lens_z_bias	structs.c	/^    double lens_z_bias[10];$/;"	m	struct:input_nuisance_params_mpp	file:
lens_z_s	structs.c	/^    double lens_z_s;$/;"	m	struct:input_nuisance_params	file:
lensphotoz	structs.c	/^     char lensphotoz[256];$/;"	m	struct:__anon12	file:
lf	structs.c	/^    double lf[6];$/;"	m	struct:input_nuisance_params	file:
lgM_obs	cluster.c	/^double lgM_obs(double N200, double a){$/;"	f
lgM_obs	clusters_DES.c	/^double lgM_obs(double N200, double a){$/;"	f
lgMmax	cluster.c	/^double lgMmax(double a,int nN){\/\/ speed up of mass integrals for Gaussian scatter - change to log(limits.M_max) for general scatter distribution $/;"	f
lgMmax	clusters_DES.c	/^double lgMmax(double a,int nN){\/\/ speed up of mass integrals for Gaussian scatter - change to log(limits.M_max) for general scatter distribution $/;"	f
lgMmin	cluster.c	/^double lgMmin(double a,int nN){ \/\/ speed up of mass integrals for Gaussian scatter - change to log(limits.M_min) for general scatter distribution $/;"	f
lgMmin	clusters_DES.c	/^double lgMmin(double a,int nN){ \/\/ speed up of mass integrals for Gaussian scatter - change to log(limits.M_min) for general scatter distribution $/;"	f
lightspeed	basics.c	/^     double lightspeed;$/;"	m	struct:__anon2	file:
like	structs.c	/^likepara like ={.baryons = 0, .IA = 0., .bias = 0, .wlphotoz = 0, .clphotoz = 0, .shearcalib = 0, .clusterMobs =0, .Planck =0, .Planck15 =0, .BOSS_Chuang =0, .H0_Efstathiou14 =0, .BAO = 0, .SN = 0, .Aubourg_Planck_BAO_SN = 0, .GRS =0,.SRD_SL_Y1=0,.SRD_SL_Y10=0,.SRD_SN_Y10=0,.SRD_SN_Y1=0};$/;"	v
likepara	structs.c	/^}likepara;$/;"	t	typeref:struct:__anon8	file:
lim	basics.c	/^}lim;$/;"	t	typeref:struct:__anon4	file:
limits	basics.c	/^lim limits = {$/;"	v
line_count	basics.c	/^int line_count(char *filename)$/;"	f
ll	structs.c	/^    char ll[8]; \/* Calculate position-position components *\/$/;"	m	struct:__anon23	file:
lmax	structs.c	/^  double lmax;$/;"	m	struct:__anon8	file:
lmax_kappacmb	structs.c	/^  double lmax_kappacmb;$/;"	m	struct:__anon8	file:
lmax_shear	structs.c	/^  double lmax_shear;$/;"	m	struct:__anon8	file:
lmin	structs.c	/^  double lmin;$/;"	m	struct:__anon8	file:
ln2	basics.c	/^     double ln2; $/;"	m	struct:__anon2	file:
logG	GRS.c	/^double logG(double loga,void * params){$/;"	f
log_L_BAO	external_prior.c	/^double log_L_BAO()$/;"	f
log_L_Planck	external_prior.c	/^double log_L_Planck()$/;"	f
log_L_Planck15_BAO_H070p6_JLA_w0wa	external_prior.c	/^double log_L_Planck15_BAO_H070p6_JLA_w0wa()$/;"	f
log_L_Planck15_BAO_w0wa	external_prior.c	/^double log_L_Planck15_BAO_w0wa()$/;"	f
log_L_Planck_BAO_SN	external_prior.c	/^double log_L_Planck_BAO_SN() \/\/ using the Planck 15 fid values and error bars as described in Aubourg et al 2014$/;"	f
log_L_SN	external_prior.c	/^double log_L_SN()$/;"	f
log_L_SRD_SL_Y10_TOM	external_prior.c	/^double log_L_SRD_SL_Y10_TOM() \/\/ computed from \/Users\/teifler\/Dropbox\/cosmolike_store\/LSSTawakens\/TomSLChains\/SL_LSSTY10.txt$/;"	f
log_L_SRD_SL_Y1_TOM	external_prior.c	/^double log_L_SRD_SL_Y1_TOM() \/\/ computed from \/Users\/teifler\/Dropbox\/cosmolike_store\/LSSTawakens\/TomSLChains\/SL_LSSTY1.txt$/;"	f
log_L_SRD_SN_Y10_RENEE	external_prior.c	/^double log_L_SRD_SN_Y10_RENEE() \/\/ computed from \/Users\/teifler\/Dropbox\/cosmolike_store\/LSSTawakens\/ReneeSNChains\/lsst_y10_jan29_nostarts_varyM_oldomb_rand.txt$/;"	f
log_L_SRD_SN_Y1_RENEE	external_prior.c	/^double log_L_SRD_SN_Y1_RENEE() \/\/ computed from \/Users\/teifler\/Dropbox\/cosmolike_store\/LSSTawakens\/ReneeSNChains\/lsst_y1_jan29_nostarts_varyM_oldomb_rand.txt$/;"	f
log_L_clphotoz	external_prior.c	/^double log_L_clphotoz()$/;"	f
log_L_clusterMobs	external_prior.c	/^double log_L_clusterMobs()$/;"	f
log_L_ia	external_prior.c	/^ double log_L_ia()$/;"	f
log_L_shear_calib	external_prior.c	/^double log_L_shear_calib()$/;"	f
log_L_wlphotoz	external_prior.c	/^double log_L_wlphotoz()$/;"	f
log_like_f_red	external_prior.c	/^double log_like_f_red(){ \/\/use f_red in each tomography bin to constrain LF parameters, assuming 10% uncertainty in f_red measurement; evaluated at bin center to avoid cosmology dependence$/;"	f
log_like_wrapper	like_fourier.c	/^double log_like_wrapper(input_cosmo_params ic, input_nuisance_params in)$/;"	f
log_multi_like	like_fourier.c	/^double log_multi_like(double OMM, double S8, double NS, double W0,double WA, double OMB, double H0, double MGSigma, double MGmu, double B1, double B2, double B3, double B4, double B5, double B6, double B7, double B8, double B9, double B10, double SP1, double SP2, double SP3, double SP4, double SP5, double SP6, double SP7, double SP8, double SP9, double SP10, double SPS1, double CP1, double CP2, double CP3, double CP4, double CP5, double CP6, double CP7, double CP8, double CP9, double CP10, double CPS1, double M1, double M2, double M3, double M4, double M5, double M6, double M7, double M8, double M9, double M10, double A_ia, double beta_ia, double eta_ia, double eta_ia_highz, double LF_alpha, double LF_P, double LF_Q, double LF_red_alpha, double LF_red_P, double LF_red_Q, double mass_obs_norm, double mass_obs_slope, double mass_z_slope, double mass_obs_scatter, double c1, double c2, double c3, double c4)$/;"	f
log_multi_like	like_fourier_HOD.c	/^double log_multi_like(double OMM, double S8, double NS, double W0,double WA, double OMB, double H0,  double HOD_Mc, double HOD_sigmaM,double HOD_M1,double HOD_M0, double HOD_alpha,double HOD_fc, double SP1, double SP2, double SP3, double SP4, double SP5, double SP6, double SP7, double SP8, double SP9, double SP10, double SPS1, double CP1, double CP2, double CP3, double CP4, double CP5, double CP6, double CP7, double CP8, double CP9, double CP10, double CPS1, double M1, double M2, double M3, double M4, double M5, double M6, double M7, double M8, double M9, double M10, double A_ia, double beta_ia, double eta_ia, double eta_ia_highz, double LF_alpha, double LF_P, double LF_Q, double LF_red_alpha, double LF_red_P, double LF_red_Q, double mass_obs_norm, double mass_obs_slope, double mass_z_slope, double mass_obs_scatter, double c1, double c2, double c3, double c4)$/;"	f
long_vector	basics.c	/^long *long_vector(long nl, long nh)$/;"	f
low	basics.c	/^     double low;$/;"	m	struct:__anon3	file:
ls	structs.c	/^    char ls[8]; \/* Calculate shear-position components *\/$/;"	m	struct:__anon23	file:
m_Delta	halo.c	/^double m_Delta(double r, double a){$/;"	f
m_lambda	structs.c	/^    double m_lambda[6];$/;"	m	struct:input_nuisance_params	file:
m_lim	structs.c	/^     double m_lim;$/;"	m	struct:__anon12	file:
magnification_Nbin	structs.c	/^  int magnification_Nbin; \/\/ number of tomography bins$/;"	m	struct:__anon10	file:
magnification_Npowerspectra	structs.c	/^  int magnification_Npowerspectra;\/\/ number of tomography power spectra+2+3+...+Nbin$/;"	m	struct:__anon10	file:
magnification_REDSHIFT_FILE	structs.c	/^  char magnification_REDSHIFT_FILE[200];$/;"	m	struct:__anon11	file:
magnification_histogram_zbins	structs.c	/^  int magnification_histogram_zbins;$/;"	m	struct:__anon11	file:
magnification_photoz	structs.c	/^  int magnification_photoz;$/;"	m	struct:__anon11	file:
magnification_zdistrpar_zmax	structs.c	/^  double magnification_zdistrpar_zmax;$/;"	m	struct:__anon11	file:
magnification_zdistrpar_zmin	structs.c	/^  double magnification_zdistrpar_zmin;$/;"	m	struct:__anon11	file:
magnification_zmax	structs.c	/^  double magnification_zmax[10]; $/;"	m	struct:__anon10	file:
magnification_zmin	structs.c	/^  double magnification_zmin[10];$/;"	m	struct:__anon10	file:
main	compute_covariances_fourier.c	/^int main(int argc, char** argv)$/;"	f
main	compute_covariances_fourier_HOD.c	/^int main(int argc, char** argv)$/;"	f
main	compute_covariances_fourier_HSC.c	/^ int main(int argc, char** argv)$/;"	f
main	examples.c	/^int main(void){$/;"	f
main	like_fourier.c	/^ int main(void)$/;"	f
main	like_fourier_HOD.c	/^ int main(void)$/;"	f
main	tests.c	/^int main(){$/;"	f
mask	init.c	/^double mask(int READ, int ci)$/;"	f
mask	init_basic.c	/^double mask(int READ, int ci)$/;"	f
mass_norm	halo.c	/^double mass_norm(double a)$/;"	f
mass_norm_integrand	halo.c	/^double mass_norm_integrand(double n, void * params)   \/\/ inner integral$/;"	f
massfunc	halo.c	/^double massfunc(double m, double a){$/;"	f
max_g_tomo	redshift.c	/^double max_g_tomo(int zs){$/;"	f
max_g_tomo	redshift_spline.c	/^double max_g_tomo(int zs){$/;"	f
maxarg1	basics.c	/^static double darg __attribute__((unused)),maxarg1 __attribute__((unused)), maxarg2 __attribute__((unused));$/;"	v	file:
maxarg2	basics.c	/^static double darg __attribute__((unused)),maxarg1 __attribute__((unused)), maxarg2 __attribute__((unused));$/;"	v	file:
mc_rm	redmagic.c	/^double mc_rm(double a){$/;"	f
medium	basics.c	/^     double medium;$/;"	m	struct:__anon3	file:
mmean	HOD.c	/^double mmean(int nz,double a){$/;"	f
mmean_rm	redmagic.c	/^double mmean_rm(double a){$/;"	f
model	structs.c	/^  char model[256];$/;"	m	struct:__anon16	file:
model_para_redmagic	structs.c	/^} model_para_redmagic;$/;"	t	typeref:struct:__anon15	file:
mu	GRS.c	/^   double* mu;$/;"	m	struct:__anon6	file:
mu	structs.c	/^   double* mu;$/;"	m	struct:__anon24	file:
n0	structs.c	/^  double n0;$/;"	m	struct:__anon15	file:
n_N200	cluster.c	/^double n_N200 (int nz, int nN){$/;"	f
n_N200	clusters_DES.c	/^double n_N200 (int nz, int nN){$/;"	f
n_all_LF	IA.c	/^double n_all_LF(double mag, double a){$/;"	f
n_c	HOD.c	/^double n_c(double mh, double a, int nz){$/;"	f
n_c_Reddick	redmagic.c	/^double n_c_Reddick(double mh){$/;"	f
n_c_rm	redmagic.c	/^double n_c_rm(double mh){$/;"	f
n_c_tab	redmagic.c	/^double n_c_tab(double mh){$/;"	f
n_g	GRS.c	/^  double n_g[10]; \/\/ in (h\/Mpc)^3$/;"	m	struct:__anon7	file:
n_gal	structs.c	/^     double n_gal;\/* galaxy density per arcmin^2 *\/$/;"	m	struct:__anon12	file:
n_gal_conversion_factor	structs.c	/^     double n_gal_conversion_factor; \/*factor from n_gal\/arcmin^2 to n_gal\/radian^2: 1.0\/constants.arcmin\/constants.arcmin *\/$/;"	m	struct:__anon12	file:
n_lens	structs.c	/^     double n_lens;\/* lens galaxy density per arcmin^2 *\/$/;"	m	struct:__anon12	file:
n_lens	structs.c	/^  double n_lens[10];$/;"	m	struct:__anon10	file:
n_mt	structs.c	/^   double n_mt[10][2]; \/\/ in (h\/Mpc)^3$/;"	m	struct:__anon24	file:
n_of_z	redshift_spline.c	/^double n_of_z(double z, int nz){$/;"	f
n_s	HOD.c	/^double n_s(double mh, double a, int nz){$/;"	f
n_s	structs.c	/^    double n_s;$/;"	m	struct:input_cosmo_params	file:
n_s	structs.c	/^    double n_s;$/;"	m	struct:input_cosmo_params_mpp	file:
n_s_Reddick	redmagic.c	/^double n_s_Reddick(double mh){$/;"	f
n_s_cmv	halo.c	/^double n_s_cmv (double a){$/;"	f
n_s_rm	redmagic.c	/^double n_s_rm(double mh){$/;"	f
n_s_tab	redmagic.c	/^double n_s_tab(double mh){$/;"	f
n_source	structs.c	/^  double n_source[10];$/;"	m	struct:__anon10	file:
n_spec	structs.c	/^     double n_spec;   \/* spectral index of initial power spectrum       *\/$/;"	m	struct:__anon9	file:
name	structs.c	/^     char name[500];        $/;"	m	struct:__anon12	file:
name	structs.c	/^   char name[500];$/;"	m	struct:__anon13	file:
ng	structs.c	/^    int ng;\/* ng covariance? *\/$/;"	m	struct:__anon23	file:
ngal	HOD.c	/^double ngal(int nz,double a){$/;"	f
ngal_rm	redmagic.c	/^double ngal_rm(double a){$/;"	f
ni	basics.c	/^     int ni ;$/;"	m	struct:cos	file:
nj	basics.c	/^     int nj ;$/;"	m	struct:cos	file:
nlens	redshift.c	/^double nlens(int j) \/\/returns n_gal for clustering tomography bin j, works only with binned distributions; j =-1 -> no tomography; j>= 0 -> tomography bin j$/;"	f
nlens	redshift_spline.c	/^double nlens(int j) \/\/returns n_gal for clustering tomography bin j, works only with binned distributions; j =-1 -> no tomography; j>= 0 -> tomography bin j$/;"	f
nonlin_scale	cosmo3D.c	/^void nonlin_scale(double amp, double *R_NL, double *neff, double *Curv)$/;"	f
nonlinear_scale_computation	cosmo3D.c	/^double nonlinear_scale_computation(double a)$/;"	f
norm_z_cluster	cluster.c	/^double norm_z_cluster(int nz){$/;"	f
norm_z_cluster	clusters_DES.c	/^double norm_z_cluster(int nz){$/;"	f
normalization	EBfunctions.c	/^void normalization(int vartheta_max,int vt_min,double *store)$/;"	f
normalization	coefficients.c	/^void normalization(int vartheta_max,int vt_min,double *store)$/;"	f
ns_max_emu	cosmo3D.c	25;"	d	file:
ns_min_emu	cosmo3D.c	26;"	d	file:
nsource	redshift.c	/^double nsource(int j) \/\/returns n_gal for shear tomography bin j, works only with binned distributions; j =-1 -> no tomography; j>= 0 -> tomography bin j$/;"	f
nsource	redshift_spline.c	/^double nsource(int j) \/\/returns n_gal for shear tomography bin j, works only with binned distributions; j =-1 -> no tomography; j>= 0 -> tomography bin j$/;"	f
ntheta	structs.c	/^    int ntheta;\/* number of theta bins *\/$/;"	m	struct:__anon23	file:
nu	halo.c	/^double nu(double m, double a){$/;"	f
nuisance	structs.c	/^nuisancepara nuisance ={.c1rhocrit_ia = 0.0134,$/;"	v
nuisancepara	structs.c	/^nuisancepara;$/;"	t	typeref:struct:__anon20	file:
nulogm_a1	halo.c	/^double nulogm_a1(double lgm,void * params)$/;"	f
number_of_cluster_bins	init_LSST_SRD.c	/^double number_of_cluster_bins(){$/;"	f
omb	structs.c	/^     double omb; \/\/Omega baryon$/;"	m	struct:__anon9	file:
ombhh_max_emu	cosmo3D.c	19;"	d	file:
ombhh_min_emu	cosmo3D.c	20;"	d	file:
omega_a	cosmo3D.c	/^void omega_a(double aa,double *om_m,double *om_v)$/;"	f
omega_b	structs.c	/^    double omega_b;$/;"	m	struct:input_cosmo_params	file:
omega_b	structs.c	/^    double omega_b;$/;"	m	struct:input_cosmo_params_mpp	file:
omega_m	structs.c	/^    double omega_m;$/;"	m	struct:input_cosmo_params	file:
omega_m	structs.c	/^    double omega_m;$/;"	m	struct:input_cosmo_params_mpp	file:
omega_nuh2	structs.c	/^    double omega_nuh2;$/;"	m	struct:input_cosmo_params_mpp	file:
omhh_max_emu	cosmo3D.c	17;"	d	file:
omhh_min_emu	cosmo3D.c	18;"	d	file:
omv_vareos	cosmo3D.c	/^double omv_vareos(double a)$/;"	f
oneplusz0_ia	structs.c	/^  double oneplusz0_ia; \/\/oneplusz0-ia MegaZ$/;"	m	struct:__anon20	file:
onuhh_max_emu	cosmo3D.c	31;"	d	file:
onuhh_min_emu	cosmo3D.c	32;"	d	file:
outdir	structs.c	/^    char outdir[200]; \/* output directory *\/$/;"	m	struct:__anon23	file:
p_1h	halo.c	/^double p_1h(double k, double a)$/;"	f
p_2h	halo.c	/^double p_2h(double k, double a)$/;"	f
p_class	cosmo3D.c	/^double p_class(double k_coverh0,double a, int NL, int *status){$/;"	f
p_lin	cosmo3D.c	/^double p_lin(double k,double a)$/;"	f
parameterization	structs.c	/^  int parameterization; \/\/Zehavi, Reddick, histo$/;"	m	struct:__anon15	file:
path	structs.c	/^  char path[200];$/;"	m	struct:__anon19	file:
pathLensRecNoise	structs.c	/^   char * pathLensRecNoise;   \/\/ path to precomputed noise on reconstructed kappa$/;"	m	struct:__anon13	file:
pdeltapara	structs.c	/^}pdeltapara;$/;"	t	typeref:struct:__anon17	file:
pdeltaparams	structs.c	/^pdeltapara pdeltaparams = {.runmode = "Halofit", .DIFF_n = 0., .DIFF_A = 0.};$/;"	v
pf_histo	redshift.c	/^double pf_histo(double z, void *params) \/\/return pf(z) based on redshift file with one redshift distribution$/;"	f
pf_histo	redshift_spline.c	/^double pf_histo(double z, void *params) \/\/return pf(z) based on redshift file with one redshift distribution$/;"	f
pf_histo_n	redshift.c	/^double pf_histo_n(double z,  void *params) \/\/return pf(z,j) based on redshift file with structure z[i] nz[0][i] .. nz[tomo.clustering_Nbin-1][i]$/;"	f
pf_histo_n	redshift_spline.c	/^double pf_histo_n(double z,  void *params) \/\/return pf(z,j) based on redshift file with structure z[i] nz[0][i] .. nz[tomo.clustering_Nbin-1][i]$/;"	f
pf_photoz	redshift.c	/^double pf_photoz(double zz,int j) \/\/returns n(ztrue, j), works only with binned distributions; j =-1 -> no tomography; j>= 0 -> tomography bin j$/;"	f
pf_photoz	redshift_spline.c	/^double pf_photoz(double zz,int j) \/\/returns n(ztrue, j), works only with binned distributions; j =-1 -> no tomography; j>= 0 -> tomography bin j$/;"	f
pi	basics.c	/^     double pi; $/;"	m	struct:__anon2	file:
pi_sqr	basics.c	/^     double pi_sqr; $/;"	m	struct:__anon2	file:
pos_pos	structs.c	/^  int pos_pos;$/;"	m	struct:__anon8	file:
pow4arg	basics.c	/^static double pow4arg;$/;"	v	file:
pre	basics.c	/^}pre;$/;"	t	typeref:struct:__anon3	file:
precision	basics.c	/^pre precision= {$/;"	v
print_zdistr	examples.c	/^void print_zdistr(){$/;"	f
prior	structs.c	/^priorpara prior = {.shear_calibration_m = {{0.,0.},{0.,0.},{0.,0.},{0.,0.},{0.,0.},{0.,0.},{0.,0.},{0.,0.},{0.,0.},{0.,0.}},$/;"	v
priorpara	structs.c	/^}priorpara;$/;"	t	typeref:struct:__anon21	file:
probability_observed_richness_given_mass	clusters_DES.c	/^double probability_observed_richness_given_mass(const double observed_lambda) {$/;"	f
probability_observed_richness_given_mass_integrand	clusters_DES.c	/^double probability_observed_richness_given_mass_integrand(const double $/;"	f
probability_observed_richness_given_true_richness	clusters_DES.c	/^probability_observed_richness_given_true_richness(const double observed_lambda, $/;"	f
probability_true_richness_given_mass	clusters_DES.c	/^double probability_true_richness_given_mass(const double true_lambda, $/;"	f
probes	structs.c	/^  char probes[500];$/;"	m	struct:__anon8	file:
project_cov_cgl_N	covariances_cluster.c	/^double project_cov_cgl_N(double a,void *params)$/;"	f
project_cov_cl_N	covariances_cluster.c	/^double project_cov_cl_N(double a,void *params)$/;"	f
project_cov_cl_N_HOD	covariances_fourier_HOD.c	/^double project_cov_cl_N_HOD(double a,void *params)$/;"	f
project_cov_ggl_N	covariances_cluster.c	/^double project_cov_ggl_N(double a,void *params)$/;"	f
project_cov_ggl_N_HOD	covariances_fourier_HOD.c	/^double project_cov_ggl_N_HOD(double a,void *params)$/;"	f
project_cov_shear_N	covariances_cluster.c	/^double project_cov_shear_N(double a,void *params)$/;"	f
project_tri_1h_cov_shear_shear_tomo	covariances_wl.c	/^double project_tri_1h_cov_shear_shear_tomo(double l1,double l2, int z1, int z2, int z3, int z4){$/;"	f
project_tri_2h_cov_shear_shear_tomo	covariances_wl.c	/^double project_tri_2h_cov_shear_shear_tomo(double l1,double l2, int z1, int z2, int z3, int z4){$/;"	f
project_tri_cgl_cgl	covariances_cluster.c	/^double project_tri_cgl_cgl(double a,void *params)$/;"	f
project_tri_cl_cgl	covariances_cluster.c	/^double project_tri_cl_cgl(double a,void *params)$/;"	f
project_tri_cl_cgl_HOD	covariances_fourier_HOD.c	/^double project_tri_cl_cgl_HOD(double a,void *params)$/;"	f
project_tri_ggl_cgl	covariances_cluster.c	/^double project_tri_ggl_cgl(double a,void *params)$/;"	f
project_tri_ggl_cgl_HOD	covariances_fourier_HOD.c	/^double project_tri_ggl_cgl_HOD(double a,void *params)$/;"	f
project_tri_lin_cov_shear_shear_tomo	covariances_wl.c	/^double project_tri_lin_cov_shear_shear_tomo(double l1,double l2, int z1, int z2, int z3, int z4){$/;"	f
project_tri_shear_cgl	covariances_cluster.c	/^double project_tri_shear_cgl(double a,void *params)$/;"	f
r_Delta	halo.c	/^double r_Delta(double m, double a) \/\/calculate r_Delta in c\/H0 given m in (solar masses\/h)$/;"	f
r_s	halo.c	/^double r_s(double m, double a)$/;"	f
radius	halo.c	/^double radius(double m)$/;"	f
rcorr	structs.c	/^  double rcorr[10];$/;"	m	struct:__anon14	file:
recompute_DESclusters	recompute.c	/^int recompute_DESclusters(cosmopara C, nuisancepara N){$/;"	f
recompute_Delta	recompute.c	/^int recompute_Delta(cosmopara C){ \/\/rules for recomputing early time power spectrum Delta_L$/;"	f
recompute_IA	recompute.c	/^int recompute_IA(nuisancepara N){$/;"	f
recompute_clustering	recompute.c	/^int recompute_clustering(cosmopara C, galpara G, nuisancepara N, int i, int j){$/;"	f
recompute_clusters	recompute.c	/^int recompute_clusters(cosmopara C, nuisancepara N){$/;"	f
recompute_cosmo3D	recompute.c	/^int recompute_cosmo3D(cosmopara C){$/;"	f
recompute_expansion	recompute.c	/^int recompute_expansion(cosmopara C){ \/\/rules for recomputing growth factor & comoving distance$/;"	f
recompute_galaxies	recompute.c	/^int recompute_galaxies(galpara G, int i){$/;"	f
recompute_ggl	recompute.c	/^int recompute_ggl(cosmopara C, galpara G, nuisancepara N, int i){$/;"	f
recompute_ii	recompute.c	/^int recompute_ii(cosmopara C, nuisancepara N){$/;"	f
recompute_shear	recompute.c	/^int recompute_shear(cosmopara C, nuisancepara N){$/;"	f
recompute_zphot_clustering	recompute.c	/^int recompute_zphot_clustering(nuisancepara N){$/;"	f
recompute_zphot_magnification	recompute.c	/^int recompute_zphot_magnification(nuisancepara N){$/;"	f
recompute_zphot_shear	recompute.c	/^int recompute_zphot_shear(nuisancepara N){$/;"	f
redm	structs.c	/^model_para_redmagic redm;$/;"	v
redshift	structs.c	/^redshiftpara redshift;$/;"	v
redshiftpara	structs.c	/^}redshiftpara;$/;"	t	typeref:struct:__anon11	file:
relax_shear_priors	external_prior.c	/^void relax_shear_priors()$/;"	f
reset_cov_tables	structs.c	/^  int reset_cov_tables;$/;"	m	struct:__anon18	file:
rglob	structs.c	/^  double rglob;$/;"	m	struct:__anon18	file:
rho_Delta	halo.c	/^double rho_Delta(double a) \/\/virial density in solar masses\/h\/(H0\/c)^3$/;"	f
rho_crit	structs.c	/^     double rho_crit;      \/* = 3 H_0^2\/(8 pi G), critical comoving density *\/$/;"	m	struct:__anon9	file:
roots	EBfunctions.c	/^void roots(int vartheta_max,int vt_min,double store[20][21])$/;"	f
roots	coefficients.c	/^void roots(int vartheta_max,int vt_min,double store[20][21])$/;"	f
run_class	cosmo3D.c	/^int run_class($/;"	f
run_cov_N_N	compute_covariances_fourier.c	/^void run_cov_N_N (char *OUTFILE, char *PATH, int nzc1, int nzc2,int start)$/;"	f
run_cov_N_N	compute_covariances_fourier_HSC.c	/^void run_cov_N_N (char *OUTFILE, char *PATH, int nzc1, int nzc2,int start)$/;"	f
run_cov_cgl_N	compute_covariances_fourier.c	/^void run_cov_cgl_N (char *OUTFILE, char *PATH, double *ell_Cluster, double *dell_Cluster,int N1, int nzc2, int start)$/;"	f
run_cov_cgl_N	compute_covariances_fourier_HSC.c	/^void run_cov_cgl_N (char *OUTFILE, char *PATH, double *ell_Cluster, double *dell_Cluster,int N1, int nzc2, int start)$/;"	f
run_cov_cgl_cgl	compute_covariances_fourier.c	/^void run_cov_cgl_cgl (char *OUTFILE, char *PATH, double *ell_Cluster, double *dell_Cluster,int N1, int N2, int start)$/;"	f
run_cov_cgl_cgl	compute_covariances_fourier_HSC.c	/^void run_cov_cgl_cgl (char *OUTFILE, char *PATH, double *ell_Cluster, double *dell_Cluster,int N1, int N2, int start)$/;"	f
run_cov_cgl_cgl_all	compute_covariances_fourier.c	/^void run_cov_cgl_cgl_all (char *OUTFILE, char *PATH, double *ell_Cluster, double *dell_Cluster)$/;"	f
run_cov_cgl_cgl_all	compute_covariances_fourier_HSC.c	/^void run_cov_cgl_cgl_all (char *OUTFILE, char *PATH, double *ell_Cluster, double *dell_Cluster)$/;"	f
run_cov_cl_N	compute_covariances_fourier.c	/^void run_cov_cl_N (char *OUTFILE, char *PATH, double *ell, double *dell,int N1, int nzc2, int start)$/;"	f
run_cov_cl_N	compute_covariances_fourier_HSC.c	/^void run_cov_cl_N (char *OUTFILE, char *PATH, double *ell, double *dell,int N1, int nzc2, int start)$/;"	f
run_cov_cl_N_HOD	compute_covariances_fourier_HOD.c	/^void run_cov_cl_N_HOD (char *OUTFILE, char *PATH, double *ell, double *dell,int N1, int nzc2, int start)$/;"	f
run_cov_cl_cgl	compute_covariances_fourier.c	/^void run_cov_cl_cgl (char *OUTFILE, char *PATH, double *ell, double *dell, double *ell_Cluster, double *dell_Cluster,int N1, int N2, int nl1, int start)$/;"	f
run_cov_cl_cgl	compute_covariances_fourier_HSC.c	/^void run_cov_cl_cgl (char *OUTFILE, char *PATH, double *ell, double *dell, double *ell_Cluster, double *dell_Cluster,int N1, int N2, int nl1, int start)$/;"	f
run_cov_cl_cgl_HOD	compute_covariances_fourier_HOD.c	/^void run_cov_cl_cgl_HOD (char *OUTFILE, char *PATH, double *ell, double *dell, double *ell_Cluster, double *dell_Cluster,int N1, int N2, int nl1, int start)$/;"	f
run_cov_clustering	compute_covariances_fourier.c	/^void run_cov_clustering(char *OUTFILE, char *PATH, double *ell, double *dell, int n1, int n2,int start)$/;"	f
run_cov_clustering	compute_covariances_fourier_HSC.c	/^void run_cov_clustering(char *OUTFILE, char *PATH, double *ell, double *dell, int n1, int n2,int start)$/;"	f
run_cov_clustering_HOD	compute_covariances_fourier_HOD.c	/^void run_cov_clustering_HOD(char *OUTFILE, char *PATH, double *ell, double *dell, int n1, int n2,int start)$/;"	f
run_cov_clustering_ggl	compute_covariances_fourier.c	/^void run_cov_clustering_ggl(char *OUTFILE, char *PATH, double *ell, double *dell, int n1, int n2,int start)$/;"	f
run_cov_clustering_ggl	compute_covariances_fourier_HSC.c	/^void run_cov_clustering_ggl(char *OUTFILE, char *PATH, double *ell, double *dell, int n1, int n2,int start)$/;"	f
run_cov_clustering_ggl_HOD	compute_covariances_fourier_HOD.c	/^void run_cov_clustering_ggl_HOD(char *OUTFILE, char *PATH, double *ell, double *dell, int n1, int n2,int start)$/;"	f
run_cov_clustering_ggl_real	run_covariances_real.c	/^void run_cov_clustering_ggl_real(char *OUTFILE, char *PATH, double *theta, double *dtheta,int Ntheta, int n1, int n2, int start)$/;"	f
run_cov_clustering_ggl_real_bin	run_covariances_real.c	/^void run_cov_clustering_ggl_real_bin(char *OUTFILE, char *PATH, double *theta, int Ntheta, int n1, int n2, int start)$/;"	f
run_cov_clustering_real	run_covariances_real.c	/^void run_cov_clustering_real(char *OUTFILE, char *PATH, double *theta, double *dtheta,int Ntheta, int n1, int n2, int start)$/;"	f
run_cov_clustering_real_bin	run_covariances_real.c	/^void run_cov_clustering_real_bin(char *OUTFILE, char *PATH, double *theta, int Ntheta, int n1, int n2, int start)$/;"	f
run_cov_clustering_shear	compute_covariances_fourier.c	/^void run_cov_clustering_shear(char *OUTFILE, char *PATH, double *ell, double *dell, int n1, int n2,int start)$/;"	f
run_cov_clustering_shear	compute_covariances_fourier_HSC.c	/^void run_cov_clustering_shear(char *OUTFILE, char *PATH, double *ell, double *dell, int n1, int n2,int start)$/;"	f
run_cov_clustering_shear_HOD	compute_covariances_fourier_HOD.c	/^void run_cov_clustering_shear_HOD(char *OUTFILE, char *PATH, double *ell, double *dell, int n1, int n2,int start)$/;"	f
run_cov_clustering_shear_real	run_covariances_real.c	/^void run_cov_clustering_shear_real(char *OUTFILE, char *PATH, double *theta, double *dtheta,int Ntheta, int n1, int n2, int pm, int start)$/;"	f
run_cov_clustering_shear_real_bin	run_covariances_real.c	/^void run_cov_clustering_shear_real_bin(char *OUTFILE, char *PATH, double *theta, int Ntheta, int n1, int n2, int pm, int start)$/;"	f
run_cov_ggl	compute_covariances_fourier.c	/^void run_cov_ggl(char *OUTFILE, char *PATH, double *ell, double *dell, int n1, int n2,int start)$/;"	f
run_cov_ggl	compute_covariances_fourier_HSC.c	/^void run_cov_ggl(char *OUTFILE, char *PATH, double *ell, double *dell, int n1, int n2,int start)$/;"	f
run_cov_ggl_HOD	compute_covariances_fourier_HOD.c	/^void run_cov_ggl_HOD(char *OUTFILE, char *PATH, double *ell, double *dell, int n1, int n2,int start)$/;"	f
run_cov_ggl_N	compute_covariances_fourier.c	/^void run_cov_ggl_N (char *OUTFILE, char *PATH, double *ell, double *dell, int N1, int nzc2, int start)$/;"	f
run_cov_ggl_N	compute_covariances_fourier_HSC.c	/^void run_cov_ggl_N (char *OUTFILE, char *PATH, double *ell, double *dell, int N1, int nzc2, int start)$/;"	f
run_cov_ggl_N_HOD	compute_covariances_fourier_HOD.c	/^void run_cov_ggl_N_HOD (char *OUTFILE, char *PATH, double *ell, double *dell, int N1, int nzc2, int start)$/;"	f
run_cov_ggl_cgl	compute_covariances_fourier.c	/^void run_cov_ggl_cgl (char *OUTFILE, char *PATH, double *ell, double *dell, double *ell_Cluster, double *dell_Cluster,int N1, int N2, int nl1, int start)$/;"	f
run_cov_ggl_cgl	compute_covariances_fourier_HSC.c	/^void run_cov_ggl_cgl (char *OUTFILE, char *PATH, double *ell, double *dell, double *ell_Cluster, double *dell_Cluster,int N1, int N2, int nl1, int start)$/;"	f
run_cov_ggl_cgl_HOD	compute_covariances_fourier_HOD.c	/^void run_cov_ggl_cgl_HOD (char *OUTFILE, char *PATH, double *ell, double *dell, double *ell_Cluster, double *dell_Cluster,int N1, int N2, int nl1, int start)$/;"	f
run_cov_ggl_real	run_covariances_real.c	/^void run_cov_ggl_real(char *OUTFILE, char *PATH, double *theta, double *dtheta,int Ntheta, int n1, int n2, int start)$/;"	f
run_cov_ggl_real_bin	run_covariances_real.c	/^void run_cov_ggl_real_bin(char *OUTFILE, char *PATH, double *theta,int Ntheta, int n1, int n2, int start)$/;"	f
run_cov_ggl_shear	compute_covariances_fourier.c	/^void run_cov_ggl_shear(char *OUTFILE, char *PATH, double *ell, double *dell, int n1, int n2,int start)$/;"	f
run_cov_ggl_shear	compute_covariances_fourier_HSC.c	/^void run_cov_ggl_shear(char *OUTFILE, char *PATH, double *ell, double *dell, int n1, int n2,int start)$/;"	f
run_cov_ggl_shear_HOD	compute_covariances_fourier_HOD.c	/^void run_cov_ggl_shear_HOD(char *OUTFILE, char *PATH, double *ell, double *dell, int n1, int n2,int start)$/;"	f
run_cov_ggl_shear_real	run_covariances_real.c	/^void run_cov_ggl_shear_real(char *OUTFILE, char *PATH, double *theta, double *dtheta, int Ntheta, int n1, int n2, int pm, int start)$/;"	f
run_cov_ggl_shear_real_bin	run_covariances_real.c	/^void run_cov_ggl_shear_real_bin(char *OUTFILE, char *PATH, double *theta, int Ntheta, int n1, int n2, int pm, int start)$/;"	f
run_cov_shear_N	compute_covariances_fourier.c	/^void run_cov_shear_N (char *OUTFILE, char *PATH, double *ell, double *dell, int N1, int nzc2, int start)$/;"	f
run_cov_shear_N	compute_covariances_fourier_HSC.c	/^void run_cov_shear_N (char *OUTFILE, char *PATH, double *ell, double *dell, int N1, int nzc2, int start)$/;"	f
run_cov_shear_cgl	compute_covariances_fourier.c	/^void run_cov_shear_cgl (char *OUTFILE, char *PATH, double *ell, double *dell, double *ell_Cluster, double *dell_Cluster,int N1, int N2, int nl1, int start)$/;"	f
run_cov_shear_cgl	compute_covariances_fourier_HSC.c	/^void run_cov_shear_cgl (char *OUTFILE, char *PATH, double *ell, double *dell, double *ell_Cluster, double *dell_Cluster,int N1, int N2, int nl1, int start)$/;"	f
run_cov_shear_shear	compute_covariances_fourier.c	/^void run_cov_shear_shear(char *OUTFILE, char *PATH, double *ell, double *dell,int n1, int n2,int start)$/;"	f
run_cov_shear_shear	compute_covariances_fourier_HSC.c	/^void run_cov_shear_shear(char *OUTFILE, char *PATH, double *ell, double *dell,int n1, int n2,int start)$/;"	f
run_cov_shear_shear_real	run_covariances_real.c	/^void run_cov_shear_shear_real(char *OUTFILE, char *PATH, double *theta, double *dtheta, int Ntheta, int n1, int n2, int pm1, int pm2, int start)$/;"	f
run_cov_shear_shear_real_bin	run_covariances_real.c	/^void run_cov_shear_shear_real_bin(char *OUTFILE, char *PATH,double *theta, int Ntheta, int n1, int n2, int pm1, int pm2, int start)$/;"	f
runmode	structs.c	/^  char runmode[300];$/;"	m	struct:__anon17	file:
s8_max_emu	cosmo3D.c	21;"	d	file:
s8_min_emu	cosmo3D.c	22;"	d	file:
scatter_lgM_obs	cluster.c	/^double scatter_lgM_obs(double N200, double a){$/;"	f
scatter_lgM_obs	clusters_DES.c	/^double scatter_lgM_obs(double N200, double a){$/;"	f
sensitivity	structs.c	/^   double sensitivity;  \/\/ white noise level in muK*rad$/;"	m	struct:__anon13	file:
set_HOD	HOD.c	/^void set_HOD(int n){ \/\/n >=0: set HOD parameters in redshift bin n; n = -1: unset HOD parameters (code then uses linear bias + non-linear matter power spectrum instead of halo model)$/;"	f
set_HOD_redmagic	parameters.c	/^void set_HOD_redmagic()$/;"	f
set_HOD_redmagic_priors	external_prior.c	/^void set_HOD_redmagic_priors()$/;"	f
set_HOD_rm	like_fourier_HOD.c	/^int set_HOD_rm(double HOD_Mc, double HOD_sigmaM, double HOD_M1, double HOD_M0, double HOD_alpha, double HOD_fc, double HOD_cg){$/;"	f
set_LF_DEEP2	IA.c	/^void set_LF_DEEP2(void){$/;"	f
set_LF_GAMA	IA.c	/^void set_LF_GAMA(void){$/;"	f
set_b1_priors_mpp	priors_mpp.c	/^void set_b1_priors_mpp(double b1_min, double b1_max)$/;"	f
set_b2_priors_mpp	priors_mpp.c	/^void set_b2_priors_mpp(double b2_min, double b2_max)$/;"	f
set_baryon_priors	external_prior.c	/^void set_baryon_priors()$/;"	f
set_clphotoz_priors_LSST_SRD	external_prior.c	/^void set_clphotoz_priors_LSST_SRD()$/;"	f
set_clphotoz_priors_LSST_gold	external_prior.c	/^void set_clphotoz_priors_LSST_gold()$/;"	f
set_clphotoz_priors_benchmark	external_prior.c	/^void set_clphotoz_priors_benchmark()$/;"	f
set_clphotoz_priors_cmass	external_prior.c	/^void set_clphotoz_priors_cmass()$/;"	f
set_clphotoz_priors_mpp	priors_mpp.c	/^void set_clphotoz_priors_mpp(double *bias_photoz_l,double *sigma_b_photoz_l){$/;"	f
set_clphotoz_priors_redmagic	external_prior.c	/^void set_clphotoz_priors_redmagic()$/;"	f
set_clphotoz_priors_source	external_prior.c	/^void set_clphotoz_priors_source()$/;"	f
set_clusterMobs_priors	external_prior.c	/^void set_clusterMobs_priors()$/;"	f
set_clusters_DES	init.c	/^void set_clusters_DES(){$/;"	f
set_clusters_DES	init_basic.c	/^void set_clusters_DES(){$/;"	f
set_clusters_LSST	init.c	/^void set_clusters_LSST(){$/;"	f
set_clusters_LSST	init_basic.c	/^void set_clusters_LSST(){$/;"	f
set_cmb_actpol	init.c	/^void set_cmb_actpol() {$/;"	f
set_cmb_actpol	init_basic.c	/^void set_cmb_actpol() {$/;"	f
set_cmb_advact	init.c	/^void set_cmb_advact() {$/;"	f
set_cmb_advact	init_basic.c	/^void set_cmb_advact() {$/;"	f
set_cmb_cmbs4	init.c	/^void set_cmb_cmbs4() {$/;"	f
set_cmb_cmbs4	init_basic.c	/^void set_cmb_cmbs4() {$/;"	f
set_cosmological_parameters_to_	parameters.c	/^void set_cosmological_parameters_to_(char *cosmofile, int output)$/;"	f
set_cosmological_parameters_to_BCC	parameters.c	/^void set_cosmological_parameters_to_BCC()$/;"	f
set_cosmological_parameters_to_CFHTLens_cov	parameters.c	/^void set_cosmological_parameters_to_CFHTLens_cov()$/;"	f
set_cosmological_parameters_to_Coyote	parameters.c	/^void set_cosmological_parameters_to_Coyote()$/;"	f
set_cosmological_parameters_to_Joe	parameters.c	/^void set_cosmological_parameters_to_Joe()$/;"	f
set_cosmological_parameters_to_MICE	parameters.c	/^void set_cosmological_parameters_to_MICE()$/;"	f
set_cosmological_parameters_to_MILLENIUM	parameters.c	/^void set_cosmological_parameters_to_MILLENIUM()$/;"	f
set_cosmological_parameters_to_OWLS	parameters.c	/^void set_cosmological_parameters_to_OWLS()$/;"	f
set_cosmological_parameters_to_Planck_15_TT_TE_EE_lowP	parameters.c	/^void set_cosmological_parameters_to_Planck_15_TT_TE_EE_lowP()$/;"	f
set_cosmological_parameters_to_Planck_WP	parameters.c	/^void set_cosmological_parameters_to_Planck_WP()$/;"	f
set_cosmological_parameters_to_SATO	parameters.c	/^void set_cosmological_parameters_to_SATO()$/;"	f
set_cosmological_parameters_to_WMAP_7years_BAO_SN	parameters.c	/^void set_cosmological_parameters_to_WMAP_7years_BAO_SN()$/;"	f
set_cosmological_parameters_to_chincilla	parameters.c	/^void set_cosmological_parameters_to_chincilla()$/;"	f
set_cosmology_params	like_fourier.c	/^int set_cosmology_params(double OMM, double S8, double NS, double W0,double WA, double OMB, double H0)$/;"	f
set_cosmology_params	like_fourier_HOD.c	/^int set_cosmology_params(double OMM, double S8, double NS, double W0,double WA, double OMB, double H0)$/;"	f
set_cov_parameters_to_	parameters.c	/^void set_cov_parameters_to_(char *covparamfile, int output)$/;"	f
set_data_cgl	like_fourier.c	/^void set_data_cgl(double *ell_Cluster, double *data, int start)$/;"	f
set_data_cgl	like_fourier_HOD.c	/^void set_data_cgl(double *ell_Cluster, double *data, int start)$/;"	f
set_data_cluster_N	like_fourier.c	/^void set_data_cluster_N(double *data, int start){$/;"	f
set_data_cluster_N	like_fourier_HOD.c	/^void set_data_cluster_N(double *data, int start){$/;"	f
set_data_clustering	like_fourier.c	/^void set_data_clustering(int Ncl, double *ell, double *data, int start){$/;"	f
set_data_clustering_HOD	like_fourier_HOD.c	/^void set_data_clustering_HOD(int Ncl, double *ell, double *data, int start){$/;"	f
set_data_ggl	like_fourier.c	/^void set_data_ggl(int Ncl, double *ell, double *data, int start)$/;"	f
set_data_ggl_HOD	like_fourier_HOD.c	/^void set_data_ggl_HOD(int Ncl, double *ell, double *data, int start)$/;"	f
set_data_shear	like_fourier.c	/^void set_data_shear(int Ncl, double *ell, double *data, int start)$/;"	f
set_data_shear	like_fourier_HOD.c	/^void set_data_shear(int Ncl, double *ell, double *data, int start)$/;"	f
set_equal_tomo_bins	init.c	/^void set_equal_tomo_bins()$/;"	f
set_equal_tomo_bins	init_LSST_SRD.c	/^void set_equal_tomo_bins()$/;"	f
set_equal_tomo_bins	init_basic.c	/^void set_equal_tomo_bins()$/;"	f
set_galaxies_CMASS	init.c	/^void set_galaxies_CMASS(double density)$/;"	f
set_galaxies_CMASS	init_basic.c	/^void set_galaxies_CMASS(double density)$/;"	f
set_galaxies_DES	init.c	/^void set_galaxies_DES(double density)$/;"	f
set_galaxies_DES	init_basic.c	/^void set_galaxies_DES(double density)$/;"	f
set_galaxies_DES_SV	init.c	/^void set_galaxies_DES_SV(double density)$/;"	f
set_galaxies_DES_SV	init_basic.c	/^void set_galaxies_DES_SV(double density)$/;"	f
set_galaxies_DES_Y1	init.c	/^void set_galaxies_DES_Y1(void)$/;"	f
set_galaxies_DES_Y1	init_basic.c	/^void set_galaxies_DES_Y1(void)$/;"	f
set_galaxies_LSST	init.c	/^void set_galaxies_LSST(double density)$/;"	f
set_galaxies_LSST	init_basic.c	/^void set_galaxies_LSST(double density)$/;"	f
set_galaxies_LSST_gold	init.c	/^void set_galaxies_LSST_gold(double density)$/;"	f
set_galaxies_LSST_gold	init_basic.c	/^void set_galaxies_LSST_gold(double density)$/;"	f
set_galaxies_LSST_like	init_basic.c	/^void set_galaxies_LSST_like(double density)$/;"	f
set_galaxies_benchmark_DES	init.c	/^void set_galaxies_benchmark_DES()$/;"	f
set_galaxies_benchmark_DES	init_basic.c	/^void set_galaxies_benchmark_DES()$/;"	f
set_galaxies_benchmark_LSST	init.c	/^void set_galaxies_benchmark_LSST()$/;"	f
set_galaxies_benchmark_LSST	init_basic.c	/^void set_galaxies_benchmark_LSST()$/;"	f
set_galaxies_source	init.c	/^void set_galaxies_source(void)$/;"	f
set_galaxies_source	init_basic.c	/^void set_galaxies_source(void)$/;"	f
set_ia_priors	external_prior.c	/^void set_ia_priors()$/;"	f
set_ia_priors_mpp	priors_mpp.c	/^void set_ia_priors_mpp(double A_min, double A_max)$/;"	f
set_lin_bias_priors	external_prior.c	/^void set_lin_bias_priors()$/;"	f
set_nuisance_cluster_Mobs	like_fourier.c	/^int set_nuisance_cluster_Mobs(double mass_obs_norm, double mass_obs_slope, double mass_z_slope, double mass_obs_scatter, double c1, double c2, double c3, double c4)$/;"	f
set_nuisance_cluster_Mobs	like_fourier_HOD.c	/^int set_nuisance_cluster_Mobs(double mass_obs_norm, double mass_obs_slope, double mass_z_slope, double mass_obs_scatter, double c1, double c2, double c3, double c4)$/;"	f
set_nuisance_clustering_photoz	like_fourier.c	/^int set_nuisance_clustering_photoz(double CP1,double CP2,double CP3,double CP4,double CP5,double CP6,double CP7,double CP8,double CP9,double CP10,double CPS1)$/;"	f
set_nuisance_clustering_photoz	like_fourier_HOD.c	/^int set_nuisance_clustering_photoz(double CP1,double CP2,double CP3,double CP4,double CP5,double CP6,double CP7,double CP8,double CP9,double CP10,double CPS1)$/;"	f
set_nuisance_gbias	like_fourier.c	/^int set_nuisance_gbias(double B1, double B2, double B3, double B4, double B5, double B6, double B7, double B8, double B9, double B10)$/;"	f
set_nuisance_ia	like_fourier.c	/^int set_nuisance_ia(double A_ia, double beta_ia, double eta_ia, double eta_ia_highz, double LF_alpha, double LF_P, double LF_Q, double LF_red_alpha, double LF_red_P, double LF_red_Q)$/;"	f
set_nuisance_ia	like_fourier_HOD.c	/^int set_nuisance_ia(double A_ia, double beta_ia, double eta_ia, double eta_ia_highz, double LF_alpha, double LF_P, double LF_Q, double LF_red_alpha, double LF_red_P, double LF_red_Q)$/;"	f
set_nuisance_shear_calib	like_fourier.c	/^void set_nuisance_shear_calib(double M1, double M2, double M3, double M4, double M5, double M6, double M7, double M8, double M9, double M10)$/;"	f
set_nuisance_shear_calib	like_fourier_HOD.c	/^void set_nuisance_shear_calib(double M1, double M2, double M3, double M4, double M5, double M6, double M7, double M8, double M9, double M10)$/;"	f
set_nuisance_shear_photoz	like_fourier.c	/^int set_nuisance_shear_photoz(double SP1,double SP2,double SP3,double SP4,double SP5,double SP6,double SP7,double SP8,double SP9,double SP10,double SPS1)$/;"	f
set_nuisance_shear_photoz	like_fourier_HOD.c	/^int set_nuisance_shear_photoz(double SP1,double SP2,double SP3,double SP4,double SP5,double SP6,double SP7,double SP8,double SP9,double SP10,double SPS1)$/;"	f
set_shear_priors_mpp	priors_mpp.c	/^void set_shear_priors_mpp(double *mean_m,double *sigma_m)$/;"	f
set_shear_priors_stage3	external_prior.c	/^void set_shear_priors_stage3()$/;"	f
set_shear_priors_stage4	external_prior.c	/^void set_shear_priors_stage4()$/;"	f
set_survey_parameters_to_	parameters.c	/^void set_survey_parameters_to_(char *surveyfile, int output)$/;"	f
set_survey_parameters_to_CFHTLS	parameters.c	/^void set_survey_parameters_to_CFHTLS()$/;"	f
set_survey_parameters_to_DES	parameters.c	/^void set_survey_parameters_to_DES()$/;"	f
set_survey_parameters_to_DES_BCC_noise	parameters.c	/^void set_survey_parameters_to_DES_BCC_noise()$/;"	f
set_survey_parameters_to_DES_BCC_nonoise	parameters.c	/^void set_survey_parameters_to_DES_BCC_nonoise()$/;"	f
set_survey_parameters_to_DES_SV	parameters.c	/^void set_survey_parameters_to_DES_SV()$/;"	f
set_survey_parameters_to_DES_Y1	parameters.c	/^void set_survey_parameters_to_DES_Y1()$/;"	f
set_survey_parameters_to_Euclid	parameters.c	/^void set_survey_parameters_to_Euclid()$/;"	f
set_survey_parameters_to_HSC	parameters.c	/^void set_survey_parameters_to_HSC()$/;"	f
set_survey_parameters_to_LSST	parameters.c	/^void set_survey_parameters_to_LSST()$/;"	f
set_survey_parameters_to_LSST_Tully_Fisher	parameters.c	/^void set_survey_parameters_to_LSST_Tully_Fisher()$/;"	f
set_survey_parameters_to_WFIRST	parameters.c	/^void set_survey_parameters_to_WFIRST() \/\/ according to WFIRST AFTA report April 2015$/;"	f
set_survey_parameters_to_WFIRST_Tully_Fisher	parameters.c	/^void set_survey_parameters_to_WFIRST_Tully_Fisher()$/;"	f
set_survey_parameters_to_WFIRST_extended	parameters.c	/^void set_survey_parameters_to_WFIRST_extended()$/;"	f
set_survey_parameters_to_largeULDB	parameters.c	/^void set_survey_parameters_to_largeULDB()$/;"	f
set_survey_parameters_to_mediumULDB	parameters.c	/^void set_survey_parameters_to_mediumULDB()$/;"	f
set_survey_parameters_to_smallULDB	parameters.c	/^void set_survey_parameters_to_smallULDB()$/;"	f
set_wlphotoz_priors_SV	external_prior.c	/^void set_wlphotoz_priors_SV()$/;"	f
set_wlphotoz_priors_mpp	priors_mpp.c	/^void set_wlphotoz_priors_mpp(double *bias_photoz_s,double *sigma_b_photoz_s){$/;"	f
set_wlphotoz_priors_stage3	external_prior.c	/^void set_wlphotoz_priors_stage3()$/;"	f
set_wlphotoz_priors_stage4	external_prior.c	/^void set_wlphotoz_priors_stage4()$/;"	f
setup_numpy	pt.c	/^void setup_numpy(){$/;"	f
sglob	structs.c	/^  double sglob;$/;"	m	struct:__anon18	file:
shear_Nbin	structs.c	/^  int shear_Nbin; \/\/ number of tomography bins$/;"	m	struct:__anon10	file:
shear_Npowerspectra	structs.c	/^  int shear_Npowerspectra;\/\/ number of tomography power spectra+2+3+...+Nbin$/;"	m	struct:__anon10	file:
shear_REDSHIFT_FILE	structs.c	/^  char shear_REDSHIFT_FILE[200];$/;"	m	struct:__anon11	file:
shear_calibration_m	structs.c	/^  double shear_calibration_m[10];$/;"	m	struct:__anon20	file:
shear_calibration_m	structs.c	/^  double shear_calibration_m[10][2];$/;"	m	struct:__anon21	file:
shear_histogram_zbins	structs.c	/^  int shear_histogram_zbins;$/;"	m	struct:__anon11	file:
shear_m	structs.c	/^    double shear_m[10];$/;"	m	struct:input_nuisance_params	file:
shear_m	structs.c	/^    double shear_m[10];$/;"	m	struct:input_nuisance_params_mpp	file:
shear_photoz	structs.c	/^  int shear_photoz;$/;"	m	struct:__anon11	file:
shear_pos	structs.c	/^  int shear_pos;$/;"	m	struct:__anon8	file:
shear_shear	structs.c	/^  int shear_shear;$/;"	m	struct:__anon8	file:
shear_zdistrpar_zmax	structs.c	/^  double shear_zdistrpar_zmax;$/;"	m	struct:__anon11	file:
shear_zdistrpar_zmin	structs.c	/^  double shear_zdistrpar_zmin;$/;"	m	struct:__anon11	file:
shear_zmax	structs.c	/^  double shear_zmax[10]; \/\/ code needs modification if more than 10 zbins$/;"	m	struct:__anon10	file:
shear_zmin	structs.c	/^  double shear_zmin[10];$/;"	m	struct:__anon10	file:
shearcalib	structs.c	/^  int shearcalib;$/;"	m	struct:__anon8	file:
sigma	BAO.c	/^  double sigma[10];$/;"	m	struct:__anon1	file:
sigma2	halo.c	/^double sigma2(double m)$/;"	f
sigma2_integrand	halo.c	/^double sigma2_integrand(double x, void * params)   \/\/ inner integral$/;"	f
sigma_8	structs.c	/^     double sigma_8;  \/* power spectrum normalization                   *\/$/;"	m	struct:__anon9	file:
sigma_8	structs.c	/^    double sigma_8;$/;"	m	struct:input_cosmo_params	file:
sigma_8	structs.c	/^    double sigma_8;$/;"	m	struct:input_cosmo_params_mpp	file:
sigma_e	structs.c	/^     double sigma_e;\/* rms inrinsic ellipticity noise*\/$/;"	m	struct:__anon12	file:
sigma_p	GRS.c	/^	double sigma_p[10]; \/\/ in km\/s$/;"	m	struct:__anon7	file:
sigma_p	structs.c	/^   double sigma_p; \/\/ in km\/s$/;"	m	struct:__anon24	file:
sigma_r_sqr	cosmo3D.c	/^double sigma_r_sqr()   $/;"	f
sigma_z	GRS.c	/^	double sigma_z[10]; \/\/ fractional accuracy$/;"	m	struct:__anon7	file:
sigma_z	structs.c	/^   double sigma_z; \/\/ fractional accuracy$/;"	m	struct:__anon24	file:
sigma_zphot_clustering	redshift.c	/^double sigma_zphot_clustering (double z, int nz){$/;"	f
sigma_zphot_clustering	redshift_spline.c	/^double sigma_zphot_clustering (double z, int nz){$/;"	f
sigma_zphot_clustering	structs.c	/^  double sigma_zphot_clustering[10];$/;"	m	struct:__anon20	file:
sigma_zphot_clustering	structs.c	/^  double sigma_zphot_clustering[10][2];$/;"	m	struct:__anon21	file:
sigma_zphot_magnification	structs.c	/^  double sigma_zphot_magnification[10];$/;"	m	struct:__anon20	file:
sigma_zphot_magnification	structs.c	/^  double sigma_zphot_magnification[10][2];$/;"	m	struct:__anon21	file:
sigma_zphot_shear	redshift.c	/^double sigma_zphot_shear (double z, int nz){$/;"	f
sigma_zphot_shear	redshift_spline.c	/^double sigma_zphot_shear (double z, int nz){$/;"	f
sigma_zphot_shear	structs.c	/^  double sigma_zphot_shear[10];$/;"	m	struct:__anon20	file:
sigma_zphot_shear	structs.c	/^  double sigma_zphot_shear[10][2];$/;"	m	struct:__anon21	file:
source_z_bias	structs.c	/^    double source_z_bias[10];$/;"	m	struct:input_nuisance_params	file:
source_z_bias	structs.c	/^    double source_z_bias[10];$/;"	m	struct:input_nuisance_params_mpp	file:
source_z_s	structs.c	/^    double source_z_s;$/;"	m	struct:input_nuisance_params	file:
sourcephotoz	structs.c	/^     char sourcephotoz[256];$/;"	m	struct:__anon12	file:
sqrarg	basics.c	/^static double sqrarg;$/;"	v	file:
ss	structs.c	/^    char ss[8]; \/* Calculate shear-shear components *\/$/;"	m	struct:__anon23	file:
sur	structs.c	/^}sur;$/;"	t	typeref:struct:__anon12	file:
survey	structs.c	/^sur survey = {.area_conversion_factor = 60.0*60.0*2.90888208665721580e-4*2.90888208665721580e-4, .n_gal_conversion_factor = 1.0\/2.90888208665721580e-4\/2.90888208665721580e-4,.ggl_overlap_cut = 1.};$/;"	v
survey_variance	covariances_3D.c	/^double survey_variance (double a, double fsky){$/;"	f
surveystage	structs.c	/^     int surveystage;$/;"	m	struct:__anon12	file:
t_lin	covariances_3D.c	/^double t_lin(double k1x, double k1y, double k2x, double k2y, double k3x, double k3y, double a)$/;"	f
tab_AB	structs.c	/^  double **tab_AB;$/;"	m	struct:__anon19	file:
tab_IA	structs.c	/^  double **tab_IA;$/;"	m	struct:__anon19	file:
test_kmax	redshift.c	/^int test_kmax(double l, int zl){ \/\/test whether the (l,zl) bin is in the linear clustering regime - return 1 if true, 0 otherwise$/;"	f
test_kmax	redshift_spline.c	/^int test_kmax(double l, int zl){ \/\/test whether the (l,zl) bin is in the linear clustering regime - return 1 if true, 0 otherwise$/;"	f
test_zoverlap	redshift.c	/^int test_zoverlap(int zl, int zs){ \/\/test whether source bin zs is behind lens bin zl$/;"	f
test_zoverlap	redshift_spline.c	/^int test_zoverlap(int zl, int zs){ \/\/test whether source bin zs is behind lens bin zl$/;"	f
test_zoverlap_c	redshift.c	/^int test_zoverlap_c(int zc, int zs){ \/\/test whether source bin zs is behind lens bin zl$/;"	f
test_zoverlap_c	redshift_spline.c	/^int test_zoverlap_c(int zc, int zs){ \/\/test whether source bin zs is behind lens bin zl$/;"	f
test_zoverlap_cov	redshift.c	/^int test_zoverlap_cov(int zl, int zs){ \/\/test whether source bin zs is behind lens bin zl$/;"	f
test_zoverlap_cov	redshift_spline.c	/^int test_zoverlap_cov(int zl, int zs){ \/\/test whether source bin zs is behind lens bin zl$/;"	f
theta	structs.c	/^  double *theta;$/;"	m	struct:__anon8	file:
tmax	structs.c	/^    double tmax; \/* Theta max (arcmin) *\/$/;"	m	struct:__anon23	file:
tmin	structs.c	/^    double tmin; \/* Theta min (arcmin) *\/$/;"	m	struct:__anon23	file:
tomo	structs.c	/^tomopara tomo = {.n_source = {0.,0.,0.,0.,0.,0.,0.,0.,0.,0.},.n_lens = {0.,0.,0.,0.,0.,0.,0.,0.,0.,0.}};$/;"	v
tomopara	structs.c	/^}tomopara;$/;"	t	typeref:struct:__anon10	file:
tri_1h	covariances_3D.c	/^double tri_1h(double k1, double k2, double k3, double k4,double a)$/;"	f
tri_1h_cmcm	covariances_cluster.c	/^double tri_1h_cmcm (double k1, double k2, double a,int nzc,int nN1, int nN2){\/\/cmcm 1-halo term$/;"	f
tri_1h_cov	covariances_3D.c	/^double tri_1h_cov(double k1, double k2, double a){$/;"	f
tri_1h_mmcm	covariances_cluster.c	/^double tri_1h_mmcm(double k1, double k2, double a,int nzc,int nN){ \/\/mmcm 1-halo term$/;"	f
tri_2h	covariances_3D.c	/^double tri_2h (double k1x,double k1y,double k2x,double k2y,double k3x,double k3y,double a){$/;"	f
tri_2h_13	covariances_3D.c	/^double tri_2h_13 (double k1x,double k1y,double k2x,double k2y,double k3x,double k3y,double a){$/;"	f
tri_2h_13_cov	covariances_3D.c	/^double tri_2h_13_cov (double k1,double k2,double a){$/;"	f
tri_2h_22	covariances_3D.c	/^double tri_2h_22 (double k1x,double k1y,double k2x,double k2y,double k3x,double k3y,double a){$/;"	f
tri_2h_22_cov	covariances_3D.c	/^double tri_2h_22_cov (double k1, double k2, double a){$/;"	f
tri_2h_cov	covariances_3D.c	/^double tri_2h_cov (double k1,double k2,double a){$/;"	f
tri_3h_cov	covariances_3D.c	/^double tri_3h_cov(double k1, double k2, double a){$/;"	f
tri_4h_cov	covariances_3D.c	/^double tri_4h_cov(double k1, double k2, double a){$/;"	f
tri_matter_cov	covariances_3D.c	/^double tri_matter_cov(double k1, double k2, double a){$/;"	f
tri_multih_cov	covariances_3D.c	/^double tri_multih_cov(double k1, double k2, double a){$/;"	f
twopi	basics.c	/^     double twopi; $/;"	m	struct:__anon2	file:
twopoint_via_hankel	cosmo2D_real.c	/^void twopoint_via_hankel(double **xi, double *logthetamin, double *logthetamax, C_tomo_pointer C_tomo, int ni, int nj, int N_Bessel){$/;"	f
u_g	HOD.c	/^double u_g(double k, double m, double a,int nz)\/\/ Fourier transformed normalized galaxy density profile, NFW with rescaled concentraion so far$/;"	f
u_g_rm	redmagic.c	/^double u_g_rm(double k, double m, double a)\/\/ Fourier transformed normalized galaxy density profile, NFW with rescaled concentraion so far$/;"	f
u_nfw	halo.c	/^double u_nfw(double c, double k, double m, double a){$/;"	f
u_nfw_c	halo.c	/^double u_nfw_c(double c,double k, double m, double aa){\/\/ analytic FT of NFW profile, from Cooray & Sheth 01$/;"	f
update_cosmopara	recompute.c	/^void update_cosmopara (cosmopara *C){$/;"	f
update_galpara	recompute.c	/^void update_galpara (galpara *G){$/;"	f
update_nuisance	recompute.c	/^void update_nuisance (nuisancepara *N){$/;"	f
var	GRS.c	/^   double* var;$/;"	m	struct:__anon6	file:
var	structs.c	/^   double** var;$/;"	m	struct:__anon24	file:
vt_bin_max	basics.c	/^     double vt_bin_max;$/;"	m	struct:cos	file:
vt_bin_min	basics.c	/^     double vt_bin_min;$/;"	m	struct:cos	file:
vt_max	basics.c	/^     double vt_max;$/;"	m	struct:cos	file:
vt_min	basics.c	/^     double vt_min;$/;"	m	struct:cos	file:
vtmax	structs.c	/^  double vtmax;$/;"	m	struct:__anon8	file:
vtmin	structs.c	/^  double vtmin;$/;"	m	struct:__anon8	file:
w0	structs.c	/^     double w0; \/\/time dependent Dark energy parametrization zero order$/;"	m	struct:__anon9	file:
w0	structs.c	/^    double w0;$/;"	m	struct:input_cosmo_params	file:
w0	structs.c	/^    double w0;$/;"	m	struct:input_cosmo_params_mpp	file:
w_clustering_HOD	cosmo2D_real.c	/^double w_clustering_HOD(double theta, int ni) \/\/ HOD based galaxy clustering 2PCF galaxies in bin ni$/;"	f
w_clustering_HOD_RM	redmagic_real.c	/^double w_clustering_HOD_RM(double theta)$/;"	f
w_clustering_HOD_rm	redmagic_real.c	/^double w_clustering_HOD_rm(double theta){$/;"	f
w_clustering_HOD_rm_1h	redmagic_real.c	/^double w_clustering_HOD_rm_1h(double theta)$/;"	f
w_clustering_HOD_rm_max	redmagic_real.c	/^double w_clustering_HOD_rm_max(double theta){$/;"	f
w_clustering_HOD_rm_tomo	redmagic_real.c	/^double w_clustering_HOD_rm_tomo(double theta, int nz)$/;"	f
w_clustering_tomo	cosmo2D_real.c	/^double w_clustering_tomo(double theta, int ni, int nj) \/\/ galaxy clustering tomography 2PCF galaxies in bins ni, nj$/;"	f
w_gamma_t_HOD_tomo	cosmo2D_real.c	/^double w_gamma_t_HOD_tomo(double theta,int ni, int nj) \/\/G-G lensing with HOD model, lens bin ni, source bin nj$/;"	f
w_gamma_t_tomo	cosmo2D_real.c	/^double w_gamma_t_tomo(double theta,int ni, int nj) \/\/G-G lensing, lens bin ni, source bin nj$/;"	f
w_gk_SPT	CMBxLSS.c	/^double w_gk_SPT(double theta, int ni) \/\/ galaxies (ni) x CMB kappa$/;"	f
w_ks_SPT	CMBxLSS.c	/^double w_ks_SPT(double theta, int ni){ \/\/ CMB kappa x shear (ni)$/;"	f
w_max_emu	cosmo3D.c	27;"	d	file:
w_min_emu	cosmo3D.c	28;"	d	file:
w_real	redmagic_real.c	/^double w_real(double theta){$/;"	f
w_tomo_exact	cosmo2D_real.c	/^double w_tomo_exact(int nt, int ni, int nj){$/;"	f
w_tomo_nonLimber	cosmo2D_exact.c	/^double w_tomo_nonLimber(int nt, int ni, int nj){$/;"	f
w_via_hankel_HOD_rm	redmagic_real.c	/^void w_via_hankel_HOD_rm(double **xi, double *logthetamin, double *logthetamax)$/;"	f
w_via_hankel_HOD_rm_1h	redmagic_real.c	/^void w_via_hankel_HOD_rm_1h(double **xi, double *logthetamin, double *logthetamax)$/;"	f
w_via_hankel_HOD_rm_tomo	redmagic_real.c	/^void w_via_hankel_HOD_rm_tomo(double **xi, double *logthetamin, double *logthetamax, int nz)$/;"	f
wa	structs.c	/^     double wa; \/\/time dependent Dark energy parametrization first order$/;"	m	struct:__anon9	file:
wa	structs.c	/^    double wa;$/;"	m	struct:input_cosmo_params	file:
wa	structs.c	/^    double wa;$/;"	m	struct:input_cosmo_params_mpp	file:
wa_max_emu	cosmo3D.c	29;"	d	file:
wa_min_emu	cosmo3D.c	30;"	d	file:
wlphotoz	structs.c	/^  int wlphotoz;$/;"	m	struct:__anon8	file:
write_gglensing_zbins	redshift.c	/^void write_gglensing_zbins(char *surveyname){$/;"	f
write_gglensing_zbins	redshift_spline.c	/^void write_gglensing_zbins(char *surveyname){$/;"	f
write_plin	pt.c	/^void write_plin(char *filebase){$/;"	f
xi_3d_rmax	basics.c	/^     double xi_3d_rmax;$/;"	m	struct:__anon4	file:
xi_3d_rmin	basics.c	/^     double xi_3d_rmin;$/;"	m	struct:__anon4	file:
xi_gg	redmagic_real.c	/^double xi_gg (double R_mpc, double a){ \/\/ 3D gg correlation function (tabulated at z = 0.5*(tomo.clustering_zmin[0]+tomo.clustering_zmax[0]); scaled with D(z)^2)$/;"	f
xi_gg_1h	redmagic_real.c	/^double xi_gg_1h (double R_mpc, double a){ \/\/ 3D gg correlation function (tabulated at z = 0.5*(tomo.clustering_zmin[0]+tomo.clustering_zmax[0]); scaled with D(z)^2)$/;"	f
xi_magnification_magnification_tomo	magnification.c	/^double xi_magnification_magnification_tomo(double theta, int ni, int nj)$/;"	f
xi_nl	redmagic_real.c	/^double xi_nl (double R, double a){ \/\/ 3D matter correlation function (tabulated at z = 0.5*(tomo.clustering_zmin[0]+tomo.clustering_zmax[0]); scaled with D(z)^2)$/;"	f
xi_nl2	redmagic_real.c	/^double xi_nl2 (double R, double a){ \/\/ 3D matter correlation function (tabulated at z = 0.5*(tomo.clustering_zmin[0]+tomo.clustering_zmax[0]); scaled with D(z)^2)$/;"	f
xi_pm_rebin	cosmo2D_real.c	/^double xi_pm_rebin(int pm, double thetamin_i, double thetamax_i, int ni,int nj){$/;"	f
xi_pm_tomo	cosmo2D_real.c	/^double xi_pm_tomo(int pm, double theta, int ni, int nj) \/\/shear tomography correlation functions$/;"	f
xi_position_magnification_tomo	magnification.c	/^double xi_position_magnification_tomo(double theta, int ni, int nj)$/;"	f
xi_shear_magnification_tomo	magnification.c	/^double xi_shear_magnification_tomo(double theta, int ni, int nj)$/;"	f
xi_via_hankel_magnification_magnification_tomo	magnification.c	/^void xi_via_hankel_magnification_magnification_tomo(double **xi, double *logthetamin, double *logthetamax, int ni, int nj)$/;"	f
xi_via_hankel_position_magnification_tomo	magnification.c	/^void xi_via_hankel_position_magnification_tomo(double **xi, double *logthetamin, double *logthetamax, int ni, int nj)$/;"	f
xi_via_hankel_shear_magnification_tomo	magnification.c	/^void xi_via_hankel_shear_magnification_tomo(double **xi, double *logthetamin, double *logthetamax, int ni, int nj)$/;"	f
xi_via_hankel_theta_max	basics.c	/^     double xi_via_hankel_theta_max;$/;"	m	struct:__anon4	file:
xi_via_hankel_theta_min	basics.c	/^     double xi_via_hankel_theta_min;$/;"	m	struct:__anon4	file:
xip_tomo_exact	cosmo2D_real.c	/^double xip_tomo_exact(int nt, int ni, int nj){$/;"	f
xipm_via_hankel	cosmo2D_real.c	/^void xipm_via_hankel(double **xi, double *logthetamin, double *logthetamax,  C_tomo_pointer C_tomo,int ni, int nj)$/;"	f
z	BAO.c	/^  double z[10];$/;"	m	struct:__anon1	file:
z	GRS.c	/^   double z[10];$/;"	m	struct:__anon6	file:
z	structs.c	/^   double z[10];$/;"	m	struct:__anon24	file:
zdistr_cluster	cluster.c	/^double zdistr_cluster(double z, int nz, int nN){ \/\/simplfied selection function, disregards evolution of N-M relation + mass function within redshift bin$/;"	f
zdistr_cluster	clusters_DES.c	/^double zdistr_cluster(double z, int nz, int nN){ \/\/simplfied selection function, disregards evolution of N-M relation + mass function within redshift bin$/;"	f
zdistr_histo_1	redshift.c	/^double zdistr_histo_1(double z, void *params) \/\/return nz(z) based on redshift file with one redshift distribution$/;"	f
zdistr_histo_1	redshift_spline.c	/^double zdistr_histo_1(double z, void *params) \/\/return nz(z) based on redshift file with one redshift distribution$/;"	f
zdistr_histo_n	redshift.c	/^double zdistr_histo_n(double z,  void *params) \/\/ return nz(z,j) based on redshift file with structure z[i] nz[0][i] .. nz[tomo.shear_Nbin-1][i]$/;"	f
zdistr_histo_n	redshift_spline.c	/^double zdistr_histo_n(double z,  void *params) \/\/ return nz(z,j) based on redshift file with structure z[i] nz[0][i] .. nz[tomo.shear_Nbin-1][i]$/;"	f
zdistr_photoz	redshift.c	/^double zdistr_photoz(double zz,int j) \/\/returns n(ztrue | j), works only with binned distributions; j =-1 -> no tomography; j>= 0 -> tomography bin j$/;"	f
zdistr_photoz	redshift_spline.c	/^double zdistr_photoz(double zz,int j) \/\/returns n(ztrue | j), works only with binned distributions; j>= 0 -> tomography bin j$/;"	f
zmean	redshift.c	/^double zmean(int j){ \/\/mean true redshift of galaxies in tomography bin j$/;"	f
zmean	redshift_spline.c	/^double zmean(int j){ \/\/mean true redshift of galaxies in tomography bin j$/;"	f
zmean_source	redshift.c	/^double zmean_source(int j){ \/\/mean true redshift of source galaxies in tomography bin j$/;"	f
zmean_source	redshift_spline.c	/^double zmean_source(int j){ \/\/mean true redshift of source galaxies in tomography bin j$/;"	f
